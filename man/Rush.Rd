% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rush.R
\name{Rush}
\alias{Rush}
\title{Rush}
\description{
Rush
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{experiment_id}}{(\code{character(1)})\cr
Identifier of the experiment.}

\item{\code{client_id}}{(\code{character(1)})\cr
Identifier of the client.}

\item{\code{config}}{(\link[redux:redis_config]{redux::redis_config})\cr
Redis configuration.}

\item{\code{n_workers}}{(\code{integer(1)})\cr
Number of running workers.}

\item{\code{promises}}{(\code{\link[future:Future-class]{future::Future()}})\cr
List of futures.}

\item{\code{constants}}{(\code{list()})\cr
List of constants.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{connector}}{(\link[redux:hiredis]{redux::hiredis})\cr
Redis connector.}

\item{\code{data}}{(\link[data.table:data.table]{data.table::data.table})\cr
Contains all performed function calls.}

\item{\code{terminate}}{(\code{logical(1)})\cr
Whether the tuning process has been terminated.}

\item{\code{queued_tasks}}{(\code{character()})\cr
Keys of queued tasks.}

\item{\code{running_tasks}}{(\code{character()})\cr
Keys of running tasks.}

\item{\code{finished_tasks}}{(\code{character()})\cr
Keys of finished tasks.}

\item{\code{archived_tasks}}{(\code{character()})\cr
Keys of archived tasks.}

\item{\code{n_queued_tasks}}{(\code{integer(1)})\cr
Number of queued tasks.}

\item{\code{n_running_tasks}}{(\code{integer(1)})\cr
Number of running tasks.}

\item{\code{n_finished_tasks}}{(\code{integer(1)})\cr
Number of finished tasks.}

\item{\code{n_archived_tasks}}{(\code{integer(1)})\cr
Number of archived tasks.}

\item{\code{free_workers}}{(\link{integer})\cr
Number of free workers.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Rush-new}{\code{Rush$new()}}
\item \href{#method-Rush-format}{\code{Rush$format()}}
\item \href{#method-Rush-print}{\code{Rush$print()}}
\item \href{#method-Rush-start_workers}{\code{Rush$start_workers()}}
\item \href{#method-Rush-stop_workers}{\code{Rush$stop_workers()}}
\item \href{#method-Rush-check_workers}{\code{Rush$check_workers()}}
\item \href{#method-Rush-reset}{\code{Rush$reset()}}
\item \href{#method-Rush-push_tasks}{\code{Rush$push_tasks()}}
\item \href{#method-Rush-pop_task}{\code{Rush$pop_task()}}
\item \href{#method-Rush-push_result}{\code{Rush$push_result()}}
\item \href{#method-Rush-sync_data}{\code{Rush$sync_data()}}
\item \href{#method-Rush-clone}{\code{Rush$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-new"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$new(id = NULL, config = redux::redis_config())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the server.}

\item{\code{config}}{(\link[redux:redis_config]{redux::redis_config})\cr
Redis configuration.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-format"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-format}{}}}
\subsection{Method \code{format()}}{
Helper for print outputs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$format(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(ignored).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character()}).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-print"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-print}{}}}
\subsection{Method \code{print()}}{
Print method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{character()}).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-start_workers"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-start_workers}{}}}
\subsection{Method \code{start_workers()}}{
Start workers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$start_workers(fun, as_list = FALSE, globals = NULL, packages = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{(\code{function})\cr
Function to be executed by the workers.}

\item{\code{as_list}}{(\code{logical(1)})\cr
Whether the function takes a list of arguments (\verb{fun(xs = list(x1, x2)}) or named arguments (\code{fun(x1, x2)}).}

\item{\code{globals}}{(\code{character()})\cr
Global variables to be loaded by the workers.}

\item{\code{packages}}{(\code{character()})\cr
Packages to be loaded by the workers.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-stop_workers"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-stop_workers}{}}}
\subsection{Method \code{stop_workers()}}{
Stop workers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$stop_workers()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-check_workers"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-check_workers}{}}}
\subsection{Method \code{check_workers()}}{
Check if workers are running.
Print error messages if not.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$check_workers()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-reset"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-reset}{}}}
\subsection{Method \code{reset()}}{
Reset the data base.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$reset()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-push_tasks"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-push_tasks}{}}}
\subsection{Method \code{push_tasks()}}{
Pushes a task to the queue.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$push_tasks(xss, extra = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{xss}}{(list of named \code{list()})\cr
Lists of arguments for the function e.g. \verb{list(list(x1, x2), list(x1, x2)))}.}

\item{\code{extra}}{(\code{list})\cr
List of additional information stored along with the task e.g. \verb{list(list(timestamp), list(timestamp)))}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-pop_task"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-pop_task}{}}}
\subsection{Method \code{pop_task()}}{
Pop a task from the queue.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$pop_task(timeout = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timeout}}{(\code{numeric(1)})\cr
Time to wait for task in seconds.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-push_result"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-push_result}{}}}
\subsection{Method \code{push_result()}}{
Pushes a result to the data base.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$push_result(key, ys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{(\code{character(1)})\cr
Key of the associated task.}

\item{\code{ys}}{(named \code{list()})\cr
List of results.
Can contain additional information.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-sync_data"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-sync_data}{}}}
\subsection{Method \code{sync_data()}}{
Sync data from the data base to the local cache.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$sync_data()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rush-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Rush-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rush$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}

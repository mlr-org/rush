[{"path":"https://rush.mlr-org.com/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rush authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-workers","dir":"Articles","previous_headings":"","what":"Local Workers","title":"Controller","text":"use random search example Rush article demonstrate controller works. Workers may initiated locally remotely. Local workers run machine controller, whereas remote workers operate separate machines. $start_local_workers() method initiates local workers using processx package. n_workers parameter specifies number workers launch. worker_loop parameter defines function executed worker. worker_loop function depends global variables, can provided via globals parameter. Required packages worker_loop can specified using packages parameter. Worker information accessible $worker_info method. worker identified worker_id. pid field denotes process identifier, hostname field indicates machine name. remote column specifies whether worker remote, heartbeat column indicates presence heartbeat process. Heartbeat mechanisms discussed Error Handling section. $worker_states method returns current state worker. Possible states include \"running\", \"terminated\", \"killed\", \"lost\". Additional workers may added network time. rush integrated third-party package, starting workers typically managed package . cases, users may configure worker options invoking rush_plan() function. function allows explicit specification number workers, type workers, configuration connecting Redis database. Global variables defined global environment must also accessible workers. specified name $start_local_workers() method. variables serialized stored Redis database. Upon initialization, worker retrieves serialized globals database assigns global environment. Note maximum size Redis string 512 MiB. serialized globals required worker loop exceed limit, Rush raise error. scenarios controller workers access shared file system, Rush instead write large objects disk. large_objects_path argument rush_plan() specifies directory used storing large objects. Workers can stopped individually . terminate specific worker, $stop_workers() method invoked corresponding worker_ids argument. command terminates selected worker process. stop workers reset network, $reset() method used. preceding example, optimization process stopped 100 iterations. Alternatively, possible terminate optimization sending terminate signal. worker loop must implement rush$terminated flag. rush controller can terminate optimization. random search proceeds usual. terminate optimization, following command used. workers terminated. simulate segfault worker killing worker process. Workers started using faulty worker loop. $detect_lost_workers() method used identify failed workers. worker detected, state updated \"lost\". Workers failed can restarted using $restart_workers() method. method accepts worker_ids workers restarted. first worker restarted state updated \"running\". Workers record messages generated using lgr package database. lgr_thresholds argument $start_local_workers() specifies logging level logger, e.g. c(\"mlr3/rush\" = \"debug\"). enabling log message storage introduces minor performance overhead, valuable debugging purposes. default, log messages stored. enable logging, workers started desired logging threshold. recent log messages can printed follows. retrieve log entries, use $read_log() method. reset network.","code":"library(rush)  wl_random_search = function(rush) {   while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-network\",   config = redux::redis_config()) worker_ids = rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4) rush$worker_info worker_id   pid remote      hostname heartbeat   state           <char> <int> <lgcl>        <char>    <lgcl>  <char> 1: titanic_bi...  9021  FALSE pkrvmjbmru...     FALSE running 2: sleepful_w...  9032  FALSE pkrvmjbmru...     FALSE running 3: corporate_...  9037  FALSE pkrvmjbmru...     FALSE running 4: governing_...  9046  FALSE pkrvmjbmru...     FALSE running rush$worker_states state     worker_id     <char>        <char> 1: running titanic_bi... 2: running sleepful_w... 3: running corporate_... 4: running governing_... rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$worker_states state     worker_id     <char>        <char> 1: running titanic_bi... 2: running sleepful_w... 3: running corporate_... 4: running governing_... 5: running initial_gr... 6: running uninvolved... rush_plan(n_workers = 4, config = redux::redis_config(), worker_type = \"local\") rush$stop_workers(worker_ids = worker_ids[1]) rush$worker_states state     worker_id     <char>        <char> 1: running sleepful_w... 2: running corporate_... 3: running governing_... 4: running initial_gr... 5: running uninvolved... 6:  killed titanic_bi... rush$reset() wl_random_search = function(rush) {   while(!rush$terminated) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-random-search-terminate\",   config = redux::redis_config())  rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$fetch_finished_tasks() Null data.table (0 rows and 0 cols) rush$stop_workers(type = \"terminate\") rush$worker_states state     worker_id     <char>        <char> 1: running harmful_as... 2: running associated... rush = rsh(network = \"test-failed-workers\")  wl_failed_worker = function(rush) {   tools::pskill(Sys.getpid(), tools::SIGKILL) } worker_ids =  rush$start_local_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() rush$worker_states state     worker_id    <char>        <char> 1:   lost kainophobi... 2:   lost shadeful_n... rush$restart_workers(worker_ids = worker_ids[1]) rush$worker_states state     worker_id     <char>        <char> 1: running kainophobi... 2:    lost shadeful_n... rush = rsh(network = \"test-log-messages\")  wl_log_message = function(rush) {   lg = lgr::get_logger(\"mlr3/rush\")   lg$info(\"This is an info message from worker %s\", rush$worker_id) }  rush$start_local_workers(   worker_loop = wl_log_message,   n_workers = 2,   lgr_thresholds = c(rush = \"info\")) Sys.sleep(1) rush$print_log() rush$read_log() Null data.table (0 rows and 0 cols) rush$reset()"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-start-workers","dir":"Articles","previous_headings":"","what":"Start Workers","title":"Controller","text":"Workers may initiated locally remotely. Local workers run machine controller, whereas remote workers operate separate machines. $start_local_workers() method initiates local workers using processx package. n_workers parameter specifies number workers launch. worker_loop parameter defines function executed worker. worker_loop function depends global variables, can provided via globals parameter. Required packages worker_loop can specified using packages parameter. Worker information accessible $worker_info method. worker identified worker_id. pid field denotes process identifier, hostname field indicates machine name. remote column specifies whether worker remote, heartbeat column indicates presence heartbeat process. Heartbeat mechanisms discussed Error Handling section. $worker_states method returns current state worker. Possible states include \"running\", \"terminated\", \"killed\", \"lost\". Additional workers may added network time.","code":"worker_ids = rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4) rush$worker_info worker_id   pid remote      hostname heartbeat   state           <char> <int> <lgcl>        <char>    <lgcl>  <char> 1: titanic_bi...  9021  FALSE pkrvmjbmru...     FALSE running 2: sleepful_w...  9032  FALSE pkrvmjbmru...     FALSE running 3: corporate_...  9037  FALSE pkrvmjbmru...     FALSE running 4: governing_...  9046  FALSE pkrvmjbmru...     FALSE running rush$worker_states state     worker_id     <char>        <char> 1: running titanic_bi... 2: running sleepful_w... 3: running corporate_... 4: running governing_... rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$worker_states state     worker_id     <char>        <char> 1: running titanic_bi... 2: running sleepful_w... 3: running corporate_... 4: running governing_... 5: running initial_gr... 6: running uninvolved..."},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-rush-plan","dir":"Articles","previous_headings":"","what":"Rush Plan","title":"Controller","text":"rush integrated third-party package, starting workers typically managed package . cases, users may configure worker options invoking rush_plan() function. function allows explicit specification number workers, type workers, configuration connecting Redis database.","code":"rush_plan(n_workers = 4, config = redux::redis_config(), worker_type = \"local\")"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-globals","dir":"Articles","previous_headings":"","what":"Globals","title":"Controller","text":"Global variables defined global environment must also accessible workers. specified name $start_local_workers() method. variables serialized stored Redis database. Upon initialization, worker retrieves serialized globals database assigns global environment. Note maximum size Redis string 512 MiB. serialized globals required worker loop exceed limit, Rush raise error. scenarios controller workers access shared file system, Rush instead write large objects disk. large_objects_path argument rush_plan() specifies directory used storing large objects.","code":""},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-stop-worker","dir":"Articles","previous_headings":"","what":"Stop Worker","title":"Controller","text":"Workers can stopped individually . terminate specific worker, $stop_workers() method invoked corresponding worker_ids argument. command terminates selected worker process. stop workers reset network, $reset() method used. preceding example, optimization process stopped 100 iterations. Alternatively, possible terminate optimization sending terminate signal. worker loop must implement rush$terminated flag. rush controller can terminate optimization. random search proceeds usual. terminate optimization, following command used. workers terminated.","code":"rush$stop_workers(worker_ids = worker_ids[1]) rush$worker_states state     worker_id     <char>        <char> 1: running sleepful_w... 2: running corporate_... 3: running governing_... 4: running initial_gr... 5: running uninvolved... 6:  killed titanic_bi... rush$reset() wl_random_search = function(rush) {   while(!rush$terminated) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-random-search-terminate\",   config = redux::redis_config())  rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$fetch_finished_tasks() Null data.table (0 rows and 0 cols) rush$stop_workers(type = \"terminate\") rush$worker_states state     worker_id     <char>        <char> 1: running harmful_as... 2: running associated..."},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-failed-workers","dir":"Articles","previous_headings":"","what":"Failed Workers","title":"Controller","text":"simulate segfault worker killing worker process. Workers started using faulty worker loop. $detect_lost_workers() method used identify failed workers. worker detected, state updated \"lost\".","code":"rush = rsh(network = \"test-failed-workers\")  wl_failed_worker = function(rush) {   tools::pskill(Sys.getpid(), tools::SIGKILL) } worker_ids =  rush$start_local_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() rush$worker_states state     worker_id    <char>        <char> 1:   lost kainophobi... 2:   lost shadeful_n..."},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-restart-workers","dir":"Articles","previous_headings":"","what":"Restart Workers","title":"Controller","text":"Workers failed can restarted using $restart_workers() method. method accepts worker_ids workers restarted. first worker restarted state updated \"running\".","code":"rush$restart_workers(worker_ids = worker_ids[1]) rush$worker_states state     worker_id     <char>        <char> 1: running kainophobi... 2:    lost shadeful_n..."},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-log-messages","dir":"Articles","previous_headings":"","what":"Log Messages","title":"Controller","text":"Workers record messages generated using lgr package database. lgr_thresholds argument $start_local_workers() specifies logging level logger, e.g. c(\"mlr3/rush\" = \"debug\"). enabling log message storage introduces minor performance overhead, valuable debugging purposes. default, log messages stored. enable logging, workers started desired logging threshold. recent log messages can printed follows. retrieve log entries, use $read_log() method. reset network.","code":"rush = rsh(network = \"test-log-messages\")  wl_log_message = function(rush) {   lg = lgr::get_logger(\"mlr3/rush\")   lg$info(\"This is an info message from worker %s\", rush$worker_id) }  rush$start_local_workers(   worker_loop = wl_log_message,   n_workers = 2,   lgr_thresholds = c(rush = \"info\")) Sys.sleep(1) rush$print_log() rush$read_log() Null data.table (0 rows and 0 cols) rush$reset()"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-remote-workers","dir":"Articles","previous_headings":"","what":"Remote Workers","title":"Controller","text":"mirai package provides straightforward mechanism launching rush workers remote machines. mirai manages daemons, persistent background processes capable executing arbitrary R code parallel. daemons communicate main session. Usually mirai used start daemons remote machines can also used start local daemons. Daemons may also launched remote machine via SSH. high performance computing clusters, daemons can started using scheduler. define worker loop. start daemons. daemons(0) stops daemons. daemons started, can start remote workers. Failed workers started mirai also detected controller. simulate segfault worker killing worker process. segmentation fault also terminates associated mirai daemon. Therefore, necessary restart daemon restarting workers. Workers can restarted using $restart_workers() method.","code":"library(mirai)  daemons(   n = 2,   url = host_url() ) [1] 0 status() $connections [1] 0  $daemons [1] \"tcp://10.1.0.60:38477\"  $mirai  awaiting executing completed         0         0         0 daemons(   n = 2L,   url = host_url(port = 5555),   remote = ssh_config(remotes = \"ssh://10.75.32.90\") ) daemons(   n = 2L,   url = host_url(),   remote = remote_config(     command = \"sbatch\",     args = c(\"--mem 512\", \"-n 1\", \"--wrap\", \".\"),     rscript = file.path(R.home(\"bin\"), \"Rscript\"),     quote = TRUE   ) ) wl_random_search = function(rush) {   while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-network\",   config = redux::redis_config()) daemons(0) [1] 0 daemons(2) [1] 2 worker_ids = rush$start_remote_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$worker_info worker_id   pid remote      hostname heartbeat   state           <char> <int> <lgcl>        <char>    <lgcl>  <char> 1: germless_s...  9565   TRUE pkrvmjbmru...     FALSE running 2: radiophobi...  9563   TRUE pkrvmjbmru...     FALSE running daemons(0) [1] 0 daemons(2) [1] 2 rush = rsh(network = \"test-failed-mirai-workers\")  wl_failed_worker = function(rush) {   tools::pskill(Sys.getpid(), tools::SIGKILL) }  worker_ids = rush$start_remote_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() daemons(0) [1] 0 daemons(2) [1] 2 status() $connections [1] 2  $daemons [1] \"abstract://b49e1a539c5bdff714511568\"  $mirai  awaiting executing completed         0         0         0 rush$restart_workers(worker_ids)"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-remote-start-workers","dir":"Articles","previous_headings":"","what":"Start Workers","title":"Controller","text":"Usually mirai used start daemons remote machines can also used start local daemons. Daemons may also launched remote machine via SSH. high performance computing clusters, daemons can started using scheduler. define worker loop. start daemons. daemons(0) stops daemons. daemons started, can start remote workers.","code":"library(mirai)  daemons(   n = 2,   url = host_url() ) [1] 0 status() $connections [1] 0  $daemons [1] \"tcp://10.1.0.60:38477\"  $mirai  awaiting executing completed         0         0         0 daemons(   n = 2L,   url = host_url(port = 5555),   remote = ssh_config(remotes = \"ssh://10.75.32.90\") ) daemons(   n = 2L,   url = host_url(),   remote = remote_config(     command = \"sbatch\",     args = c(\"--mem 512\", \"-n 1\", \"--wrap\", \".\"),     rscript = file.path(R.home(\"bin\"), \"Rscript\"),     quote = TRUE   ) ) wl_random_search = function(rush) {   while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-network\",   config = redux::redis_config()) daemons(0) [1] 0 daemons(2) [1] 2 worker_ids = rush$start_remote_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$worker_info worker_id   pid remote      hostname heartbeat   state           <char> <int> <lgcl>        <char>    <lgcl>  <char> 1: germless_s...  9565   TRUE pkrvmjbmru...     FALSE running 2: radiophobi...  9563   TRUE pkrvmjbmru...     FALSE running"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-remote-failed-workers","dir":"Articles","previous_headings":"","what":"Failed Workers","title":"Controller","text":"Failed workers started mirai also detected controller. simulate segfault worker killing worker process. segmentation fault also terminates associated mirai daemon. Therefore, necessary restart daemon restarting workers. Workers can restarted using $restart_workers() method.","code":"daemons(0) [1] 0 daemons(2) [1] 2 rush = rsh(network = \"test-failed-mirai-workers\")  wl_failed_worker = function(rush) {   tools::pskill(Sys.getpid(), tools::SIGKILL) }  worker_ids = rush$start_remote_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() daemons(0) [1] 0 daemons(2) [1] 2 status() $connections [1] 2  $daemons [1] \"abstract://b49e1a539c5bdff714511568\"  $mirai  awaiting executing completed         0         0         0 rush$restart_workers(worker_ids)"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-script-workers","dir":"Articles","previous_headings":"","what":"Script Workers","title":"Controller","text":"flexible method starting workers use script generated $worker_script() method. script can executed either local machine remote machine. requirement machine capable running R scripts access Redis database. Workers started processx mirai monitored packages. heartbeat mechanism monitor status script workers. mechanism consists heartbeat key set expiration timeout dedicated heartbeat process refreshes timeout periodically. heartbeat process started callr linked main process worker. event worker’s failure, associated heartbeat process also ceases function, thus halting renewal timeout. absence heartbeat key acts indicator controller worker longer operational. Consequently, controller updates worker’s status \"lost\". Heartbeats initiated upon worker startup specifying heartbeat_period heartbeat_expire parameters. heartbeat_period defines frequency heartbeat process update timeout. heartbeat_expire sets duration, seconds, heartbeat key expires. expiration time set value greater heartbeat period ensure heartbeat process sufficient time refresh timeout. heartbeat process also way kill script worker. $stop_workers(type = \"kill\") method pushes kill signal heartbeat process. heartbeat process terminates main process worker.","code":"rush = rsh(   network = \"test-script-workers\",   config = redux::redis_config())  rush$worker_script(   worker_loop = wl_random_search) rush$worker_script(   worker_loop = wl_random_search,   heartbeat_period = 1,   heartbeat_expire = 3)"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-script-error-handling","dir":"Articles","previous_headings":"","what":"Error Handling","title":"Controller","text":"Workers started processx mirai monitored packages. heartbeat mechanism monitor status script workers. mechanism consists heartbeat key set expiration timeout dedicated heartbeat process refreshes timeout periodically. heartbeat process started callr linked main process worker. event worker’s failure, associated heartbeat process also ceases function, thus halting renewal timeout. absence heartbeat key acts indicator controller worker longer operational. Consequently, controller updates worker’s status \"lost\". Heartbeats initiated upon worker startup specifying heartbeat_period heartbeat_expire parameters. heartbeat_period defines frequency heartbeat process update timeout. heartbeat_expire sets duration, seconds, heartbeat key expires. expiration time set value greater heartbeat period ensure heartbeat process sufficient time refresh timeout. heartbeat process also way kill script worker. $stop_workers(type = \"kill\") method pushes kill signal heartbeat process. heartbeat process terminates main process worker.","code":"rush$worker_script(   worker_loop = wl_random_search,   heartbeat_period = 1,   heartbeat_expire = 3)"},{"path":"https://rush.mlr-org.com/dev/articles/error_handling.html","id":"sec-error-handling-simple","dir":"Articles","previous_headings":"","what":"Simple R Errors","title":"Error Handling and Debugging","text":"illustrate error-handling mechanism rush, employ random search example main vignette. time introduce random error 50% probability. Within worker loop, users responsible catching errors marking corresponding task \"failed\" using $push_failed() method. start workers. error occurs, task marked \"failed\", error message stored \"message\" column. approach ensures errors interrupt overall execution process. allows subsequent inspection errors reevaluation failed tasks necessary.","code":"library(rush)  branin = function(x1, x2) {   (x2 - 5.1 / (4 * pi^2) * x1^2 + 5 / pi * x1 - 6)^2 + 10 * (1 - 1 / (8 * pi)) * cos(x1) + 10 }  wl_random_search = function(rush) {    while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      tryCatch({       if (runif(1) < 0.5) stop(\"Random Error\")       ys = list(y = branin(xs$x1, xs$x2))       rush$push_results(key, yss = list(ys))     }, error = function(e) {       condition = list(message = e$message)       rush$push_failed(key, conditions = list(condition))     })      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } } rush = rsh(   network = \"test-simply-error\",   config = redux::redis_config())  rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4,   globals = \"branin\") rush$fetch_failed_tasks() x1         x2   pid     worker_id       message          keys           <num>      <num> <int>        <char>        <char>        <char>  1:  5.89262503  4.3110026  9903 loveable_w... Random Err... 807e9cc4-c...  2:  1.57706707 14.3139523  9903 loveable_w... Random Err... 62ca7a2e-b...  3:  0.10989442 13.8346251  9903 loveable_w... Random Err... 9848dfa0-1...  4:  4.93951279  4.4273869  9903 loveable_w... Random Err... 7c268bd3-6...  5: -1.80487119  0.8134240  9903 loveable_w... Random Err... 2d3bf359-6...  6: -4.71277069  6.0755499  9903 loveable_w... Random Err... 87a10cbc-a...  7:  7.47729429 11.6741252  9903 loveable_w... Random Err... c0f7b47c-4...  8:  1.60270798  1.2992010  9919 statued_fa... Random Err... 8b554d67-8...  9:  7.63198454 14.5868453  9919 statued_fa... Random Err... 0f8bbb5a-0... 10:  8.48761320  3.7107906  9903 loveable_w... Random Err... 8f462e6a-4... 11:  0.07654963 13.2654054  9903 loveable_w... Random Err... 8bf2d927-7... 12:  5.11772434 14.3120326  9914 maddening_... Random Err... 8e2caa5c-3... 13:  9.45261271 14.3580239  9919 statued_fa... Random Err... 391623f7-0... 14:  5.88006820  3.3000745  9903 loveable_w... Random Err... d4be71c1-e... 15: -0.33225695 12.5934542  9903 loveable_w... Random Err... 41c08d92-2... 16:  2.38316455  2.4524822  9914 maddening_... Random Err... 47645719-5... 17: -2.23084808  2.4245282  9929 subtrapezo... Random Err... ed971755-1... 18:  1.94797708  4.6053011  9919 statued_fa... Random Err... 3a7068a3-9... 19:  6.84302440 11.1300592  9919 statued_fa... Random Err... 3ed4b3bf-e... 20:  8.05136435 13.0362728  9914 maddening_... Random Err... e672622b-2... 21: -4.50680091  2.8934431  9919 statued_fa... Random Err... f2e11061-e... 22:  8.86970928  3.1516174  9929 subtrapezo... Random Err... 8a9c5630-7... 23:  2.25728294  3.6939390  9914 maddening_... Random Err... b5b23fc5-f... 24:  3.48032234  7.5669064  9919 statued_fa... Random Err... dbfc01f5-4... 25:  5.73553179  4.7355986  9929 subtrapezo... Random Err... c5030f52-4... 26: -0.01849509  3.7090787  9903 loveable_w... Random Err... 63849189-d... 27:  6.12852974 13.5560695  9914 maddening_... Random Err... e2ac919c-c... 28:  7.36902050  9.5420749  9929 subtrapezo... Random Err... 23631c57-5... 29: -3.49440055  6.8574469  9903 loveable_w... Random Err... 1e7d0ba1-8... 30:  3.68020151 10.7252710  9929 subtrapezo... Random Err... f8c663d7-5... 31: -3.41481984  0.6709414  9919 statued_fa... Random Err... 7f39ae04-8...              x1         x2   pid     worker_id       message          keys"},{"path":"https://rush.mlr-org.com/dev/articles/error_handling.html","id":"sec-error-handling-workers","dir":"Articles","previous_headings":"","what":"Handling Failing Workers","title":"Error Handling and Debugging","text":"rush package provides mechanisms address situations workers fail due crashes lost connections. failures may result tasks remaining “running” state indefinitely. illustrate , define function simulates segmentation fault terminating worker process. package offers $detect_lost_workers() method, designed identify manage occurrences. method works workers started $start_local_workers() $start_remote_workers(). Workers started $worker_script() must started heartbeat mechanism (see vignette). $detect_lost_workers() method also supports automatic restarting lost workers option restart_workers = TRUE specified. Alternatively, lost workers may restarted manually using $restart_workers() method. Automatic restarting available local workers. worker fails, status task caused failure set \"failed\".","code":"wl_failed_worker = function(rush) {   xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))   key = rush$push_running_tasks(xss = list(xs))    tools::pskill(Sys.getpid(), tools::SIGKILL) }  rush = rsh(network = \"test-failed-workers\")  worker_ids =  rush$start_local_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() rush$fetch_failed_tasks() x1        x2   pid     worker_id       message          keys        <num>     <num> <int>        <char>        <char>        <char> 1: -2.928733 11.000181 10052 noncarnivo... Worker has... 320b8551-d... 2: -1.040762  3.139842 10054 entomologi... Worker has... 86a650bb-a..."},{"path":"https://rush.mlr-org.com/dev/articles/error_handling.html","id":"debugging","dir":"Articles","previous_headings":"","what":"Debugging","title":"Error Handling and Debugging","text":"worker loop fails unexpectedly due uncaught error, necessary debug worker loop. Consider following example, worker loop randomly generates error. begin debugging, worker loop executed locally. requires initialization RushWorker instance. Although rush worker typically created worker initialization, can also instantiated manually. worker instance passed argument worker loop. error raised main process, traceback() function can invoked examine stack trace. Breakpoints may also set within worker loop inspect program state. approach provides substantial control debugging process. Certain errors, missing packages undefined global variables, may encountered running locally. However, issues can readily identified using $detect_lost_workers() method. $detect_lost_workers() method can used identify lost workers. Output message logs can written files specifying message_log output_log arguments.","code":"wl_error = function(rush) {    repeat {     x1 = runif(1)     x2 = runif(1)      xss = list(list(x1 = x1, x2 = x2))      key = rush$push_running_tasks(xss = xss)      if (x1 > 0.90) {       stop(\"Unexpected error\")     }      rush$push_results(key, yss = list(list(y = x1 + x2)))   } } rush_worker = RushWorker$new(\"test\", remote = FALSE)  wl_error(rush_worker) Error in wl_error(rush_worker): Unexpected error rush = rsh(\"test-error\")  rush$start_local_workers(   worker_loop = wl_error,   n_workers = 1 ) rush$detect_lost_workers() rush = rsh(\"test-error\")  message_log = tempdir() output_log = tempdir()  worker_ids = rush$start_local_workers(   worker_loop = wl_error,   n_workers = 1,   message_log = message_log,   output_log = output_log )  Sys.sleep(5)  readLines(file.path(message_log, sprintf(\"message_%s.log\", worker_ids[1]))) [1] \"Debug message logging on worker cryptovolcanic_kangaroo started\" [2] \"Error in start_args$worker_loop(rush = rush) : Unexpected error\" [3] \"Calls: <Anonymous> ... <Anonymous> -> eval.parent -> eval -> eval -> <Anonymous>\" [4] \"Execution halted\" readLines(file.path(output_log, sprintf(\"output_%s.log\", worker_ids[1]))) [1] \"[1] \\\"Debug output logging on worker cryptovolcanic_kangaroo started\\\"\""},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"random-search","dir":"Articles","previous_headings":"","what":"Random Search","title":"rush - Asynchronous and Distributed Computing","text":"begin simple random search optimize Branin function parallel. Although random search require communication workers, good way introduce basic ideas behind rush. classic Branin function (also called Branin-Hoo function) well-known benchmark problem global optimization. two-dimensional function non-convex, multimodal, three global minima. function toy example optimization thats fast evaluate simple solved. Branin function usually evaluated domain \\(x_1 \\[-5, 10]\\) \\(x_2 \\[0, 15]\\).  define worker_loop function, runs worker. repeatedly draws tasks, evaluates , sends results Redis database. function takes single argument: RushWorker object, handles communication Redis. example, worker samples random point, creates task, evaluates using Branin function, submits result. optimization stops 100 tasks evaluated. important methods RushWorker $push_running_tasks() $push_results() methods. first method $push_running_tasks() creates new task Redis database. Since evaluated next, task marked running. $push_running_tasks() method returns unique key used identify task. second method $push_results() used push results back Redis database. takes key task list results. mark task running important random search, crucial sophisticated algorithms use tasks workers decide task evaluate next. example, Bayesian optimization algorithms sample next point away previous points explore search space. $n_finished_tasks shows many tasks finished used stop worker loop. Tasks unit workers exchange information. main components task key, computational state, input (xs), result (ys). key unique identifier task. identifies task Redis database. four possible computational states \"running\", \"finished\", \"failed\", \"queued\". $push_running_tasks() method marks \"running\" returns key task. $push_results() method marks task \"finished\" stores result. Failed tasks can marked \"failed\" $push_failed() method. error catching must implemented worker loop (see Error Handling details). Tasks can also pushed queue $push_tasks() method sets state \"queued\". last example gives details task queue different methods push pop tasks. input xs result ys lists can contain arbitrary data. Usually methods RushWorker work multiple tasks , xxs yss lists inputs results. Rush controller responsible starting, observing, stopping workers within network. initialized using rsh() function, requires network ID config argument. config argument configuration file used connect Redis database via redux package. Workers can started using $start_local_workers() method, accepts worker loop number workers arguments. workers started locally processx package also possible start workers remote machine (see Rush Controller). need export branin function workers, set globals argument \"branin\". globals different worker types can found Rush Controller vignette. optimization quickly finished retrieve results. $fetch_finished_tasks() method fetches finished tasks database. method returns data.table() key, input, result. pid worker_id column additional information stored task created. worker_id id worker evaluated task pid process id worker. extra information can passed lists $push_running_tasks() $push_results() methods via extra argument. rush controller displays many workers running many tasks exist state. case, 103 tasks marked finished, workers stopped. number slightly exceeds 100 workers check stopping condition independently. several workers evaluate condition around time — , example, 99 tasks finished — may create new tasks detecting limit reached. Additionally, tasks may continue created 100th task still evaluated. can stop workers reset database $reset() method. learn starting, stopping observing workers, see Rush Controller vignette.","code":"branin = function(x1, x2) {   (x2 - 5.1 / (4 * pi^2) * x1^2 + 5 / pi * x1 - 6)^2 + 10 * (1 - 1 / (8 * pi)) * cos(x1) + 10 } wl_random_search = function(rush) {    while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } } library(rush)  config = redux::redis_config()  rush = rsh(   network = \"test-random-search\",   config = config) rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4,   globals = \"branin\")  rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0 rush$fetch_finished_tasks()[order(y)] x1         x2          y   pid     worker_id          keys            <num>      <num>      <num> <int>        <char>        <char>   1: -2.99758993 10.8615673   1.642256 10244 unfleshly_... 2bfb7fbe-c...   2:  3.21136281  3.4302073   1.882904 10260 authoritat... 33c24b0d-2...   3: -2.90313550 10.3046163   2.642662 10244 unfleshly_... af9f7dba-3...   4: -3.06023456 10.5723062   2.703791 10255 smooth_aou... 51396f45-1...   5:  8.70398943  2.1760046   2.844582 10255 smooth_aou... acf75bbe-8...   6:  9.77055124  1.3517598   3.012110 10270 costeffect... ddf23525-2...   7: -2.34327773  9.6170992   3.973719 10270 costeffect... c890a47c-d...   8:  2.42569305  1.4973363   4.721266 10244 unfleshly_... d215abc6-0...   9: -3.56233302 10.7466504   7.800997 10270 costeffect... 45574004-6...  10: -4.33507339 14.0961912   7.977787 10244 unfleshly_... adb46351-c...  11: -1.67054551  8.3041919   9.555127 10260 authoritat... 9025364b-e...  12:  8.03193136  2.9122611  10.154091 10244 unfleshly_... 4ade38bb-e...  13:  7.75463124  1.6262840  10.992302 10244 unfleshly_... 3caa391c-9...  14:  2.61306900  5.7932066  11.132643 10244 unfleshly_... 5ebd02b1-e...  15:  4.43452742  3.4815766  11.361857 10244 unfleshly_... 42b69a73-3...  16: -3.11849915  8.8079684  12.039471 10255 smooth_aou... bb6558ab-f...  17:  1.68076915  5.6566319  12.814123 10255 smooth_aou... 519daf91-0...  18:  1.74019969  1.4381336  13.148642 10244 unfleshly_... 43f71dee-d...  19:  5.01400446  1.9581673  13.329188 10260 authoritat... 59bfabb2-6...  20: -4.06824899 11.5575955  13.568754 10244 unfleshly_... 66c46598-2...  21: -3.72993896 10.3270643  13.617248 10260 authoritat... a0970204-4...  22:  2.34265435  6.3059378  14.361250 10244 unfleshly_... 01651e96-d...  23:  7.83756264  3.6379760  14.894268 10255 smooth_aou... b00d24fc-5...  24:  5.01563947  2.7255867  14.994284 10244 unfleshly_... b6c4fa97-4...  25:  3.74491815  5.5562898  15.818469 10244 unfleshly_... 149a0700-9...  26:  5.75470473  0.8109837  18.387170 10260 authoritat... 9041af2c-9...  27:  3.80707789  5.8635541  18.851960 10260 authoritat... 275dfb78-d...  28:  0.40717006  4.8526026  19.088309 10255 smooth_aou... e87bb8d5-5...  29:  1.31493654  1.5387991  19.147410 10244 unfleshly_... 4d5d9f5f-1...  30:  5.78656061  1.9939500  19.212839 10270 costeffect... d334989e-0...  31:  5.68875923  2.3255985  19.392360 10244 unfleshly_... 4f31d7c2-a...  32: -0.18575537  6.7000193  19.596866 10244 unfleshly_... 34450680-f...  33:  0.28126608  6.3480693  19.841803 10270 costeffect... 21353aab-5...  34:  0.20858279  4.4938021  20.786033 10244 unfleshly_... 924c0641-f...  35: -0.62579458  5.2435239  21.033483 10244 unfleshly_... 55932e9d-5...  36:  0.80349743  2.6895371  21.139202 10255 smooth_aou... 0354094b-0...  37:  8.48683117  5.9568749  21.621518 10255 smooth_aou... 6ffc1ff2-c...  38: -4.95090340 13.9348176  21.948707 10255 smooth_aou... 32c46eb9-d...  39:  8.30887598  5.9201391  23.636508 10255 smooth_aou... f43cfdd7-0...  40:  6.52097747  3.2139317  23.737957 10260 authoritat... 67a327d3-8...  41:  4.33448630  5.7345096  24.147271 10244 unfleshly_... b8a30f10-7...  42:  4.15667443  6.0301689  24.414965 10255 smooth_aou... 1564fa14-a...  43: -0.83479335 10.3550383  25.068624 10270 costeffect... 02e3c0df-8...  44: -0.07584127  8.6429173  25.932317 10270 costeffect... 8f81502f-9...  45:  5.75941912  3.9318395  26.228245 10270 costeffect... da476632-5...  46: -1.14407797 11.5074725  26.347154 10255 smooth_aou... b5f92097-a...  47: -0.63374656  4.1094099  26.446596 10244 unfleshly_... 216f209a-5...  48: -2.02108889 14.4036766  27.530153 10244 unfleshly_... 432a2de7-7...  49:  3.59989710  7.0739550  27.697825 10255 smooth_aou... 302b824b-5...  50: -1.14592011 11.9920341  29.946943 10244 unfleshly_... a91e18d2-c...  51:  1.52349762  8.4523245  31.404787 10255 smooth_aou... c2fe9378-0...  52:  4.90447039  5.7502575  31.622951 10270 costeffect... 135f85bb-d...  53: -1.26741824  3.7851662  32.577821 10270 costeffect... 598d830c-e...  54:  5.04628828  5.7707021  33.508942 10260 authoritat... 28c480da-4...  55:  1.06365004  8.8364170  33.875301 10255 smooth_aou... 83163eff-6...  56:  0.84319254  9.1466462  35.717886 10255 smooth_aou... fbab2c74-6...  57: -0.85745413  2.9741649  36.402956 10244 unfleshly_... 22372a8b-9...  58: -3.83364463  8.1569290  36.748887 10260 authoritat... 534f5c99-1...  59:  0.06123197  1.6481562  37.688074 10244 unfleshly_... 20be084b-b...  60:  5.94236279  5.4547363  37.977336 10255 smooth_aou... bee13198-9...  61:  9.16167100  8.3718935  38.059048 10270 costeffect... b37902e9-4...  62:  5.59173836  5.7082636  38.268024 10260 authoritat... 189b339c-4...  63: -1.02909817  2.5760465  41.976483 10244 unfleshly_... 0f1b2e8e-4...  64: -2.27399489  3.9716593  43.676684 10244 unfleshly_... e8f7eb22-e...  65: -0.75434159 12.5488184  44.820121 10244 unfleshly_... 350ead4b-a...  66:  5.50837789  6.4505165  44.926091 10244 unfleshly_... da729163-6...  67:  6.14766377  6.1644932  45.182828 10255 smooth_aou... e5ad5c29-f...  68: -0.21389141  0.9709672  48.277816 10255 smooth_aou... 3443249f-a...  69:  7.03239091  6.8440957  48.927871 10260 authoritat... 03a00a35-3...  70: -2.21518671  3.4513049  49.231709 10244 unfleshly_... f687e701-a...  71:  5.52750319  6.8808727  49.834596 10255 smooth_aou... e6fc6558-3...  72:  5.74855949  7.0057085  52.904893 10260 authoritat... 6d5c3a50-b...  73:  9.07076072  9.5659764  55.360467 10260 authoritat... 4828dfd8-a...  74: -3.93765243  6.9232259  57.257969 10255 smooth_aou... 359a24c3-4...  75:  7.40815841  8.2806761  62.880046 10270 costeffect... 0c86c71a-4...  76: -1.20824031  0.7042468  68.273877 10260 authoritat... 25783daa-9...  77:  0.58092173 12.2853501  69.383096 10270 costeffect... 87379441-4...  78:  9.84241527 11.3275492  73.095111 10260 authoritat... 95c31b2b-c...  79:  7.35683395  9.0666640  75.163483 10260 authoritat... 523a1598-4...  80:  4.61784965  9.7737686  79.125449 10260 authoritat... 015698e6-e...  81: -4.08173474  5.9695060  79.664020 10244 unfleshly_... a3860269-b...  82:  0.88474061 12.7114657  80.378430 10244 unfleshly_... 772f41f6-2...  83:  6.00621270  9.3304634  86.958676 10255 smooth_aou... 04ad7dcc-c...  84: -3.22444810  3.0967869  88.381866 10244 unfleshly_... 7523fa13-a...  85: -3.51793187  3.5172088  94.782367 10244 unfleshly_... aba2ccbd-8...  86:  8.47082269 11.4032122  96.900157 10255 smooth_aou... 18cc308b-8...  87:  4.22051214 11.3138159 100.134924 10260 authoritat... 1e373036-a...  88:  4.94330120 10.6893535 100.559093 10255 smooth_aou... d81b5441-e...  89: -4.61828875  6.0979494 109.250009 10244 unfleshly_... e54b55dc-f...  90:  1.96602305 13.7014112 113.034730 10260 authoritat... d3e0f785-3...  91:  6.21921297 10.8468411 114.612773 10244 unfleshly_... 8c7328ee-9...  92:  6.89364923 11.3275863 121.093643 10270 costeffect... cd8b7548-f...  93:  3.75598932 13.2820450 132.968551 10244 unfleshly_... 45acdc2b-a...  94:  9.76138880 14.5258097 139.051764 10255 smooth_aou... 2330b0ce-4...  95: -3.51215324  1.4108276 139.640387 10244 unfleshly_... ee9db236-b...  96:  3.99522662 13.5856517 144.876424 10260 authoritat... c97a8ae1-b...  97: -4.60818890  3.7528216 160.897629 10244 unfleshly_... 770ce8af-4...  98:  8.86024650 14.9768347 169.250062 10260 authoritat... 86472045-a...  99:  4.10053298 14.6967475 174.807842 10270 costeffect... ef27e0f6-a... 100:  8.02731359 14.6688749 180.488352 10270 costeffect... ced976f5-c...               x1         x2          y   pid     worker_id          keys rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 100 * Failed Tasks: 0 rush$reset()  rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"worker-loop","dir":"Articles","previous_headings":"","what":"Worker Loop","title":"rush - Asynchronous and Distributed Computing","text":"define worker_loop function, runs worker. repeatedly draws tasks, evaluates , sends results Redis database. function takes single argument: RushWorker object, handles communication Redis. example, worker samples random point, creates task, evaluates using Branin function, submits result. optimization stops 100 tasks evaluated. important methods RushWorker $push_running_tasks() $push_results() methods. first method $push_running_tasks() creates new task Redis database. Since evaluated next, task marked running. $push_running_tasks() method returns unique key used identify task. second method $push_results() used push results back Redis database. takes key task list results. mark task running important random search, crucial sophisticated algorithms use tasks workers decide task evaluate next. example, Bayesian optimization algorithms sample next point away previous points explore search space. $n_finished_tasks shows many tasks finished used stop worker loop.","code":"wl_random_search = function(rush) {    while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"tasks","dir":"Articles","previous_headings":"","what":"Tasks","title":"rush - Asynchronous and Distributed Computing","text":"Tasks unit workers exchange information. main components task key, computational state, input (xs), result (ys). key unique identifier task. identifies task Redis database. four possible computational states \"running\", \"finished\", \"failed\", \"queued\". $push_running_tasks() method marks \"running\" returns key task. $push_results() method marks task \"finished\" stores result. Failed tasks can marked \"failed\" $push_failed() method. error catching must implemented worker loop (see Error Handling details). Tasks can also pushed queue $push_tasks() method sets state \"queued\". last example gives details task queue different methods push pop tasks. input xs result ys lists can contain arbitrary data. Usually methods RushWorker work multiple tasks , xxs yss lists inputs results.","code":""},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"controller","dir":"Articles","previous_headings":"","what":"Controller","title":"rush - Asynchronous and Distributed Computing","text":"Rush controller responsible starting, observing, stopping workers within network. initialized using rsh() function, requires network ID config argument. config argument configuration file used connect Redis database via redux package. Workers can started using $start_local_workers() method, accepts worker loop number workers arguments. workers started locally processx package also possible start workers remote machine (see Rush Controller). need export branin function workers, set globals argument \"branin\". globals different worker types can found Rush Controller vignette. optimization quickly finished retrieve results. $fetch_finished_tasks() method fetches finished tasks database. method returns data.table() key, input, result. pid worker_id column additional information stored task created. worker_id id worker evaluated task pid process id worker. extra information can passed lists $push_running_tasks() $push_results() methods via extra argument. rush controller displays many workers running many tasks exist state. case, 103 tasks marked finished, workers stopped. number slightly exceeds 100 workers check stopping condition independently. several workers evaluate condition around time — , example, 99 tasks finished — may create new tasks detecting limit reached. Additionally, tasks may continue created 100th task still evaluated. can stop workers reset database $reset() method. learn starting, stopping observing workers, see Rush Controller vignette.","code":"library(rush)  config = redux::redis_config()  rush = rsh(   network = \"test-random-search\",   config = config) rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4,   globals = \"branin\")  rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0 rush$fetch_finished_tasks()[order(y)] x1         x2          y   pid     worker_id          keys            <num>      <num>      <num> <int>        <char>        <char>   1: -2.99758993 10.8615673   1.642256 10244 unfleshly_... 2bfb7fbe-c...   2:  3.21136281  3.4302073   1.882904 10260 authoritat... 33c24b0d-2...   3: -2.90313550 10.3046163   2.642662 10244 unfleshly_... af9f7dba-3...   4: -3.06023456 10.5723062   2.703791 10255 smooth_aou... 51396f45-1...   5:  8.70398943  2.1760046   2.844582 10255 smooth_aou... acf75bbe-8...   6:  9.77055124  1.3517598   3.012110 10270 costeffect... ddf23525-2...   7: -2.34327773  9.6170992   3.973719 10270 costeffect... c890a47c-d...   8:  2.42569305  1.4973363   4.721266 10244 unfleshly_... d215abc6-0...   9: -3.56233302 10.7466504   7.800997 10270 costeffect... 45574004-6...  10: -4.33507339 14.0961912   7.977787 10244 unfleshly_... adb46351-c...  11: -1.67054551  8.3041919   9.555127 10260 authoritat... 9025364b-e...  12:  8.03193136  2.9122611  10.154091 10244 unfleshly_... 4ade38bb-e...  13:  7.75463124  1.6262840  10.992302 10244 unfleshly_... 3caa391c-9...  14:  2.61306900  5.7932066  11.132643 10244 unfleshly_... 5ebd02b1-e...  15:  4.43452742  3.4815766  11.361857 10244 unfleshly_... 42b69a73-3...  16: -3.11849915  8.8079684  12.039471 10255 smooth_aou... bb6558ab-f...  17:  1.68076915  5.6566319  12.814123 10255 smooth_aou... 519daf91-0...  18:  1.74019969  1.4381336  13.148642 10244 unfleshly_... 43f71dee-d...  19:  5.01400446  1.9581673  13.329188 10260 authoritat... 59bfabb2-6...  20: -4.06824899 11.5575955  13.568754 10244 unfleshly_... 66c46598-2...  21: -3.72993896 10.3270643  13.617248 10260 authoritat... a0970204-4...  22:  2.34265435  6.3059378  14.361250 10244 unfleshly_... 01651e96-d...  23:  7.83756264  3.6379760  14.894268 10255 smooth_aou... b00d24fc-5...  24:  5.01563947  2.7255867  14.994284 10244 unfleshly_... b6c4fa97-4...  25:  3.74491815  5.5562898  15.818469 10244 unfleshly_... 149a0700-9...  26:  5.75470473  0.8109837  18.387170 10260 authoritat... 9041af2c-9...  27:  3.80707789  5.8635541  18.851960 10260 authoritat... 275dfb78-d...  28:  0.40717006  4.8526026  19.088309 10255 smooth_aou... e87bb8d5-5...  29:  1.31493654  1.5387991  19.147410 10244 unfleshly_... 4d5d9f5f-1...  30:  5.78656061  1.9939500  19.212839 10270 costeffect... d334989e-0...  31:  5.68875923  2.3255985  19.392360 10244 unfleshly_... 4f31d7c2-a...  32: -0.18575537  6.7000193  19.596866 10244 unfleshly_... 34450680-f...  33:  0.28126608  6.3480693  19.841803 10270 costeffect... 21353aab-5...  34:  0.20858279  4.4938021  20.786033 10244 unfleshly_... 924c0641-f...  35: -0.62579458  5.2435239  21.033483 10244 unfleshly_... 55932e9d-5...  36:  0.80349743  2.6895371  21.139202 10255 smooth_aou... 0354094b-0...  37:  8.48683117  5.9568749  21.621518 10255 smooth_aou... 6ffc1ff2-c...  38: -4.95090340 13.9348176  21.948707 10255 smooth_aou... 32c46eb9-d...  39:  8.30887598  5.9201391  23.636508 10255 smooth_aou... f43cfdd7-0...  40:  6.52097747  3.2139317  23.737957 10260 authoritat... 67a327d3-8...  41:  4.33448630  5.7345096  24.147271 10244 unfleshly_... b8a30f10-7...  42:  4.15667443  6.0301689  24.414965 10255 smooth_aou... 1564fa14-a...  43: -0.83479335 10.3550383  25.068624 10270 costeffect... 02e3c0df-8...  44: -0.07584127  8.6429173  25.932317 10270 costeffect... 8f81502f-9...  45:  5.75941912  3.9318395  26.228245 10270 costeffect... da476632-5...  46: -1.14407797 11.5074725  26.347154 10255 smooth_aou... b5f92097-a...  47: -0.63374656  4.1094099  26.446596 10244 unfleshly_... 216f209a-5...  48: -2.02108889 14.4036766  27.530153 10244 unfleshly_... 432a2de7-7...  49:  3.59989710  7.0739550  27.697825 10255 smooth_aou... 302b824b-5...  50: -1.14592011 11.9920341  29.946943 10244 unfleshly_... a91e18d2-c...  51:  1.52349762  8.4523245  31.404787 10255 smooth_aou... c2fe9378-0...  52:  4.90447039  5.7502575  31.622951 10270 costeffect... 135f85bb-d...  53: -1.26741824  3.7851662  32.577821 10270 costeffect... 598d830c-e...  54:  5.04628828  5.7707021  33.508942 10260 authoritat... 28c480da-4...  55:  1.06365004  8.8364170  33.875301 10255 smooth_aou... 83163eff-6...  56:  0.84319254  9.1466462  35.717886 10255 smooth_aou... fbab2c74-6...  57: -0.85745413  2.9741649  36.402956 10244 unfleshly_... 22372a8b-9...  58: -3.83364463  8.1569290  36.748887 10260 authoritat... 534f5c99-1...  59:  0.06123197  1.6481562  37.688074 10244 unfleshly_... 20be084b-b...  60:  5.94236279  5.4547363  37.977336 10255 smooth_aou... bee13198-9...  61:  9.16167100  8.3718935  38.059048 10270 costeffect... b37902e9-4...  62:  5.59173836  5.7082636  38.268024 10260 authoritat... 189b339c-4...  63: -1.02909817  2.5760465  41.976483 10244 unfleshly_... 0f1b2e8e-4...  64: -2.27399489  3.9716593  43.676684 10244 unfleshly_... e8f7eb22-e...  65: -0.75434159 12.5488184  44.820121 10244 unfleshly_... 350ead4b-a...  66:  5.50837789  6.4505165  44.926091 10244 unfleshly_... da729163-6...  67:  6.14766377  6.1644932  45.182828 10255 smooth_aou... e5ad5c29-f...  68: -0.21389141  0.9709672  48.277816 10255 smooth_aou... 3443249f-a...  69:  7.03239091  6.8440957  48.927871 10260 authoritat... 03a00a35-3...  70: -2.21518671  3.4513049  49.231709 10244 unfleshly_... f687e701-a...  71:  5.52750319  6.8808727  49.834596 10255 smooth_aou... e6fc6558-3...  72:  5.74855949  7.0057085  52.904893 10260 authoritat... 6d5c3a50-b...  73:  9.07076072  9.5659764  55.360467 10260 authoritat... 4828dfd8-a...  74: -3.93765243  6.9232259  57.257969 10255 smooth_aou... 359a24c3-4...  75:  7.40815841  8.2806761  62.880046 10270 costeffect... 0c86c71a-4...  76: -1.20824031  0.7042468  68.273877 10260 authoritat... 25783daa-9...  77:  0.58092173 12.2853501  69.383096 10270 costeffect... 87379441-4...  78:  9.84241527 11.3275492  73.095111 10260 authoritat... 95c31b2b-c...  79:  7.35683395  9.0666640  75.163483 10260 authoritat... 523a1598-4...  80:  4.61784965  9.7737686  79.125449 10260 authoritat... 015698e6-e...  81: -4.08173474  5.9695060  79.664020 10244 unfleshly_... a3860269-b...  82:  0.88474061 12.7114657  80.378430 10244 unfleshly_... 772f41f6-2...  83:  6.00621270  9.3304634  86.958676 10255 smooth_aou... 04ad7dcc-c...  84: -3.22444810  3.0967869  88.381866 10244 unfleshly_... 7523fa13-a...  85: -3.51793187  3.5172088  94.782367 10244 unfleshly_... aba2ccbd-8...  86:  8.47082269 11.4032122  96.900157 10255 smooth_aou... 18cc308b-8...  87:  4.22051214 11.3138159 100.134924 10260 authoritat... 1e373036-a...  88:  4.94330120 10.6893535 100.559093 10255 smooth_aou... d81b5441-e...  89: -4.61828875  6.0979494 109.250009 10244 unfleshly_... e54b55dc-f...  90:  1.96602305 13.7014112 113.034730 10260 authoritat... d3e0f785-3...  91:  6.21921297 10.8468411 114.612773 10244 unfleshly_... 8c7328ee-9...  92:  6.89364923 11.3275863 121.093643 10270 costeffect... cd8b7548-f...  93:  3.75598932 13.2820450 132.968551 10244 unfleshly_... 45acdc2b-a...  94:  9.76138880 14.5258097 139.051764 10255 smooth_aou... 2330b0ce-4...  95: -3.51215324  1.4108276 139.640387 10244 unfleshly_... ee9db236-b...  96:  3.99522662 13.5856517 144.876424 10260 authoritat... c97a8ae1-b...  97: -4.60818890  3.7528216 160.897629 10244 unfleshly_... 770ce8af-4...  98:  8.86024650 14.9768347 169.250062 10260 authoritat... 86472045-a...  99:  4.10053298 14.6967475 174.807842 10270 costeffect... ef27e0f6-a... 100:  8.02731359 14.6688749 180.488352 10270 costeffect... ced976f5-c...               x1         x2          y   pid     worker_id          keys rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 100 * Failed Tasks: 0 rush$reset()  rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"median-stopping","dir":"Articles","previous_headings":"","what":"Median Stopping","title":"rush - Asynchronous and Distributed Computing","text":"Random search simple example doesn’t rely information previous tasks therefore doesn’t require communication workers. Now, let’s implement sophisticated algorithm uses results completed tasks decide whether continue evaluating current one. tune XGBoost model mtcars dataset use median stopping rule stop training early. worker starts sampling random hyperparameter configuration three parameters: maximum tree depth, lambda regularization, alpha regularization. parameters control XGBoost model learns data. worker trains model incrementally, starting 5 boosting rounds adding one round time 20 rounds. round, worker evaluates model’s performance test set using root mean squared error (RMSE). point, worker checks well model compared workers fetching completed results comparing performance median score among models number training rounds. current model performs worse median, worker stops hyperparameter configuration starts new one. early stopping mechanism prevents workers wasting time poor-performing configurations. model performs median, worker continues training one round. process continues network evaluated 1000 complete models across workers. worker loop uses new method called $fetch_finished_tasks() fetch finished tasks database. methods like $fetch_running_tasks() $fetch_failed_tasks() also available. sample training test set mtcars dataset. training set used fit model test set used evaluate model. initialize rush network start workers. time pass training test set workers via globals argument packages argument load data.table xgboost packages. fetch finished tasks sort objective value. stop workers reset database.ch","code":"wl_median_stopping = function(rush) {   while(rush$n_finished_tasks < 1000) {      params = list(       max_depth = sample(1:20, 1),       lambda = runif(1, 0, 1),       alpha = runif(1, 0, 1)     )      model = NULL     for (iteration in seq(5, 20, by = 1)) {        key = rush$push_running_tasks(xss = list(c(params, list(nrounds = iteration))))        model = xgboost(         data = as.matrix(data[training_ids, ]),         label = y[training_ids],         nrounds = if (is.null(model)) 5 else 1,         params = params,         xgb_model = model,         verbose = 0       )        pred = predict(model, as.matrix(data[test_ids, ]))       rmse = sqrt(mean((pred - y[test_ids])^2))        rush$push_results(key, yss = list(list(rmse = rmse)))        tasks = rush$fetch_finished_tasks()       if (rmse > median(tasks[nrounds == iteration, rmse])) break     }   } } data(mtcars)  training_ids = sample(1:nrow(mtcars), 20) test_ids = setdiff(1:nrow(mtcars), training_ids) data = mtcars[, -1] y = mtcars$mpg  config = redux::redis_config()  rush = rsh(   network = \"test-median-stopping\",   config = config)  rush$start_local_workers(   worker_loop = wl_median_stopping,   n_workers = 4,   packages = c(\"data.table\", \"xgboost\"),   globals = c(\"training_ids\", \"test_ids\", \"data\", \"y\")) rush$fetch_finished_tasks()[order(y)] Null data.table (0 rows and 0 cols) rush$reset()"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"worker-loop-1","dir":"Articles","previous_headings":"","what":"Worker Loop","title":"rush - Asynchronous and Distributed Computing","text":"worker starts sampling random hyperparameter configuration three parameters: maximum tree depth, lambda regularization, alpha regularization. parameters control XGBoost model learns data. worker trains model incrementally, starting 5 boosting rounds adding one round time 20 rounds. round, worker evaluates model’s performance test set using root mean squared error (RMSE). point, worker checks well model compared workers fetching completed results comparing performance median score among models number training rounds. current model performs worse median, worker stops hyperparameter configuration starts new one. early stopping mechanism prevents workers wasting time poor-performing configurations. model performs median, worker continues training one round. process continues network evaluated 1000 complete models across workers. worker loop uses new method called $fetch_finished_tasks() fetch finished tasks database. methods like $fetch_running_tasks() $fetch_failed_tasks() also available. sample training test set mtcars dataset. training set used fit model test set used evaluate model. initialize rush network start workers. time pass training test set workers via globals argument packages argument load data.table xgboost packages. fetch finished tasks sort objective value. stop workers reset database.ch","code":"wl_median_stopping = function(rush) {   while(rush$n_finished_tasks < 1000) {      params = list(       max_depth = sample(1:20, 1),       lambda = runif(1, 0, 1),       alpha = runif(1, 0, 1)     )      model = NULL     for (iteration in seq(5, 20, by = 1)) {        key = rush$push_running_tasks(xss = list(c(params, list(nrounds = iteration))))        model = xgboost(         data = as.matrix(data[training_ids, ]),         label = y[training_ids],         nrounds = if (is.null(model)) 5 else 1,         params = params,         xgb_model = model,         verbose = 0       )        pred = predict(model, as.matrix(data[test_ids, ]))       rmse = sqrt(mean((pred - y[test_ids])^2))        rush$push_results(key, yss = list(list(rmse = rmse)))        tasks = rush$fetch_finished_tasks()       if (rmse > median(tasks[nrounds == iteration, rmse])) break     }   } } data(mtcars)  training_ids = sample(1:nrow(mtcars), 20) test_ids = setdiff(1:nrow(mtcars), training_ids) data = mtcars[, -1] y = mtcars$mpg  config = redux::redis_config()  rush = rsh(   network = \"test-median-stopping\",   config = config)  rush$start_local_workers(   worker_loop = wl_median_stopping,   n_workers = 4,   packages = c(\"data.table\", \"xgboost\"),   globals = c(\"training_ids\", \"test_ids\", \"data\", \"y\")) rush$fetch_finished_tasks()[order(y)] Null data.table (0 rows and 0 cols) rush$reset()"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"bayesian-optimization","dir":"Articles","previous_headings":"","what":"Bayesian Optimization","title":"rush - Asynchronous and Distributed Computing","text":"implement Asynchronous Distributed Bayesian Optimization (ADBO) [@egele_2023] next. example shows workers use information running tasks introduces task queues. ADBO runs sequential Bayesian optimization multiple workers parallel. worker maintains surrogate model (random forest) selects next hyperparameter configuration maximizing upper confidence bounds acquisition function. promote varying exploration-exploitation tradeoff workers, acquisition functions initialized different lambda values ranging 0.1 10. worker completes evaluation, asynchronously sends result peers via Redis data base; worker updates local model shared information. decentralized design enables workers proceed independently; eliminating need central coordinator become bottleneck large-scale optimization scenarios. first create new rush network. queue system works pushing popping tasks queue. $push_task() method creates new tasks pushes queue. example, draw initial design 25 points push queue. see 25 queued tasks database. retrieve tasks queue, need implement $pop_task() method worker loop. worker loop pops tasks $pop_task() method queue. task evaluated results pushed back database $push_results() method. tasks queue, $pop_task() method returns NULL worker loop starts Bayesian optimization. First, lambda value acquisition function sampled 0.01 10. running finished tasks fetched database. Using rush$fetch_tasks_with_state() instead using $fetch_running_tasks() $fetch_finished_tasks() important prevents tasks appearing twice. case worker changes state task \"running\" \"finished\" tasks fetched. missing y values running tasks imputed mean finished tasks. surrogate random forest model fitted data acquisition function optimized find next task. Marking task running important Bayesian optimization algorithm, uses already sampled points workers decide task evaluate next. task evaluated results pushed back database. stop optimization process 100 evaluated tasks. start optimization process starting 4 local workers run Bayesian optimization worker loop. optimization quickly finished retrieve results.","code":"config = redux::redis_config()  rush = rsh(   network = \"test-bayesian-optimization\",   config = config) xss = replicate(25, list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15)), simplify = FALSE)  rush$push_tasks(xss = xss)  rush <Rush> * Running Workers: 0 * Queued Tasks: 25 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0 wl_bayesian_optimization = function(rush) {   repeat {     task = rush$pop_task()     if (is.null(task)) break     ys = list(y = branin(task$xs$x1, task$xs$x2))     rush$push_results(task$key, yss = list(ys))   }    lambda = runif(1, 0.01, 10)    while(rush$n_finished_tasks < 100) {      xydt = rush$fetch_tasks_with_state(states = c(\"running\", \"finished\"))     mean_y = mean(xydt$y, na.rm = TRUE)     xydt[\"running\", y := mean_y, on = \"state\"]      surrogate = ranger::ranger(       y ~ x1 + x2,       data = xydt,       num.trees = 100L,       keep.inbag = TRUE)     xdt = data.table::data.table(x1 = runif(1000, -5, 10), x2 = runif(1000, 0, 15))     p = predict(surrogate, xdt, type = \"se\", se.method = \"jack\")     cb = p$predictions - lambda * p$se     xs = as.list(xdt[which.min(cb)])     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } } rush$start_local_workers(   worker_loop = wl_bayesian_optimization,   n_workers = 4,   globals = \"branin\") rush$fetch_finished_tasks()[order(y)] x1         x2          y   pid     worker_id          keys         <num>      <num>      <num> <int>        <char>        <char>  1:  2.812057  3.1173944   1.241019 10546 cookable_b... 4f1dae29-a...  2: -2.872484 12.5045150   1.494983 10546 cookable_b... 2d9d4f3c-9...  3:  2.473399  1.5347349   4.202767 10546 cookable_b... 2911e246-a...  4: -3.953300 12.3197846   7.355557 10544 amoebic_in... 45f0205c-4...  5:  2.220186  5.4652899   9.772860 10556 transplane... c14a7cec-9...  6:  2.259986  0.5852572  10.032791 10546 cookable_b... 8b76a60d-b...  7:  2.663319  6.4966206  16.060735 10546 cookable_b... a857a00b-1...  8:  6.168446  2.5734135  21.715678 10556 transplane... fb9e6a43-e...  9:  5.111175  4.6577223  25.408354 10556 transplane... 4ab293b2-a... 10:  8.450057  6.4072796  26.062408 10546 cookable_b... 2d0abb25-7... 11: -1.864750  4.5052113  31.344095 10556 transplane... e678cf78-4... 12:  6.338527  5.0986465  35.559339 10546 cookable_b... 66a1aef8-5... 13:  5.257668  7.0862045  49.589727 10556 transplane... 1c95572e-2... 14: -2.184817  2.5844216  60.859886 10546 cookable_b... 82be8b27-7... 15: -1.510688  1.0707188  68.769888 10556 transplane... 78c1a22b-2... 16: -1.274992  0.4182323  73.966880 10556 transplane... 8a089436-b... 17:  9.280140 10.9993431  75.210756 10556 transplane... 452213eb-0... 18:  8.195293 11.0633431  95.713866 10544 amoebic_in... d24e53ac-e... 19:  7.563273 10.5393378  97.151516 10556 transplane... 77e69438-0... 20:  7.838009 10.8364741  98.038029 10546 cookable_b... a41f2f27-2... 21:  6.724347 11.0741913 117.387124 10567 tinted_inv... 4fd9c848-1... 22:  2.441226 14.1585809 129.761841 10546 cookable_b... 81d1ef96-8... 23: -4.278977  3.6529052 138.738194 10546 cookable_b... efa6afa3-7... 24: -4.424341  3.4190177 154.926287 10556 transplane... 2baba98c-6... 25:  6.158260 14.4327082 197.340669 10546 cookable_b... eac69e79-4...            x1         x2          y   pid     worker_id          keys"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"queues","dir":"Articles","previous_headings":"","what":"Queues","title":"rush - Asynchronous and Distributed Computing","text":"queue system works pushing popping tasks queue. $push_task() method creates new tasks pushes queue. example, draw initial design 25 points push queue. see 25 queued tasks database. retrieve tasks queue, need implement $pop_task() method worker loop.","code":"xss = replicate(25, list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15)), simplify = FALSE)  rush$push_tasks(xss = xss)  rush <Rush> * Running Workers: 0 * Queued Tasks: 25 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"worker-loop-2","dir":"Articles","previous_headings":"","what":"Worker Loop","title":"rush - Asynchronous and Distributed Computing","text":"worker loop pops tasks $pop_task() method queue. task evaluated results pushed back database $push_results() method. tasks queue, $pop_task() method returns NULL worker loop starts Bayesian optimization. First, lambda value acquisition function sampled 0.01 10. running finished tasks fetched database. Using rush$fetch_tasks_with_state() instead using $fetch_running_tasks() $fetch_finished_tasks() important prevents tasks appearing twice. case worker changes state task \"running\" \"finished\" tasks fetched. missing y values running tasks imputed mean finished tasks. surrogate random forest model fitted data acquisition function optimized find next task. Marking task running important Bayesian optimization algorithm, uses already sampled points workers decide task evaluate next. task evaluated results pushed back database. stop optimization process 100 evaluated tasks. start optimization process starting 4 local workers run Bayesian optimization worker loop. optimization quickly finished retrieve results.","code":"wl_bayesian_optimization = function(rush) {   repeat {     task = rush$pop_task()     if (is.null(task)) break     ys = list(y = branin(task$xs$x1, task$xs$x2))     rush$push_results(task$key, yss = list(ys))   }    lambda = runif(1, 0.01, 10)    while(rush$n_finished_tasks < 100) {      xydt = rush$fetch_tasks_with_state(states = c(\"running\", \"finished\"))     mean_y = mean(xydt$y, na.rm = TRUE)     xydt[\"running\", y := mean_y, on = \"state\"]      surrogate = ranger::ranger(       y ~ x1 + x2,       data = xydt,       num.trees = 100L,       keep.inbag = TRUE)     xdt = data.table::data.table(x1 = runif(1000, -5, 10), x2 = runif(1000, 0, 15))     p = predict(surrogate, xdt, type = \"se\", se.method = \"jack\")     cb = p$predictions - lambda * p$se     xs = as.list(xdt[which.min(cb)])     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } } rush$start_local_workers(   worker_loop = wl_bayesian_optimization,   n_workers = 4,   globals = \"branin\") rush$fetch_finished_tasks()[order(y)] x1         x2          y   pid     worker_id          keys         <num>      <num>      <num> <int>        <char>        <char>  1:  2.812057  3.1173944   1.241019 10546 cookable_b... 4f1dae29-a...  2: -2.872484 12.5045150   1.494983 10546 cookable_b... 2d9d4f3c-9...  3:  2.473399  1.5347349   4.202767 10546 cookable_b... 2911e246-a...  4: -3.953300 12.3197846   7.355557 10544 amoebic_in... 45f0205c-4...  5:  2.220186  5.4652899   9.772860 10556 transplane... c14a7cec-9...  6:  2.259986  0.5852572  10.032791 10546 cookable_b... 8b76a60d-b...  7:  2.663319  6.4966206  16.060735 10546 cookable_b... a857a00b-1...  8:  6.168446  2.5734135  21.715678 10556 transplane... fb9e6a43-e...  9:  5.111175  4.6577223  25.408354 10556 transplane... 4ab293b2-a... 10:  8.450057  6.4072796  26.062408 10546 cookable_b... 2d0abb25-7... 11: -1.864750  4.5052113  31.344095 10556 transplane... e678cf78-4... 12:  6.338527  5.0986465  35.559339 10546 cookable_b... 66a1aef8-5... 13:  5.257668  7.0862045  49.589727 10556 transplane... 1c95572e-2... 14: -2.184817  2.5844216  60.859886 10546 cookable_b... 82be8b27-7... 15: -1.510688  1.0707188  68.769888 10556 transplane... 78c1a22b-2... 16: -1.274992  0.4182323  73.966880 10556 transplane... 8a089436-b... 17:  9.280140 10.9993431  75.210756 10556 transplane... 452213eb-0... 18:  8.195293 11.0633431  95.713866 10544 amoebic_in... d24e53ac-e... 19:  7.563273 10.5393378  97.151516 10556 transplane... 77e69438-0... 20:  7.838009 10.8364741  98.038029 10546 cookable_b... a41f2f27-2... 21:  6.724347 11.0741913 117.387124 10567 tinted_inv... 4fd9c848-1... 22:  2.441226 14.1585809 129.761841 10546 cookable_b... 81d1ef96-8... 23: -4.278977  3.6529052 138.738194 10546 cookable_b... efa6afa3-7... 24: -4.424341  3.4190177 154.926287 10556 transplane... 2baba98c-6... 25:  6.158260 14.4327082 197.340669 10546 cookable_b... eac69e79-4...            x1         x2          y   pid     worker_id          keys"},{"path":"https://rush.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Maintainer, author, copyright holder.","code":""},{"path":"https://rush.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M (2025). rush: Rapid Asynchronous Distributed Computing. R package version 0.2.0.9000, https://rush.mlr-org.com.","code":"@Manual{,   title = {rush: Rapid Asynchronous and Distributed Computing},   author = {Marc Becker},   year = {2025},   note = {R package version 0.2.0.9000},   url = {https://rush.mlr-org.com}, }"},{"path":"https://rush.mlr-org.com/dev/index.html","id":"rush","dir":"","previous_headings":"","what":"Rapid Asynchronous and Distributed Computing","title":"Rapid Asynchronous and Distributed Computing","text":"Package website: release | dev rush package designed solve large-scale problems asynchronously across distributed network. Employing database centric model, rush enables workers communicate tasks results shared Redis database. Key features include low task overhead, efficient caching, robust error handling. package powers asynchronous optimization algorithms bbotk mlr3tuning packages.","code":""},{"path":"https://rush.mlr-org.com/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Rapid Asynchronous and Distributed Computing","text":"Database centric model robust scalability. Efficient communication workers usingRedis. Maintains low overhead, limiting delays just millisecond per task. Reduces read/write operations lightweight efficient caching system. Offers centralized system features, task queues. Provides fast data transformation Redis data.table. Simplifies local worker setup processx. Enables scaling large remote worker networks via mirai package. Automatically detects recovers worker failures high reliability. Logs worker messages directly Redis database using lgr. Designed minimal dependencies lightweight integration.","code":""},{"path":"https://rush.mlr-org.com/dev/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Rapid Asynchronous and Distributed Computing","text":"Install latest release CRAN. Install development version GitHub. install Redis.","code":"install.packages(\"rush\") pak::pak(\"mlr-org/rush\")"},{"path":"https://rush.mlr-org.com/dev/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related Work","title":"Rapid Asynchronous and Distributed Computing","text":"rrq package task queue system R using Redis. future package provides simple uniform way evaluating R expressions asynchronously across range backends. batchtools package execution long-running tasks high-performance computing clusters. mirai package evaluates R expression asynchronously parallel process, locally distributed network.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":null,"dir":"Reference","previous_headings":"","what":"Log to Redis Database — AppenderRedis","title":"Log to Redis Database — AppenderRedis","text":"AppenderRedis writes log messages Redis data base. lgr::Appender created internally RushWorker logger thresholds passed via rush_plan().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log to Redis Database — AppenderRedis","text":"Object class R6::R6Class AppenderRedis methods writing log events Redis data bases.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to Redis Database — AppenderRedis","text":"lgr::Filterable -> lgr::Appender -> lgr::AppenderMemory -> AppenderRedis","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to Redis Database — AppenderRedis","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$set_layout() lgr::Appender$set_threshold() lgr::AppenderMemory$append() lgr::AppenderMemory$clear() lgr::AppenderMemory$format() lgr::AppenderMemory$set_buffer_size() lgr::AppenderMemory$set_flush_on_exit() lgr::AppenderMemory$set_flush_on_rotate() lgr::AppenderMemory$set_flush_threshold() lgr::AppenderMemory$set_should_flush() lgr::AppenderMemory$show()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to Redis Database — AppenderRedis","text":"AppenderRedis$new() AppenderRedis$flush()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Log to Redis Database — AppenderRedis","text":"Creates new instance R6 class.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to Redis Database — AppenderRedis","text":"","code":"AppenderRedis$new(   config,   key,   threshold = NA_integer_,   layout = lgr::LayoutJson$new(timestamp_fmt = \"%Y-%m-%d %H:%M:%OS3\"),   buffer_size = 0,   flush_threshold = \"error\",   flush_on_exit = TRUE,   flush_on_rotate = TRUE,   should_flush = NULL,   filters = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to Redis Database — AppenderRedis","text":"config (redux::redis_config) Redis configuration options. key (character(1)) Key list holding log messages Redis data store. threshold (integer(1) | character(1)) Threshold log messages. layout (lgr::Layout) Layout log messages. buffer_size (integer(1)) Size buffer. flush_threshold (character(1)) Threshold flushing buffer. flush_on_exit (logical(1)) Flush buffer exit. flush_on_rotate (logical(1)) Flush buffer rotate. should_flush (function) Function determines buffer flushed. filters (list) List filters.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"method-flush-","dir":"Reference","previous_headings":"","what":"Method flush()","title":"Log to Redis Database — AppenderRedis","text":"Sends buffer's contents Redis data store, clears buffer.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to Redis Database — AppenderRedis","text":"","code":"AppenderRedis$flush()"},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log to Redis Database — AppenderRedis","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()     rush_plan(      config = config_local,      n_workers = 2,      lgr_thresholds = c(rush = \"info\"))     rush = rsh(network_id = \"test_network\")    rush #> <Rush> #> * Running Workers: 0 #> * Queued Tasks: 0 #> * Queued Priority Tasks: 0 #> * Running Tasks: 0 #> * Finished Tasks: 0 #> * Failed Tasks: 0 # }"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":null,"dir":"Reference","previous_headings":"","what":"Rush Controller — Rush","title":"Rush Controller — Rush","text":"Rush controller manages workers rush network.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rush Controller — Rush","text":"Object class R6::R6Class Rush controller methods.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"local-workers","dir":"Reference","previous_headings":"","what":"Local Workers","title":"Rush Controller — Rush","text":"local worker runs machine controller. Local workers spawned `$start_local_workers() method via processx package.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"remote-workers","dir":"Reference","previous_headings":"","what":"Remote Workers","title":"Rush Controller — Rush","text":"remote worker runs different machine controller. Remote workers spawned `$start_remote_workers() method via mirai package.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"script-workers","dir":"Reference","previous_headings":"","what":"Script Workers","title":"Rush Controller — Rush","text":"Workers can started script anywhere. requirement worker can connect Redis database. script created $worker_script() method.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Rush Controller — Rush","text":"network_id (character(1)) Identifier rush network. config (redux::redis_config) Redis configuration options. connector (redux::redis_api) Returns connection Redis. processes_processx (processx::process) List processes started $start_local_workers(). processes_mirai (mirai::mirai) List mirai processes started $start_remote_workers().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Rush Controller — Rush","text":"n_workers (integer(1)) Number workers. n_running_workers (integer(1)) Number running workers. n_terminated_workers (integer(1)) Number terminated workers. n_killed_workers (integer(1)) Number killed workers. n_lost_workers (integer(1)) Number lost workers. Run $detect_lost_workers() update number lost workers. n_pre_workers (integer(1)) Number workers yet completely started. worker_ids (character()) Ids workers. running_worker_ids (character()) Ids running workers. terminated_worker_ids (character()) Ids terminated workers. killed_worker_ids (character()) Ids killed workers. lost_worker_ids (character()) Ids lost workers. pre_worker_ids (character()) Ids workers yet completely started. tasks (character()) Keys tasks. queued_tasks (character()) Keys queued tasks. running_tasks (character()) Keys running tasks. finished_tasks (character()) Keys finished tasks. failed_tasks (character()) Keys failed tasks. n_queued_tasks (integer(1)) Number queued tasks. n_queued_priority_tasks (integer(1)) Number queued priority tasks. n_running_tasks (integer(1)) Number running tasks. n_finished_tasks (integer(1)) Number finished tasks. n_failed_tasks (integer(1)) Number failed tasks. n_tasks (integer(1)) Number tasks. worker_info (data.table::data.table()) Contains information workers. worker_states (data.table::data.table()) Contains states workers. all_workers_terminated (logical(1)) Whether workers terminated. all_workers_lost (logical(1)) Whether workers lost. Runs $detect_lost_workers() detect lost workers. priority_info (data.table::data.table) Contains number tasks priority queues. snapshot_schedule (character()) Set snapshot schedule periodically save data base disk. example, c(60, 1000) saves data base every 60 seconds least 1000 changes. Overwrites redis configuration file. Set NULL disable snapshots. details see redis.io. redis_info (list()) Information Redis server.","code":""},{"path":[]},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Rush Controller — Rush","text":"Rush$new() Rush$format() Rush$print() Rush$reconnect() Rush$start_local_workers() Rush$start_remote_workers() Rush$worker_script() Rush$restart_workers() Rush$wait_for_workers() Rush$stop_workers() Rush$detect_lost_workers() Rush$reset() Rush$read_log() Rush$print_log() Rush$push_tasks() Rush$push_priority_tasks() Rush$push_failed() Rush$fetch_queued_tasks() Rush$fetch_priority_tasks() Rush$fetch_running_tasks() Rush$fetch_finished_tasks() Rush$wait_for_finished_tasks() Rush$fetch_new_tasks() Rush$wait_for_new_tasks() Rush$fetch_failed_tasks() Rush$fetch_tasks() Rush$fetch_tasks_with_state() Rush$wait_for_tasks() Rush$write_hashes() Rush$read_hashes() Rush$read_hash() Rush$is_running_task() Rush$is_failed_task() Rush$tasks_with_state() Rush$clone()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Rush Controller — Rush","text":"Creates new instance R6 class.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$new(network_id = NULL, config = NULL, seed = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (redux::redis_config) Redis configuration options. NULL, configuration set rush_plan() used. rush_plan() called, REDIS_URL environment variable parsed. REDIS_URL set, default configuration used. See redux::redis_config details. seed (integer()) Initial seed random number generator. Either L'Ecuyer-CMRG seed (integer(7)) regular RNG seed (integer(1)). later converted L'Ecuyer-CMRG seed. NULL, seed used random number generator.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Rush Controller — Rush","text":"Helper print outputs.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$format(...)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"... (ignored).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Rush Controller — Rush","text":"Print method.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$print()"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-reconnect-","dir":"Reference","previous_headings":"","what":"Method reconnect()","title":"Rush Controller — Rush","text":"Reconnect Redis. connection breaks Rush object saved disk. Call method reconnect loading object.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$reconnect()"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-start-local-workers-","dir":"Reference","previous_headings":"","what":"Method start_local_workers()","title":"Rush Controller — Rush","text":"Start workers locally processx. processx::process stored $processes_processx. Alternatively, use $start_remote_workers() start workers remote machines mirai. Parameters set rush_plan() precedence parameters set .","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$start_local_workers(   worker_loop = NULL,   ...,   n_workers = 1,   globals = NULL,   packages = NULL,   lgr_thresholds = NULL,   lgr_buffer_size = NULL,   supervise = TRUE,   message_log = NULL,   output_log = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_loop (function) Loop run workers. ... () Arguments passed worker_loop. n_workers (integer(1)) Number workers started. Default 1. globals (character()) Global variables loaded workers global environment. packages (character()) Packages loaded workers. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. supervise (logical(1)) Whether kill workers main R process shut . message_log (character(1)) Path message log files e.g. /tmp/message_logs/ message log files named message_<worker_id>.log. NULL, messages, warnings errors stored. output_log (character(1)) Path output log files e.g. /tmp/output_logs/ output log files named output_<worker_id>.log. NULL, output stored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-start-remote-workers-","dir":"Reference","previous_headings":"","what":"Method start_remote_workers()","title":"Rush Controller — Rush","text":"Start workers remote machines mirai. mirai::mirai stored $processes_mirai. Parameters set rush_plan() precedence parameters set .","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$start_remote_workers(   worker_loop,   ...,   n_workers = 1,   globals = NULL,   packages = NULL,   lgr_thresholds = NULL,   lgr_buffer_size = NULL,   message_log = NULL,   output_log = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_loop (function) Loop run workers. ... () Arguments passed worker_loop. n_workers (integer(1)) Number workers started. Default 1. globals (character()) Global variables loaded workers global environment. packages (character()) Packages loaded workers. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. message_log (character(1)) Path message log files e.g. /tmp/message_logs/ message log files named message_<worker_id>.log. NULL, messages, warnings errors stored. output_log (character(1)) Path output log files e.g. /tmp/output_logs/ output log files named output_<worker_id>.log. NULL, output stored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-worker-script-","dir":"Reference","previous_headings":"","what":"Method worker_script()","title":"Rush Controller — Rush","text":"Generate script start workers.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$worker_script(   worker_loop,   ...,   globals = NULL,   packages = NULL,   lgr_thresholds = NULL,   lgr_buffer_size = NULL,   heartbeat_period = NULL,   heartbeat_expire = NULL,   message_log = NULL,   output_log = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_loop (function) Loop run workers. ... () Arguments passed worker_loop. globals (character()) Global variables loaded workers global environment. packages (character()) Packages loaded workers. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. heartbeat_period (integer(1)) Period heartbeat seconds. heartbeat updated every heartbeat_period seconds. heartbeat_expire (integer(1)) Time live heartbeat seconds. heartbeat key set expire heartbeat_expire seconds. message_log (character(1)) Path message log files e.g. /tmp/message_logs/ message log files named message_<worker_id>.log. NULL, messages, warnings errors stored. output_log (character(1)) Path output log files e.g. /tmp/output_logs/ output log files named output_<worker_id>.log. NULL, output stored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-restart-workers-","dir":"Reference","previous_headings":"","what":"Method restart_workers()","title":"Rush Controller — Rush","text":"Restart workers. worker still running, killed restarted.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$restart_workers(worker_ids, supervise = TRUE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_ids (character()) Worker ids restarted. supervise (logical(1)) Whether kill workers main R process shut .","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-wait-for-workers-","dir":"Reference","previous_headings":"","what":"Method wait_for_workers()","title":"Rush Controller — Rush","text":"Wait n workers available.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$wait_for_workers(n, timeout = Inf)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"n (integer(1)) Number workers wait . timeout (numeric(1)) Timeout seconds. Default Inf.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-stop-workers-","dir":"Reference","previous_headings":"","what":"Method stop_workers()","title":"Rush Controller — Rush","text":"Stop workers.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$stop_workers(type = \"kill\", worker_ids = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"type (character(1)) Type stopping. Either \"terminate\" \"kill\". \"kill\" workers stopped immediately. \"terminate\" workers evaluate currently running task terminate. \"terminate\" option must implemented worker loop. worker_ids (character()) Worker ids stopped. Remote workers must killed together. NULL workers stopped.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-detect-lost-workers-","dir":"Reference","previous_headings":"","what":"Method detect_lost_workers()","title":"Rush Controller — Rush","text":"Detect lost workers. state worker changed \"lost\".","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$detect_lost_workers(restart_local_workers = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"restart_local_workers (logical(1)) Whether restart lost workers. Ignored remote workers.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Rush Controller — Rush","text":"Stop workers delete data stored redis.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$reset(type = \"kill\")"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"type (character(1)) Type stopping. Either \"terminate\" \"kill\". \"terminate\" workers evaluate currently running task terminate. \"kill\" workers stopped immediately.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-read-log-","dir":"Reference","previous_headings":"","what":"Method read_log()","title":"Rush Controller — Rush","text":"Read log messages written lgr package worker.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$read_log(worker_ids = NULL, time_difference = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_ids (character(1)) Worker ids. NULL worker ids used. time_difference (logical(1)) Whether calculate time difference log messages.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(data.table::data.table()) level, timestamp, logger, caller message, optionally time difference.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-print-log-","dir":"Reference","previous_headings":"","what":"Method print_log()","title":"Rush Controller — Rush","text":"Print log messages written lgr package worker.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$print_log()"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-push-tasks-","dir":"Reference","previous_headings":"","what":"Method push_tasks()","title":"Rush Controller — Rush","text":"Pushes task queue. Task added queued tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$push_tasks(   xss,   extra = NULL,   seeds = NULL,   timeouts = NULL,   max_retries = NULL,   terminate_workers = FALSE )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"xss (list named list()) Lists arguments function e.g. list(list(x1, x2), list(x1, x2))). extra (list()) List additional information stored along task e.g. list(list(timestamp), list(timestamp))). seeds (list()) List L'Ecuyer-CMRG seeds task e.g list(list(c(104071, 490840688, 1690070564, -495119766, 503491950, 1801530932, -1629447803))). NULL initial seed set, L'Ecuyer-CMRG seeds generated initial seed. NULL initial seed set, seeds used random number generator. timeouts (integer()) Timeouts task seconds e.g. c(10, 15). single number used timeout tasks. NULL timeout set. max_retries (integer()) Number retries task. single number used number retries tasks. NULL tasks retried. terminate_workers (logical(1)) Whether stop workers evaluating tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-push-priority-tasks-","dir":"Reference","previous_headings":"","what":"Method push_priority_tasks()","title":"Rush Controller — Rush","text":"Pushes task queue specific worker. Task added queued priority tasks. worker evaluates tasks priority queue shared queue. priority NA task added shared queue. worker lost worker id known, task added shared queue.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$push_priority_tasks(xss, extra = NULL, priority = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"xss (list named list()) Lists arguments function e.g. list(list(x1, x2), list(x1, x2))). extra (list) List additional information stored along task e.g. list(list(timestamp), list(timestamp))). priority (character()) Worker ids tasks pushed.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-push-failed-","dir":"Reference","previous_headings":"","what":"Method push_failed()","title":"Rush Controller — Rush","text":"Pushes failed tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$push_failed(keys, conditions)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character(1)) Keys associated tasks. conditions (named list()) List lists conditions.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-queued-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_queued_tasks()","title":"Rush Controller — Rush","text":"Fetch queued tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_queued_tasks(   fields = c(\"xs\", \"xs_extra\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\"). data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table queued tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-priority-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_priority_tasks()","title":"Rush Controller — Rush","text":"Fetch queued priority tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_priority_tasks(   fields = c(\"xs\", \"xs_extra\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\"). data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table queued priority tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-running-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_running_tasks()","title":"Rush Controller — Rush","text":"Fetch running tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_running_tasks(   fields = c(\"xs\", \"xs_extra\", \"worker_extra\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\"). data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table running tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-finished-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_finished_tasks()","title":"Rush Controller — Rush","text":"Fetch finished tasks data base. Finished tasks cached.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_finished_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   reset_cache = FALSE,   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"ys\", \"ys_extra\"). reset_cache (logical(1)) Whether reset cache. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table finished tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-wait-for-finished-tasks-","dir":"Reference","previous_headings":"","what":"Method wait_for_finished_tasks()","title":"Rush Controller — Rush","text":"Block process new finished task available. Returns finished tasks NULL new task available timeout seconds.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$wait_for_finished_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\"),   timeout = Inf,   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"ys\", \"ys_extra\"). timeout (numeric(1)) Time wait result seconds. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table finished tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-new-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_new_tasks()","title":"Rush Controller — Rush","text":"Fetch finished tasks data base finished last fetch. Updates cache finished tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_new_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Latest results.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-wait-for-new-tasks-","dir":"Reference","previous_headings":"","what":"Method wait_for_new_tasks()","title":"Rush Controller — Rush","text":"Block process new finished task available. Returns new tasks NULL new task available timeout seconds.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$wait_for_new_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   timeout = Inf,   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"ys\", \"ys_extra\"). timeout (numeric(1)) Time wait new result seconds. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() | list().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-failed-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_failed_tasks()","title":"Rush Controller — Rush","text":"Fetch failed tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_failed_tasks(   fields = c(\"xs\", \"worker_extra\", \"condition\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"condition\". data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table failed tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_tasks()","title":"Rush Controller — Rush","text":"Fetch tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"ys\", \"ys_extra\", \"condition\", \"state\"). data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-tasks-with-state-","dir":"Reference","previous_headings":"","what":"Method fetch_tasks_with_state()","title":"Rush Controller — Rush","text":"Fetch tasks different states data base. tasks different states queried time, function prevents tasks appearing twice. case worker changes state task tasks fetched. Finished tasks cached.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_tasks_with_state(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   states = c(\"queued\", \"running\", \"finished\", \"failed\"),   reset_cache = FALSE,   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\"). states (character()) States tasks fetched. Defaults c(\"queued\", \"running\", \"finished\", \"failed\"). reset_cache (logical(1)) Whether reset cache finished tasks. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-wait-for-tasks-","dir":"Reference","previous_headings":"","what":"Method wait_for_tasks()","title":"Rush Controller — Rush","text":"Wait tasks finished. function also unblocks worker running tasks failed.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$wait_for_tasks(keys, detect_lost_workers = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character()) Keys tasks wait . detect_lost_workers (logical(1)) Whether detect failed tasks. Comes overhead.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-write-hashes-","dir":"Reference","previous_headings":"","what":"Method write_hashes()","title":"Rush Controller — Rush","text":"Writes R objects Redis hashes. function takes vectors ... input writes element field-value pair new hash. name argument defines field serialized element written. example, xs = list(list(x1 = 1, x2 = 2), list(x1 = 3, x2 = 4)) writes serialize(list(x1 = 1, x2 = 2)) field xs hash serialize(list(x1 = 3, x2 = 4)) field xs another hash. function can iterate multiple vectors simultaneously. example, xs = list(list(x1 = 1, x2 = 2), list(x1 = 3, x2 = 4)), ys = list(list(y = 3), list(y = 7)) creates two hashes fields xs ys. vectors recycled length longest vector. lists atomic vectors supported. Arguments NULL ignored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$write_hashes(..., .values = list(), keys = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"... (named list()) Lists written hashes. names arguments used fields. .values (named list()) Lists written hashes. names list used fields. keys (character()) Keys hashes. NULL new keys generated.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()) Keys hashes.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-read-hashes-","dir":"Reference","previous_headings":"","what":"Method read_hashes()","title":"Rush Controller — Rush","text":"Reads R Objects Redis hashes. function reads field-value pairs hashes stored keys. values hash deserialized combined list. flatten TRUE, values flattened single list e.g. list(xs = list(x1 = 1, x2 = 2), ys = list(y = 3)) becomes list(x1 = 1, x2 = 2, y = 3). reading functions combine hashes table names inner lists column names. example, xs = list(list(x1 = 1, x2 = 2), list(x1 = 3, x2 = 4)), ys = list(list(y = 3), list(y = 7)) becomes data.table(x1 = c(1, 3), x2 = c(2, 4), y = c(3, 7)).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$read_hashes(keys, fields, flatten = TRUE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character()) Keys hashes. fields (character()) Fields read hashes. flatten (logical(1)) Whether flatten list.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(list list()) outer list contains one element key. inner list combination lists stored different fields.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-read-hash-","dir":"Reference","previous_headings":"","what":"Method read_hash()","title":"Rush Controller — Rush","text":"Reads single Redis hash returns values list named fields.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$read_hash(key, fields)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"key (character(1)) Key hash. fields (character()) Fields read hash.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(list list()) outer list contains one element key. inner list combination lists stored different fields.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-is-running-task-","dir":"Reference","previous_headings":"","what":"Method is_running_task()","title":"Rush Controller — Rush","text":"Checks whether tasks status \"running\".","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$is_running_task(keys)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-is-failed-task-","dir":"Reference","previous_headings":"","what":"Method is_failed_task()","title":"Rush Controller — Rush","text":"Checks whether tasks status \"failed\".","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$is_failed_task(keys)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-29","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-tasks-with-state-","dir":"Reference","previous_headings":"","what":"Method tasks_with_state()","title":"Rush Controller — Rush","text":"Returns keys requested states.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$tasks_with_state(states)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-30","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"states (character()) States tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(Named list character()).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Rush Controller — Rush","text":"objects class cloneable method.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$clone(deep = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-31","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"deep Whether make deep clone.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rush Controller — Rush","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()    rush = rsh(network_id = \"test_network\", config = config_local)    rush #> <Rush> #> * Running Workers: 0 #> * Queued Tasks: 0 #> * Queued Priority Tasks: 0 #> * Running Tasks: 0 #> * Finished Tasks: 0 #> * Failed Tasks: 0 # }"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":null,"dir":"Reference","previous_headings":"","what":"Rush Worker — RushWorker","title":"Rush Worker — RushWorker","text":"RushWorker evaluates tasks writes results data base. worker inherits Rush.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rush Worker — RushWorker","text":"Object class R6::R6Class RushWorker worker methods.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rush Worker — RushWorker","text":"worker registers data base rush network.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Rush Worker — RushWorker","text":"rush::Rush -> RushWorker","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Rush Worker — RushWorker","text":"worker_id (character(1)) Identifier worker. remote (logical(1)) Whether worker remote machine. heartbeat (callr::r_bg) Background process heartbeat.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Rush Worker — RushWorker","text":"terminated (logical(1)) Whether shutdown worker. Used worker loop determine whether continue. terminated_on_idle (logical(1)) Whether shutdown worker tasks queued. Used worker loop determine whether continue.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Rush Worker — RushWorker","text":"rush::Rush$detect_lost_workers() rush::Rush$fetch_failed_tasks() rush::Rush$fetch_finished_tasks() rush::Rush$fetch_new_tasks() rush::Rush$fetch_priority_tasks() rush::Rush$fetch_queued_tasks() rush::Rush$fetch_running_tasks() rush::Rush$fetch_tasks() rush::Rush$fetch_tasks_with_state() rush::Rush$format() rush::Rush$is_failed_task() rush::Rush$is_running_task() rush::Rush$print() rush::Rush$print_log() rush::Rush$push_failed() rush::Rush$push_priority_tasks() rush::Rush$push_tasks() rush::Rush$read_hash() rush::Rush$read_hashes() rush::Rush$read_log() rush::Rush$reconnect() rush::Rush$reset() rush::Rush$restart_workers() rush::Rush$start_local_workers() rush::Rush$start_remote_workers() rush::Rush$stop_workers() rush::Rush$tasks_with_state() rush::Rush$wait_for_finished_tasks() rush::Rush$wait_for_new_tasks() rush::Rush$wait_for_tasks() rush::Rush$wait_for_workers() rush::Rush$worker_script() rush::Rush$write_hashes()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Rush Worker — RushWorker","text":"RushWorker$new() RushWorker$push_running_tasks() RushWorker$pop_task() RushWorker$push_results() RushWorker$set_terminated() RushWorker$clone()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Rush Worker — RushWorker","text":"Creates new instance R6 class.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$new(   network_id,   config = NULL,   remote,   worker_id = NULL,   heartbeat_period = NULL,   heartbeat_expire = NULL,   seed = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (redux::redis_config) Redis configuration options. NULL, configuration set rush_plan() used. rush_plan() called, REDIS_URL environment variable parsed. REDIS_URL set, default configuration used. See redux::redis_config details. remote (logical(1)) Whether worker started remote machine. See Rush details. worker_id (character(1)) Identifier worker. Keys redis specific worker prefixed worker id. heartbeat_period (integer(1)) Period heartbeat seconds. heartbeat updated every heartbeat_period seconds. heartbeat_expire (integer(1)) Time live heartbeat seconds. heartbeat key set expire heartbeat_expire seconds. seed (integer()) Initial seed random number generator. Either L'Ecuyer-CMRG seed (integer(7)) regular RNG seed (integer(1)). later converted L'Ecuyer-CMRG seed. NULL, seed used random number generator.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-push-running-tasks-","dir":"Reference","previous_headings":"","what":"Method push_running_tasks()","title":"Rush Worker — RushWorker","text":"Push task running tasks without queue.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$push_running_tasks(xss, extra = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"xss (list named list()) Lists arguments function e.g. list(list(x1, x2), list(x1, x2))). extra (list) List additional information stored along task e.g. list(list(timestamp), list(timestamp))).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Worker — RushWorker","text":"(character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-pop-task-","dir":"Reference","previous_headings":"","what":"Method pop_task()","title":"Rush Worker — RushWorker","text":"Pop task queue. Task moved running tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$pop_task(timeout = 1, fields = \"xs\")"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"timeout (numeric(1)) Time wait task seconds. fields (character()) Fields returned.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-push-results-","dir":"Reference","previous_headings":"","what":"Method push_results()","title":"Rush Worker — RushWorker","text":"Pushes results data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$push_results(keys, yss, extra = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"keys (character(1)) Keys associated tasks. yss (named list()) List lists named results. extra (named list()) List lists additional information stored along results.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-set-terminated-","dir":"Reference","previous_headings":"","what":"Method set_terminated()","title":"Rush Worker — RushWorker","text":"Mark worker terminated. Last step worker loop worker terminates.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$set_terminated()"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Rush Worker — RushWorker","text":"objects class cloneable method.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$clone(deep = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"deep Whether make deep clone.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/filter_custom_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Custom Fields — filter_custom_fields","title":"Filter Custom Fields — filter_custom_fields","text":"Filters custom fields log events.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/filter_custom_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Custom Fields — filter_custom_fields","text":"","code":"filter_custom_fields(event)"},{"path":"https://rush.mlr-org.com/dev/reference/filter_custom_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Custom Fields — filter_custom_fields","text":"event (lgr::LogEvent) Log event.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/get_hostname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the computer name of the current host — get_hostname","title":"Get the computer name of the current host — get_hostname","text":"Returns computer name current host. First tries get computer name environment variables HOST, HOSTNAME COMPUTERNAME. fails tries get computer name function Sys.info(). Finally, fails queries computer name command uname -n. Copied R.utils package.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/get_hostname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the computer name of the current host — get_hostname","text":"","code":"get_hostname()"},{"path":"https://rush.mlr-org.com/dev/reference/get_hostname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the computer name of the current host — get_hostname","text":"character(1) hostname.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/get_hostname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the computer name of the current host — get_hostname","text":"","code":"get_hostname() #>          nodename  #> \"pkrvmjbmru5nbw0\""},{"path":"https://rush.mlr-org.com/dev/reference/heartbeat.html","id":null,"dir":"Reference","previous_headings":"","what":"Heartbeat Loop — heartbeat","title":"Heartbeat Loop — heartbeat","text":"heartbeat loop updates heartbeat key worker still alive. kill key set, worker killed. function called callr session.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/heartbeat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heartbeat Loop — heartbeat","text":"","code":"heartbeat(   network_id,   config,   worker_id,   heartbeat_key,   heartbeat_period,   heartbeat_expire,   pid )"},{"path":"https://rush.mlr-org.com/dev/reference/heartbeat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heartbeat Loop — heartbeat","text":"network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (redux::redis_config) Redis configuration options. worker_id (character(1)) Identifier worker. Keys redis specific worker prefixed worker id. heartbeat_key (character(1)) Heartbeat key. heartbeat_period (integer(1)) Period heartbeat seconds. heartbeat updated every heartbeat_period seconds. heartbeat_expire (integer(1)) Time live heartbeat seconds. heartbeat key set expire heartbeat_expire seconds. pid (integer(1)) Process ID worker.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/heartbeat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heartbeat Loop — heartbeat","text":"NULL","code":""},{"path":"https://rush.mlr-org.com/dev/reference/remove_rush_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Rush Plan — remove_rush_plan","title":"Remove Rush Plan — remove_rush_plan","text":"Removes rush plan set rush_plan().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/remove_rush_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Rush Plan — remove_rush_plan","text":"","code":"remove_rush_plan()"},{"path":"https://rush.mlr-org.com/dev/reference/remove_rush_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Rush Plan — remove_rush_plan","text":"Invisible TRUE. Function called side effects.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/remove_rush_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Rush Plan — remove_rush_plan","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{   config_local = redux::redis_config()   rush_plan(config = config_local, n_workers = 2)   remove_rush_plan() # }"},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":null,"dir":"Reference","previous_headings":"","what":"Synctatic Sugar for Rush Controller Construction — rsh","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"Function construct Rush controller.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"","code":"rsh(network_id = NULL, config = NULL, seed = NULL, ...)"},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (redux::redis_config) Redis configuration options. NULL, configuration set rush_plan() used. rush_plan() called, REDIS_URL environment variable parsed. REDIS_URL set, default configuration used. See redux::redis_config details. seed (integer()) Initial seed random number generator. Either L'Ecuyer-CMRG seed (integer(7)) regular RNG seed (integer(1)). later converted L'Ecuyer-CMRG seed. NULL, seed used random number generator. ... (ignored).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"Rush controller.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()    rush = rsh(network_id = \"test_network\", config = config_local)    rush #> <Rush> #> * Running Workers: 0 #> * Queued Tasks: 0 #> * Queued Priority Tasks: 0 #> * Running Tasks: 0 #> * Finished Tasks: 0 #> * Failed Tasks: 0 # }"},{"path":"https://rush.mlr-org.com/dev/reference/rush-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rush: Rapid Asynchronous and Distributed Computing — rush-package","title":"rush: Rapid Asynchronous and Distributed Computing — rush-package","text":"Package tackle large-scale problems asynchronously across distributed network. Employing database centric model, rush enables workers communicate tasks results shared 'Redis' database. Key features include low task overhead, efficient caching, robust error handling. package powers asynchronous optimization algorithms 'bbotk' 'mlr3tuning' packages.","code":""},{"path":[]},{"path":"https://rush.mlr-org.com/dev/reference/rush-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rush: Rapid Asynchronous and Distributed Computing — rush-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) [copyright holder]","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for Rush Objects — rush_assertions","title":"Assertion for Rush Objects — rush_assertions","text":"assertion functions ensure right class attribute, optionally additional properties. assertion fails, exception raised. Otherwise, input object returned invisibly.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for Rush Objects — rush_assertions","text":"","code":"assert_rush(rush, null_ok = FALSE)  assert_rushs(rushs, null_ok = FALSE)  assert_rush_worker(worker, null_ok = FALSE)  assert_rush_workers(workers, null_ok = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion for Rush Objects — rush_assertions","text":"rush (Rush). null_ok (logical(1)). TRUE, NULL allowed. rushs (list Rush). worker (RushWorker). workers (list RushWorker).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertion for Rush Objects — rush_assertions","text":"Exception assertion fails, otherwise input object invisibly.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assertion for Rush Objects — rush_assertions","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()    rush = rsh(network_id = \"test_network\", config = config_local)     assert_rush(rush) # }"},{"path":"https://rush.mlr-org.com/dev/reference/rush_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Rush Available — rush_available","title":"Rush Available — rush_available","text":"Returns TRUE redis config file (redux::redis_config) set rush_plan().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Available — rush_available","text":"","code":"rush_available()"},{"path":"https://rush.mlr-org.com/dev/reference/rush_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rush Available — rush_available","text":"logical(1)","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rush Available — rush_available","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{   config_local = redux::redis_config()   rush_plan(config = config_local, n_workers = 2)   rush_available() #> [1] TRUE # }"},{"path":"https://rush.mlr-org.com/dev/reference/rush_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Rush Config — rush_config","title":"Get Rush Config — rush_config","text":"Returns rush config set rush_plan().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Rush Config — rush_config","text":"","code":"rush_config()"},{"path":"https://rush.mlr-org.com/dev/reference/rush_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Rush Config — rush_config","text":"list() stored configuration.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Rush Config — rush_config","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{   config_local = redux::redis_config()   rush_plan(config = config_local, n_workers = 2)   rush_config() #> $config #> Redis configuration: #>   - url: redis://127.0.0.1:6379 #>   - scheme: redis #>   - host: 127.0.0.1 #>   - port: 6379 #>   - path:  #>   - password:  #>   - db:  #>   - timeout:  #>  #> $n_workers #> [1] 2 #>  #> $lgr_thresholds #> NULL #>  #> $lgr_buffer_size #> NULL #>  #> $large_objects_path #> NULL #>  #> $start_worker_timeout #> NULL #>  #> $worker_type #> [1] \"local\" #>  # }"},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Rush Plan — rush_plan","title":"Create Rush Plan — rush_plan","text":"Stores number workers Redis configuration options (redux::redis_config) Rush. function tests connection Redis throws error connection fails. function usually used third-party packages setup workers started.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Rush Plan — rush_plan","text":"","code":"rush_plan(   n_workers = NULL,   config = NULL,   lgr_thresholds = NULL,   lgr_buffer_size = NULL,   large_objects_path = NULL,   worker_type = \"local\" )"},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Rush Plan — rush_plan","text":"n_workers (integer(1)) Number workers started. config (redux::redis_config) Configuration options used connect Redis. NULL, REDIS_URL environment variable parsed. REDIS_URL set, default configuration used. See redux::redis_config details. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. large_objects_path (character(1)) path directory large objects stored. worker_type (character(1)) type worker use. Options \"local\" start processx, \"remote\" use mirai \"script\" get script run.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Rush Plan — rush_plan","text":"list() stored configuration.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Rush Plan — rush_plan","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()    rush_plan(config = config_local, n_workers = 2)     rush = rsh(network_id = \"test_network\")    rush #> <Rush> #> * Running Workers: 0 #> * Queued Tasks: 0 #> * Queued Priority Tasks: 0 #> * Running Tasks: 0 #> * Finished Tasks: 0 #> * Failed Tasks: 0 # }"},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a worker — start_worker","title":"Start a worker — start_worker","text":"Starts worker. function loads globals packages, initializes RushWorker instance invokes worker loop. function called $start_local_workers() user creating worker script $create_worker_script(). Use caution. global environment changed.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a worker — start_worker","text":"","code":"start_worker(   worker_id = NULL,   network_id,   config = NULL,   remote = TRUE,   lgr_thresholds = NULL,   lgr_buffer_size = 0,   heartbeat_period = NULL,   heartbeat_expire = NULL,   message_log = NULL,   output_log = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a worker — start_worker","text":"worker_id (character(1)) Identifier worker. Keys redis specific worker prefixed worker id. network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (list()) Configuration Redis connection. remote (logical(1)) Whether worker remote machine. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. heartbeat_period (integer(1)) Period heartbeat seconds. heartbeat updated every heartbeat_period seconds. heartbeat_expire (integer(1)) Time live heartbeat seconds. heartbeat key set expire heartbeat_expire seconds. message_log (character(1)) Path message log files e.g. /tmp/message_logs/ message log files named message_<worker_id>.log. NULL, messages, warnings errors stored. output_log (character(1)) Path output log files e.g. /tmp/output_logs/ output log files named output_<worker_id>.log. NULL, output stored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a worker — start_worker","text":"NULL","code":""},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Start a worker — start_worker","text":"function initializes connection Redis data base. loads packages copies globals global environment worker. function initialize RushWorker instance starts worker loop.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a worker — start_worker","text":"","code":"# This example is not executed since Redis must be installed if (FALSE) { # \\dontrun{   rush::start_worker(    network_id = 'test-rush',    remote = TRUE,    url = 'redis://127.0.0.1:6379',    scheme = 'redis',    host = '127.0.0.1',    port = '6379') } # }"},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Large Objects — store_large_object","title":"Store Large Objects — store_large_object","text":"Store large objects disk return reference object.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Large Objects — store_large_object","text":"","code":"store_large_object(obj, path)"},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store Large Objects — store_large_object","text":"obj () Object store. path (character(1)) Path store object.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store Large Objects — store_large_object","text":"list() class \"rush_large_object\" name path stored object.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Large Objects — store_large_object","text":"","code":"obj = list(a = 1, b = 2) rush_large_object = store_large_object(obj, tempdir())"},{"path":"https://rush.mlr-org.com/dev/reference/with_rng_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Set RNG Sate before Running a Function — with_rng_state","title":"Set RNG Sate before Running a Function — with_rng_state","text":"function sets rng state running function. Use caution. global environment changed.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/with_rng_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set RNG Sate before Running a Function — with_rng_state","text":"","code":"with_rng_state(fun, args, seed)"},{"path":"https://rush.mlr-org.com/dev/reference/with_rng_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set RNG Sate before Running a Function — with_rng_state","text":"fun (function) Function run. args (list) Arguments pass fun. seed (integer) RNG state set running fun.","code":""},{"path":[]},{"path":"https://rush.mlr-org.com/dev/reference/with_rng_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set RNG Sate before Running a Function — with_rng_state","text":"","code":"with_rng_state(runif, list(n = 1), .Random.seed) #> [1] 0.9805397"},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-development-version","dir":"Changelog","previous_headings":"","what":"rush (development version)","title":"rush (development version)","text":"feat: Output message logs can written files now via message_log output_log arguments. compatibility: lgr 0.5.0 BREAKING CHANGE: mlr3 ecosystem base logger now named mlr3. mlr3/rush logger child mlr3 logger used logging messages rush package.","code":""},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-020","dir":"Changelog","previous_headings":"","what":"rush 0.2.0","title":"rush 0.2.0","text":"CRAN release: 2025-05-30 feat: Worker can started mirai package now.","code":""},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-012","dir":"Changelog","previous_headings":"","what":"rush 0.1.2","title":"rush 0.1.2","text":"CRAN release: 2024-11-06 feat: Add $reconnect() method.","code":""},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-011","dir":"Changelog","previous_headings":"","what":"rush 0.1.1","title":"rush 0.1.1","text":"CRAN release: 2024-07-05 fix: Rush class exported. fix: R6 package imported.","code":""},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-010","dir":"Changelog","previous_headings":"","what":"rush 0.1.0","title":"rush 0.1.0","text":"CRAN release: 2024-06-20 Initial CRAN submission.","code":""}]

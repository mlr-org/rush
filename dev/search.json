[{"path":"https://rush.mlr-org.com/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rush authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-workers","dir":"Articles","previous_headings":"","what":"Local Workers","title":"Controller","text":"use random search example Rush article demonstrate controller works. Workers may initiated locally remotely. Local workers run machine controller, whereas remote workers operate separate machines. $start_local_workers() method initiates local workers using processx package. n_workers parameter specifies number workers launch. worker_loop parameter defines function executed worker. worker_loop function depends global variables, can provided via globals parameter. Required packages worker_loop can specified using packages parameter. Worker information accessible $worker_info method. worker identified worker_id. pid field denotes process identifier, hostname field indicates machine name. remote column specifies whether worker remote, heartbeat column indicates presence heartbeat process. Heartbeat mechanisms discussed Error Handling section. $worker_states method returns current state worker. Possible states include \"running\", \"terminated\", \"killed\", \"lost\". Additional workers may added network time. rush integrated third-party package, starting workers typically managed package . cases, users may configure worker options invoking rush_plan() function. function allows explicit specification number workers, type workers, configuration connecting Redis database. Global variables defined global environment must also accessible workers. specified name $start_local_workers() method. variables serialized stored Redis database. Upon initialization, worker retrieves serialized globals database assigns global environment. Note maximum size Redis string 512 MiB. serialized globals required worker loop exceed limit, Rush raise error. scenarios controller workers access shared file system, Rush instead write large objects disk. large_objects_path argument rush_plan() specifies directory used storing large objects. Workers can stopped individually . terminate specific worker, $stop_workers() method invoked corresponding worker_ids argument. command terminates selected worker process. stop workers reset network, $reset() method used. preceding example, optimization process stopped 100 iterations. Alternatively, possible terminate optimization sending terminate signal. worker loop must implement rush$terminated flag. rush controller can terminate optimization. random search proceeds usual. terminate optimization, following command used. workers terminated. simulate segfault worker killing worker process. Workers started using faulty worker loop. $detect_lost_workers() method used identify failed workers. worker detected, state updated \"lost\". Workers failed can restarted using $restart_workers() method. method accepts worker_ids workers restarted. first worker restarted state updated \"running\". Workers record messages generated using lgr package database. lgr_thresholds argument $start_local_workers() specifies logging level logger, e.g. c(\"mlr3/rush\" = \"debug\"). enabling log message storage introduces minor performance overhead, valuable debugging purposes. default, log messages stored. enable logging, workers started desired logging threshold. recent log messages can printed follows. retrieve log entries, use $read_log() method. reset network.","code":"library(rush)  wl_random_search = function(rush) {   while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-network\",   config = redux::redis_config()) worker_ids = rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4) rush$worker_info worker_id   pid remote      hostname heartbeat   state           <char> <int> <lgcl>        <char>    <lgcl>  <char> 1: avaricious...  8922  FALSE pkrvmjbmru...     FALSE running 2: creationar...  8948  FALSE pkrvmjbmru...     FALSE running 3: unheedful_...  8942  FALSE pkrvmjbmru...     FALSE running 4: multipurpo...  8933  FALSE pkrvmjbmru...     FALSE running rush$worker_states state     worker_id     <char>        <char> 1: running avaricious... 2: running creationar... 3: running unheedful_... 4: running multipurpo... rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$worker_states state     worker_id     <char>        <char> 1: running avaricious... 2: running creationar... 3: running unheedful_... 4: running multipurpo... 5: running nonspirito... 6: running baroque_ba... rush_plan(n_workers = 4, config = redux::redis_config(), worker_type = \"local\") rush$stop_workers(worker_ids = worker_ids[1]) rush$worker_states state     worker_id     <char>        <char> 1: running creationar... 2: running unheedful_... 3: running multipurpo... 4: running nonspirito... 5: running baroque_ba... 6:  killed avaricious... rush$reset() wl_random_search = function(rush) {   while(!rush$terminated) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-random-search-terminate\",   config = redux::redis_config())  rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$fetch_finished_tasks() Null data.table (0 rows and 0 cols) rush$stop_workers(type = \"terminate\") rush$worker_states state     worker_id     <char>        <char> 1: running nonartisti... 2: running skimpy_ala... rush = rsh(network = \"test-failed-workers\")  wl_failed_worker = function(rush) {   tools::pskill(Sys.getpid(), tools::SIGKILL) } worker_ids =  rush$start_local_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() rush$worker_states state     worker_id    <char>        <char> 1:   lost premonarch... 2:   lost superroman... rush$restart_workers(worker_ids = worker_ids[1]) rush$worker_states state     worker_id     <char>        <char> 1: running superroman... 2:    lost premonarch... rush = rsh(network = \"test-log-messages\")  wl_log_message = function(rush) {   lg = lgr::get_logger(\"mlr3/rush\")   lg$info(\"This is an info message from worker %s\", rush$worker_id) }  rush$start_local_workers(   worker_loop = wl_log_message,   n_workers = 2,   lgr_thresholds = c(rush = \"info\")) Sys.sleep(1) rush$print_log() rush$read_log() Null data.table (0 rows and 0 cols) rush$reset()"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-start-workers","dir":"Articles","previous_headings":"","what":"Start Workers","title":"Controller","text":"Workers may initiated locally remotely. Local workers run machine controller, whereas remote workers operate separate machines. $start_local_workers() method initiates local workers using processx package. n_workers parameter specifies number workers launch. worker_loop parameter defines function executed worker. worker_loop function depends global variables, can provided via globals parameter. Required packages worker_loop can specified using packages parameter. Worker information accessible $worker_info method. worker identified worker_id. pid field denotes process identifier, hostname field indicates machine name. remote column specifies whether worker remote, heartbeat column indicates presence heartbeat process. Heartbeat mechanisms discussed Error Handling section. $worker_states method returns current state worker. Possible states include \"running\", \"terminated\", \"killed\", \"lost\". Additional workers may added network time.","code":"worker_ids = rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4) rush$worker_info worker_id   pid remote      hostname heartbeat   state           <char> <int> <lgcl>        <char>    <lgcl>  <char> 1: avaricious...  8922  FALSE pkrvmjbmru...     FALSE running 2: creationar...  8948  FALSE pkrvmjbmru...     FALSE running 3: unheedful_...  8942  FALSE pkrvmjbmru...     FALSE running 4: multipurpo...  8933  FALSE pkrvmjbmru...     FALSE running rush$worker_states state     worker_id     <char>        <char> 1: running avaricious... 2: running creationar... 3: running unheedful_... 4: running multipurpo... rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$worker_states state     worker_id     <char>        <char> 1: running avaricious... 2: running creationar... 3: running unheedful_... 4: running multipurpo... 5: running nonspirito... 6: running baroque_ba..."},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-rush-plan","dir":"Articles","previous_headings":"","what":"Rush Plan","title":"Controller","text":"rush integrated third-party package, starting workers typically managed package . cases, users may configure worker options invoking rush_plan() function. function allows explicit specification number workers, type workers, configuration connecting Redis database.","code":"rush_plan(n_workers = 4, config = redux::redis_config(), worker_type = \"local\")"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-globals","dir":"Articles","previous_headings":"","what":"Globals","title":"Controller","text":"Global variables defined global environment must also accessible workers. specified name $start_local_workers() method. variables serialized stored Redis database. Upon initialization, worker retrieves serialized globals database assigns global environment. Note maximum size Redis string 512 MiB. serialized globals required worker loop exceed limit, Rush raise error. scenarios controller workers access shared file system, Rush instead write large objects disk. large_objects_path argument rush_plan() specifies directory used storing large objects.","code":""},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-stop-worker","dir":"Articles","previous_headings":"","what":"Stop Worker","title":"Controller","text":"Workers can stopped individually . terminate specific worker, $stop_workers() method invoked corresponding worker_ids argument. command terminates selected worker process. stop workers reset network, $reset() method used. preceding example, optimization process stopped 100 iterations. Alternatively, possible terminate optimization sending terminate signal. worker loop must implement rush$terminated flag. rush controller can terminate optimization. random search proceeds usual. terminate optimization, following command used. workers terminated.","code":"rush$stop_workers(worker_ids = worker_ids[1]) rush$worker_states state     worker_id     <char>        <char> 1: running creationar... 2: running unheedful_... 3: running multipurpo... 4: running nonspirito... 5: running baroque_ba... 6:  killed avaricious... rush$reset() wl_random_search = function(rush) {   while(!rush$terminated) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-random-search-terminate\",   config = redux::redis_config())  rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$fetch_finished_tasks() Null data.table (0 rows and 0 cols) rush$stop_workers(type = \"terminate\") rush$worker_states state     worker_id     <char>        <char> 1: running nonartisti... 2: running skimpy_ala..."},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-failed-workers","dir":"Articles","previous_headings":"","what":"Failed Workers","title":"Controller","text":"simulate segfault worker killing worker process. Workers started using faulty worker loop. $detect_lost_workers() method used identify failed workers. worker detected, state updated \"lost\".","code":"rush = rsh(network = \"test-failed-workers\")  wl_failed_worker = function(rush) {   tools::pskill(Sys.getpid(), tools::SIGKILL) } worker_ids =  rush$start_local_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() rush$worker_states state     worker_id    <char>        <char> 1:   lost premonarch... 2:   lost superroman..."},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-restart-workers","dir":"Articles","previous_headings":"","what":"Restart Workers","title":"Controller","text":"Workers failed can restarted using $restart_workers() method. method accepts worker_ids workers restarted. first worker restarted state updated \"running\".","code":"rush$restart_workers(worker_ids = worker_ids[1]) rush$worker_states state     worker_id     <char>        <char> 1: running superroman... 2:    lost premonarch..."},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-local-log-messages","dir":"Articles","previous_headings":"","what":"Log Messages","title":"Controller","text":"Workers record messages generated using lgr package database. lgr_thresholds argument $start_local_workers() specifies logging level logger, e.g. c(\"mlr3/rush\" = \"debug\"). enabling log message storage introduces minor performance overhead, valuable debugging purposes. default, log messages stored. enable logging, workers started desired logging threshold. recent log messages can printed follows. retrieve log entries, use $read_log() method. reset network.","code":"rush = rsh(network = \"test-log-messages\")  wl_log_message = function(rush) {   lg = lgr::get_logger(\"mlr3/rush\")   lg$info(\"This is an info message from worker %s\", rush$worker_id) }  rush$start_local_workers(   worker_loop = wl_log_message,   n_workers = 2,   lgr_thresholds = c(rush = \"info\")) Sys.sleep(1) rush$print_log() rush$read_log() Null data.table (0 rows and 0 cols) rush$reset()"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-remote-workers","dir":"Articles","previous_headings":"","what":"Remote Workers","title":"Controller","text":"mirai package provides straightforward mechanism launching rush workers remote machines. mirai manages daemons, persistent background processes capable executing arbitrary R code parallel. daemons communicate main session. Usually mirai used start daemons remote machines can also used start local daemons. Daemons may also launched remote machine via SSH. high performance computing clusters, daemons can started using scheduler. define worker loop. start daemons. daemons(0) stops daemons. daemons started, can start remote workers. Failed workers started mirai also detected controller. simulate segfault worker killing worker process. segmentation fault also terminates associated mirai daemon. Therefore, necessary restart daemon restarting workers. Workers can restarted using $restart_workers() method.","code":"library(mirai)  daemons(   n = 2,   url = host_url() ) [1] 0 status() $connections [1] 0  $daemons [1] \"tcp://10.1.0.157:38627\"  $mirai  awaiting executing completed         0         0         0 daemons(   n = 2L,   url = host_url(port = 5555),   remote = ssh_config(remotes = \"ssh://10.75.32.90\") ) daemons(   n = 2L,   url = host_url(),   remote = remote_config(     command = \"sbatch\",     args = c(\"--mem 512\", \"-n 1\", \"--wrap\", \".\"),     rscript = file.path(R.home(\"bin\"), \"Rscript\"),     quote = TRUE   ) ) wl_random_search = function(rush) {   while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-network\",   config = redux::redis_config()) daemons(0) [1] 0 daemons(2) [1] 2 worker_ids = rush$start_remote_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$worker_info worker_id   pid remote      hostname heartbeat   state           <char> <int> <lgcl>        <char>    <lgcl>  <char> 1: chalky_kak...  9468   TRUE pkrvmjbmru...     FALSE running 2: respectabl...  9465   TRUE pkrvmjbmru...     FALSE running daemons(0) [1] 0 daemons(2) [1] 2 rush = rsh(network = \"test-failed-mirai-workers\")  wl_failed_worker = function(rush) {   tools::pskill(Sys.getpid(), tools::SIGKILL) }  worker_ids = rush$start_remote_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() daemons(0) [1] 0 daemons(2) [1] 2 status() $connections [1] 2  $daemons [1] \"abstract://8ad46b51a395a322c228e83b\"  $mirai  awaiting executing completed         0         0         0 rush$restart_workers(worker_ids)"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-remote-start-workers","dir":"Articles","previous_headings":"","what":"Start Workers","title":"Controller","text":"Usually mirai used start daemons remote machines can also used start local daemons. Daemons may also launched remote machine via SSH. high performance computing clusters, daemons can started using scheduler. define worker loop. start daemons. daemons(0) stops daemons. daemons started, can start remote workers.","code":"library(mirai)  daemons(   n = 2,   url = host_url() ) [1] 0 status() $connections [1] 0  $daemons [1] \"tcp://10.1.0.157:38627\"  $mirai  awaiting executing completed         0         0         0 daemons(   n = 2L,   url = host_url(port = 5555),   remote = ssh_config(remotes = \"ssh://10.75.32.90\") ) daemons(   n = 2L,   url = host_url(),   remote = remote_config(     command = \"sbatch\",     args = c(\"--mem 512\", \"-n 1\", \"--wrap\", \".\"),     rscript = file.path(R.home(\"bin\"), \"Rscript\"),     quote = TRUE   ) ) wl_random_search = function(rush) {   while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }  rush = rsh(   network = \"test-network\",   config = redux::redis_config()) daemons(0) [1] 0 daemons(2) [1] 2 worker_ids = rush$start_remote_workers(   worker_loop = wl_random_search,   n_workers = 2) rush$worker_info worker_id   pid remote      hostname heartbeat   state           <char> <int> <lgcl>        <char>    <lgcl>  <char> 1: chalky_kak...  9468   TRUE pkrvmjbmru...     FALSE running 2: respectabl...  9465   TRUE pkrvmjbmru...     FALSE running"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-remote-failed-workers","dir":"Articles","previous_headings":"","what":"Failed Workers","title":"Controller","text":"Failed workers started mirai also detected controller. simulate segfault worker killing worker process. segmentation fault also terminates associated mirai daemon. Therefore, necessary restart daemon restarting workers. Workers can restarted using $restart_workers() method.","code":"daemons(0) [1] 0 daemons(2) [1] 2 rush = rsh(network = \"test-failed-mirai-workers\")  wl_failed_worker = function(rush) {   tools::pskill(Sys.getpid(), tools::SIGKILL) }  worker_ids = rush$start_remote_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() daemons(0) [1] 0 daemons(2) [1] 2 status() $connections [1] 2  $daemons [1] \"abstract://8ad46b51a395a322c228e83b\"  $mirai  awaiting executing completed         0         0         0 rush$restart_workers(worker_ids)"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-script-workers","dir":"Articles","previous_headings":"","what":"Script Workers","title":"Controller","text":"flexible method starting workers use script generated $worker_script() method. script can executed either local machine remote machine. requirement machine capable running R scripts access Redis database. Workers started processx mirai monitored packages. heartbeat mechanism monitor status script workers. mechanism consists heartbeat key set expiration timeout dedicated heartbeat process refreshes timeout periodically. heartbeat process started callr linked main process worker. event worker’s failure, associated heartbeat process also ceases function, thus halting renewal timeout. absence heartbeat key acts indicator controller worker longer operational. Consequently, controller updates worker’s status \"lost\". Heartbeats initiated upon worker startup specifying heartbeat_period heartbeat_expire parameters. heartbeat_period defines frequency heartbeat process update timeout. heartbeat_expire sets duration, seconds, heartbeat key expires. expiration time set value greater heartbeat period ensure heartbeat process sufficient time refresh timeout. heartbeat process also way kill script worker. $stop_workers(type = \"kill\") method pushes kill signal heartbeat process. heartbeat process terminates main process worker.","code":"rush = rsh(   network = \"test-script-workers\",   config = redux::redis_config())  rush$worker_script(   worker_loop = wl_random_search) rush$worker_script(   worker_loop = wl_random_search,   heartbeat_period = 1,   heartbeat_expire = 3)"},{"path":"https://rush.mlr-org.com/dev/articles/controller.html","id":"sec-script-error-handling","dir":"Articles","previous_headings":"","what":"Error Handling","title":"Controller","text":"Workers started processx mirai monitored packages. heartbeat mechanism monitor status script workers. mechanism consists heartbeat key set expiration timeout dedicated heartbeat process refreshes timeout periodically. heartbeat process started callr linked main process worker. event worker’s failure, associated heartbeat process also ceases function, thus halting renewal timeout. absence heartbeat key acts indicator controller worker longer operational. Consequently, controller updates worker’s status \"lost\". Heartbeats initiated upon worker startup specifying heartbeat_period heartbeat_expire parameters. heartbeat_period defines frequency heartbeat process update timeout. heartbeat_expire sets duration, seconds, heartbeat key expires. expiration time set value greater heartbeat period ensure heartbeat process sufficient time refresh timeout. heartbeat process also way kill script worker. $stop_workers(type = \"kill\") method pushes kill signal heartbeat process. heartbeat process terminates main process worker.","code":"rush$worker_script(   worker_loop = wl_random_search,   heartbeat_period = 1,   heartbeat_expire = 3)"},{"path":"https://rush.mlr-org.com/dev/articles/error_handling.html","id":"sec-error-handling-simple","dir":"Articles","previous_headings":"","what":"Simple R Errors","title":"Error Handling and Debugging","text":"illustrate error-handling mechanism rush, employ random search example main vignette. time introduce random error 50% probability. Within worker loop, users responsible catching errors marking corresponding task \"failed\" using $push_failed() method. start workers. error occurs, task marked \"failed\", error message stored \"message\" column. approach ensures errors interrupt overall execution process. allows subsequent inspection errors reevaluation failed tasks necessary.","code":"library(rush)  branin = function(x1, x2) {   (x2 - 5.1 / (4 * pi^2) * x1^2 + 5 / pi * x1 - 6)^2 + 10 * (1 - 1 / (8 * pi)) * cos(x1) + 10 }  wl_random_search = function(rush) {    while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      tryCatch({       if (runif(1) < 0.5) stop(\"Random Error\")       ys = list(y = branin(xs$x1, xs$x2))       rush$push_results(key, yss = list(ys))     }, error = function(e) {       condition = list(message = e$message)       rush$push_failed(key, conditions = list(condition))     })      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } } rush = rsh(   network = \"test-simply-error\",   config = redux::redis_config())  rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4,   globals = \"branin\") rush$fetch_failed_tasks() x1         x2   pid     worker_id       message          keys          <num>      <num> <int>        <char>        <char>        <char>  1:  1.5926765 13.5481267  9805 fattening_... Random Err... 9640911c-3...  2: -3.6444323  7.4976493  9821 swanky_fie... Random Err... 2dc3f84d-a...  3: -0.8888959 13.8527902  9816 refreshful... Random Err... 6ae13a8c-7...  4: -3.0188785  5.4485933  9816 refreshful... Random Err... 02da4be7-0...  5:  4.8403746  3.3600538  9816 refreshful... Random Err... 43fa6f57-7...  6: -2.7863671 11.4247885  9816 refreshful... Random Err... 94b70bc5-6...  7: -0.3521879 12.7681133  9816 refreshful... Random Err... 13957362-5...  8:  0.2607036  0.7478134  9816 refreshful... Random Err... 2ce47eaa-5...  9: -1.8063876  6.4178011  9805 fattening_... Random Err... 8d9a0b25-6... 10: -0.1680484  5.5857421  9816 refreshful... Random Err... 1cfcdf25-5... 11: -0.5081747  2.3875445  9816 refreshful... Random Err... 9ac7d457-c... 12: -4.1184179  3.4655442  9805 fattening_... Random Err... af4c39cc-5... 13:  3.7889464  9.0068050  9816 refreshful... Random Err... 1931ab8d-f... 14: -4.4989665  7.9871000  9805 fattening_... Random Err... d9a6db36-4... 15: -2.3445486 10.9470660  9816 refreshful... Random Err... 480219d7-9... 16:  5.0139957  1.7059309  9821 swanky_fie... Random Err... 38b8cf09-0... 17:  9.6701259  0.8725476  9816 refreshful... Random Err... f593f96e-4... 18:  6.5179432  2.0574785  9831 overskepti... Random Err... 3d1b481d-5... 19: -4.5569619 11.5639156  9821 swanky_fie... Random Err... c7402015-0... 20:  0.2614131  1.6025191  9816 refreshful... Random Err... be9e8ae7-d... 21:  6.1607839 13.1775531  9805 fattening_... Random Err... 65312476-9... 22:  4.4190430  3.9321469  9831 overskepti... Random Err... a5d5497f-c... 23: -3.1461293  2.0439366  9831 overskepti... Random Err... 7ce3e696-9... 24:  5.2349166  0.4100523  9816 refreshful... Random Err... 495e6a9f-7... 25:  8.4713622  9.8650492  9831 overskepti... Random Err... f78c5157-4... 26: -0.3685434  2.1967012  9816 refreshful... Random Err... 90948827-9... 27: -4.1074930  4.1296279  9831 overskepti... Random Err... 0f90370c-f... 28: -2.5175621  3.4511714  9805 fattening_... Random Err... 3c35c2b9-3... 29: -0.7780527 12.0462196  9821 swanky_fie... Random Err... b6761d03-2... 30: -1.6995494  1.2399010  9805 fattening_... Random Err... 33615200-d... 31:  6.6263637  3.4227090  9816 refreshful... Random Err... 34bec7c3-b... 32:  2.0201042  4.0728707  9805 fattening_... Random Err... 482dc37f-5...             x1         x2   pid     worker_id       message          keys"},{"path":"https://rush.mlr-org.com/dev/articles/error_handling.html","id":"sec-error-handling-workers","dir":"Articles","previous_headings":"","what":"Handling Failing Workers","title":"Error Handling and Debugging","text":"rush package provides mechanisms address situations workers fail due crashes lost connections. failures may result tasks remaining “running” state indefinitely. illustrate , define function simulates segmentation fault terminating worker process. package offers $detect_lost_workers() method, designed identify manage occurrences. method works workers started $start_local_workers() $start_remote_workers(). Workers started $worker_script() must started heartbeat mechanism (see vignette). $detect_lost_workers() method also supports automatic restarting lost workers option restart_workers = TRUE specified. Alternatively, lost workers may restarted manually using $restart_workers() method. Automatic restarting available local workers. worker fails, status task caused failure set \"failed\".","code":"wl_failed_worker = function(rush) {   xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))   key = rush$push_running_tasks(xss = list(xs))    tools::pskill(Sys.getpid(), tools::SIGKILL) }  rush = rsh(network = \"test-failed-workers\")  worker_ids =  rush$start_local_workers(   worker_loop = wl_failed_worker,   n_workers = 2) rush$detect_lost_workers() rush$fetch_failed_tasks() x1        x2   pid     worker_id       message          keys        <num>     <num> <int>        <char>        <char>        <char> 1: -2.983696  8.394982  9954 evolvable_... Worker has... da141d2a-f... 2:  4.353366 12.539880  9956 unanguishe... Worker has... 823143b6-c..."},{"path":"https://rush.mlr-org.com/dev/articles/error_handling.html","id":"debugging","dir":"Articles","previous_headings":"","what":"Debugging","title":"Error Handling and Debugging","text":"worker loop fails unexpectedly due uncaught error, necessary debug worker loop. Consider following example, worker loop randomly generates error. begin debugging, worker loop executed locally. requires initialization RushWorker instance. Although rush worker typically created worker initialization, can also instantiated manually. worker instance passed argument worker loop. error raised main process, traceback() function can invoked examine stack trace. Breakpoints may also set within worker loop inspect program state. approach provides substantial control debugging process. Certain errors, missing packages undefined global variables, may encountered running locally. However, issues can readily identified using $detect_lost_workers() method. $detect_lost_workers() method can used identify lost workers. Output message logs can written files specifying message_log output_log arguments.","code":"wl_error = function(rush) {    repeat {     x1 = runif(1)     x2 = runif(1)      xss = list(list(x1 = x1, x2 = x2))      key = rush$push_running_tasks(xss = xss)      if (x1 > 0.90) {       stop(\"Unexpected error\")     }      rush$push_results(key, yss = list(list(y = x1 + x2)))   } } rush_worker = RushWorker$new(\"test\", remote = FALSE)  wl_error(rush_worker) Error in wl_error(rush_worker): Unexpected error rush = rsh(\"test-error\")  rush$start_local_workers(   worker_loop = wl_error,   n_workers = 1 ) rush$detect_lost_workers() rush = rsh(\"test-error\")  message_log = tempdir() output_log = tempdir()  worker_ids = rush$start_local_workers(   worker_loop = wl_error,   n_workers = 1,   message_log = message_log,   output_log = output_log )  Sys.sleep(5)  readLines(file.path(message_log, sprintf(\"message_%s.log\", worker_ids[1]))) [1] \"Debug message logging on worker frolicsome_cub started\" [2] \"Error in start_args$worker_loop(rush = rush) : Unexpected error\" [3] \"Calls: <Anonymous> ... <Anonymous> -> eval.parent -> eval -> eval -> <Anonymous>\" [4] \"Execution halted\" readLines(file.path(output_log, sprintf(\"output_%s.log\", worker_ids[1]))) [1] \"[1] \\\"Debug output logging on worker frolicsome_cub started\\\"\""},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"random-search","dir":"Articles","previous_headings":"","what":"Random Search","title":"rush - Asynchronous and Distributed Computing","text":"begin simple random search optimize Branin function parallel. Although random search require communication workers, good way introduce basic ideas behind rush. classic Branin function (also called Branin-Hoo function) well-known benchmark problem global optimization. two-dimensional function non-convex, multimodal, three global minima. function toy example optimization thats fast evaluate simple solved. Branin function usually evaluated domain \\(x_1 \\[-5, 10]\\) \\(x_2 \\[0, 15]\\).  define worker_loop function, runs worker. repeatedly draws tasks, evaluates , sends results Redis database. function takes single argument: RushWorker object, handles communication Redis. example, worker samples random point, creates task, evaluates using Branin function, submits result. optimization stops 100 tasks evaluated. important methods RushWorker $push_running_tasks() $push_results() methods. first method $push_running_tasks() creates new task Redis database. Since evaluated next, task marked running. $push_running_tasks() method returns unique key used identify task. second method $push_results() used push results back Redis database. takes key task list results. mark task running important random search, crucial sophisticated algorithms use tasks workers decide task evaluate next. example, Bayesian optimization algorithms sample next point away previous points explore search space. $n_finished_tasks shows many tasks finished used stop worker loop. Tasks unit workers exchange information. main components task key, computational state, input (xs), result (ys). key unique identifier task. identifies task Redis database. four possible computational states \"running\", \"finished\", \"failed\", \"queued\". $push_running_tasks() method marks \"running\" returns key task. $push_results() method marks task \"finished\" stores result. Failed tasks can marked \"failed\" $push_failed() method. error catching must implemented worker loop (see Error Handling details). Tasks can also pushed queue $push_tasks() method sets state \"queued\". last example gives details task queue different methods push pop tasks. input xs result ys lists can contain arbitrary data. Usually methods RushWorker work multiple tasks , xxs yss lists inputs results. Rush controller responsible starting, observing, stopping workers within network. initialized using rsh() function, requires network ID config argument. config argument configuration file used connect Redis database via redux package. Workers can started using $start_local_workers() method, accepts worker loop number workers arguments. workers started locally processx package also possible start workers remote machine (see Rush Controller). need export branin function workers, set globals argument \"branin\". globals different worker types can found Rush Controller vignette. optimization quickly finished retrieve results. $fetch_finished_tasks() method fetches finished tasks database. method returns data.table() key, input, result. pid worker_id column additional information stored task created. worker_id id worker evaluated task pid process id worker. extra information can passed lists $push_running_tasks() $push_results() methods via extra argument. rush controller displays many workers running many tasks exist state. case, 103 tasks marked finished, workers stopped. number slightly exceeds 100 workers check stopping condition independently. several workers evaluate condition around time — , example, 99 tasks finished — may create new tasks detecting limit reached. Additionally, tasks may continue created 100th task still evaluated. can stop workers reset database $reset() method. learn starting, stopping observing workers, see Rush Controller vignette.","code":"branin = function(x1, x2) {   (x2 - 5.1 / (4 * pi^2) * x1^2 + 5 / pi * x1 - 6)^2 + 10 * (1 - 1 / (8 * pi)) * cos(x1) + 10 } wl_random_search = function(rush) {    while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } } library(rush)  config = redux::redis_config()  rush = rsh(   network = \"test-random-search\",   config = config) rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4,   globals = \"branin\")  rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0 rush$fetch_finished_tasks()[order(y)] x1         x2           y   pid     worker_id          keys          <num>      <num>       <num> <int>        <char>        <char>   1:  3.206015  2.6571002   0.6042608 10146 nonpsychot... 91273540-d...   2:  9.677821  2.1796717   0.9710051 10172 patchwork_... 5ba32d39-d...   3:  9.192679  1.6915072   1.0089947 10146 nonpsychot... 1a2cb6fc-7...   4:  9.029630  2.7707997   1.5086414 10146 nonpsychot... c43fe3c8-3...   5: -2.910044 12.6567265   1.5214024 10146 nonpsychot... 98ecab3d-0...  ---  99:  8.000208 14.2329503 169.8258646 10146 nonpsychot... 2e26fd20-6... 100:  7.327814 14.0056764 176.9122786 10157 seraphic_f... 3da3abbf-7... 101:  7.198840 13.9496074 177.4490517 10146 nonpsychot... 7c3672bb-c... 102: -4.867484  3.1546404 197.8847076 10146 nonpsychot... 3218f74d-f... 103: -4.987459  0.5341392 288.7354511 10157 seraphic_f... 0f02b195-e... rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 103 * Failed Tasks: 0 rush$reset()  rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"worker-loop","dir":"Articles","previous_headings":"","what":"Worker Loop","title":"rush - Asynchronous and Distributed Computing","text":"define worker_loop function, runs worker. repeatedly draws tasks, evaluates , sends results Redis database. function takes single argument: RushWorker object, handles communication Redis. example, worker samples random point, creates task, evaluates using Branin function, submits result. optimization stops 100 tasks evaluated. important methods RushWorker $push_running_tasks() $push_results() methods. first method $push_running_tasks() creates new task Redis database. Since evaluated next, task marked running. $push_running_tasks() method returns unique key used identify task. second method $push_results() used push results back Redis database. takes key task list results. mark task running important random search, crucial sophisticated algorithms use tasks workers decide task evaluate next. example, Bayesian optimization algorithms sample next point away previous points explore search space. $n_finished_tasks shows many tasks finished used stop worker loop.","code":"wl_random_search = function(rush) {    while(rush$n_finished_tasks < 100) {      xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } }"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"tasks","dir":"Articles","previous_headings":"","what":"Tasks","title":"rush - Asynchronous and Distributed Computing","text":"Tasks unit workers exchange information. main components task key, computational state, input (xs), result (ys). key unique identifier task. identifies task Redis database. four possible computational states \"running\", \"finished\", \"failed\", \"queued\". $push_running_tasks() method marks \"running\" returns key task. $push_results() method marks task \"finished\" stores result. Failed tasks can marked \"failed\" $push_failed() method. error catching must implemented worker loop (see Error Handling details). Tasks can also pushed queue $push_tasks() method sets state \"queued\". last example gives details task queue different methods push pop tasks. input xs result ys lists can contain arbitrary data. Usually methods RushWorker work multiple tasks , xxs yss lists inputs results.","code":""},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"controller","dir":"Articles","previous_headings":"","what":"Controller","title":"rush - Asynchronous and Distributed Computing","text":"Rush controller responsible starting, observing, stopping workers within network. initialized using rsh() function, requires network ID config argument. config argument configuration file used connect Redis database via redux package. Workers can started using $start_local_workers() method, accepts worker loop number workers arguments. workers started locally processx package also possible start workers remote machine (see Rush Controller). need export branin function workers, set globals argument \"branin\". globals different worker types can found Rush Controller vignette. optimization quickly finished retrieve results. $fetch_finished_tasks() method fetches finished tasks database. method returns data.table() key, input, result. pid worker_id column additional information stored task created. worker_id id worker evaluated task pid process id worker. extra information can passed lists $push_running_tasks() $push_results() methods via extra argument. rush controller displays many workers running many tasks exist state. case, 103 tasks marked finished, workers stopped. number slightly exceeds 100 workers check stopping condition independently. several workers evaluate condition around time — , example, 99 tasks finished — may create new tasks detecting limit reached. Additionally, tasks may continue created 100th task still evaluated. can stop workers reset database $reset() method. learn starting, stopping observing workers, see Rush Controller vignette.","code":"library(rush)  config = redux::redis_config()  rush = rsh(   network = \"test-random-search\",   config = config) rush$start_local_workers(   worker_loop = wl_random_search,   n_workers = 4,   globals = \"branin\")  rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0 rush$fetch_finished_tasks()[order(y)] x1         x2           y   pid     worker_id          keys          <num>      <num>       <num> <int>        <char>        <char>   1:  3.206015  2.6571002   0.6042608 10146 nonpsychot... 91273540-d...   2:  9.677821  2.1796717   0.9710051 10172 patchwork_... 5ba32d39-d...   3:  9.192679  1.6915072   1.0089947 10146 nonpsychot... 1a2cb6fc-7...   4:  9.029630  2.7707997   1.5086414 10146 nonpsychot... c43fe3c8-3...   5: -2.910044 12.6567265   1.5214024 10146 nonpsychot... 98ecab3d-0...  ---  99:  8.000208 14.2329503 169.8258646 10146 nonpsychot... 2e26fd20-6... 100:  7.327814 14.0056764 176.9122786 10157 seraphic_f... 3da3abbf-7... 101:  7.198840 13.9496074 177.4490517 10146 nonpsychot... 7c3672bb-c... 102: -4.867484  3.1546404 197.8847076 10146 nonpsychot... 3218f74d-f... 103: -4.987459  0.5341392 288.7354511 10157 seraphic_f... 0f02b195-e... rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 103 * Failed Tasks: 0 rush$reset()  rush <Rush> * Running Workers: 0 * Queued Tasks: 0 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"median-stopping","dir":"Articles","previous_headings":"","what":"Median Stopping","title":"rush - Asynchronous and Distributed Computing","text":"Random search simple example doesn’t rely information previous tasks therefore doesn’t require communication workers. Now, let’s implement sophisticated algorithm uses results completed tasks decide whether continue evaluating current one. tune XGBoost model mtcars dataset use median stopping rule stop training early. worker starts sampling random hyperparameter configuration three parameters: maximum tree depth, lambda regularization, alpha regularization. parameters control XGBoost model learns data. worker trains model incrementally, starting 5 boosting rounds adding one round time 20 rounds. round, worker evaluates model’s performance test set using root mean squared error (RMSE). point, worker checks well model compared workers fetching completed results comparing performance median score among models number training rounds. current model performs worse median, worker stops hyperparameter configuration starts new one. early stopping mechanism prevents workers wasting time poor-performing configurations. model performs median, worker continues training one round. process continues network evaluated 1000 complete models across workers. worker loop uses new method called $fetch_finished_tasks() fetch finished tasks database. methods like $fetch_running_tasks() $fetch_failed_tasks() also available. sample training test set mtcars dataset. training set used fit model test set used evaluate model. initialize rush network start workers. time pass training test set workers via globals argument packages argument load data.table xgboost packages. fetch finished tasks sort objective value. stop workers reset database.ch","code":"wl_median_stopping = function(rush) {   while(rush$n_finished_tasks < 1000) {      params = list(       max_depth = sample(1:20, 1),       lambda = runif(1, 0, 1),       alpha = runif(1, 0, 1)     )      model = NULL     for (iteration in seq(5, 20, by = 1)) {        key = rush$push_running_tasks(xss = list(c(params, list(nrounds = iteration))))        model = xgboost(         data = as.matrix(data[training_ids, ]),         label = y[training_ids],         nrounds = if (is.null(model)) 5 else 1,         params = params,         xgb_model = model,         verbose = 0       )        pred = predict(model, as.matrix(data[test_ids, ]))       rmse = sqrt(mean((pred - y[test_ids])^2))        rush$push_results(key, yss = list(list(rmse = rmse)))        tasks = rush$fetch_finished_tasks()       if (rmse > median(tasks[nrounds == iteration, rmse])) break     }   } } data(mtcars)  training_ids = sample(1:nrow(mtcars), 20) test_ids = setdiff(1:nrow(mtcars), training_ids) data = mtcars[, -1] y = mtcars$mpg  config = redux::redis_config()  rush = rsh(   network = \"test-median-stopping\",   config = config)  rush$start_local_workers(   worker_loop = wl_median_stopping,   n_workers = 4,   packages = c(\"data.table\", \"xgboost\"),   globals = c(\"training_ids\", \"test_ids\", \"data\", \"y\")) rush$fetch_finished_tasks()[order(y)] Null data.table (0 rows and 0 cols) rush$reset()"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"worker-loop-1","dir":"Articles","previous_headings":"","what":"Worker Loop","title":"rush - Asynchronous and Distributed Computing","text":"worker starts sampling random hyperparameter configuration three parameters: maximum tree depth, lambda regularization, alpha regularization. parameters control XGBoost model learns data. worker trains model incrementally, starting 5 boosting rounds adding one round time 20 rounds. round, worker evaluates model’s performance test set using root mean squared error (RMSE). point, worker checks well model compared workers fetching completed results comparing performance median score among models number training rounds. current model performs worse median, worker stops hyperparameter configuration starts new one. early stopping mechanism prevents workers wasting time poor-performing configurations. model performs median, worker continues training one round. process continues network evaluated 1000 complete models across workers. worker loop uses new method called $fetch_finished_tasks() fetch finished tasks database. methods like $fetch_running_tasks() $fetch_failed_tasks() also available. sample training test set mtcars dataset. training set used fit model test set used evaluate model. initialize rush network start workers. time pass training test set workers via globals argument packages argument load data.table xgboost packages. fetch finished tasks sort objective value. stop workers reset database.ch","code":"wl_median_stopping = function(rush) {   while(rush$n_finished_tasks < 1000) {      params = list(       max_depth = sample(1:20, 1),       lambda = runif(1, 0, 1),       alpha = runif(1, 0, 1)     )      model = NULL     for (iteration in seq(5, 20, by = 1)) {        key = rush$push_running_tasks(xss = list(c(params, list(nrounds = iteration))))        model = xgboost(         data = as.matrix(data[training_ids, ]),         label = y[training_ids],         nrounds = if (is.null(model)) 5 else 1,         params = params,         xgb_model = model,         verbose = 0       )        pred = predict(model, as.matrix(data[test_ids, ]))       rmse = sqrt(mean((pred - y[test_ids])^2))        rush$push_results(key, yss = list(list(rmse = rmse)))        tasks = rush$fetch_finished_tasks()       if (rmse > median(tasks[nrounds == iteration, rmse])) break     }   } } data(mtcars)  training_ids = sample(1:nrow(mtcars), 20) test_ids = setdiff(1:nrow(mtcars), training_ids) data = mtcars[, -1] y = mtcars$mpg  config = redux::redis_config()  rush = rsh(   network = \"test-median-stopping\",   config = config)  rush$start_local_workers(   worker_loop = wl_median_stopping,   n_workers = 4,   packages = c(\"data.table\", \"xgboost\"),   globals = c(\"training_ids\", \"test_ids\", \"data\", \"y\")) rush$fetch_finished_tasks()[order(y)] Null data.table (0 rows and 0 cols) rush$reset()"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"bayesian-optimization","dir":"Articles","previous_headings":"","what":"Bayesian Optimization","title":"rush - Asynchronous and Distributed Computing","text":"implement Asynchronous Distributed Bayesian Optimization (ADBO) [@egele_2023] next. example shows workers use information running tasks introduces task queues. ADBO runs sequential Bayesian optimization multiple workers parallel. worker maintains surrogate model (random forest) selects next hyperparameter configuration maximizing upper confidence bounds acquisition function. promote varying exploration-exploitation tradeoff workers, acquisition functions initialized different lambda values ranging 0.1 10. worker completes evaluation, asynchronously sends result peers via Redis data base; worker updates local model shared information. decentralized design enables workers proceed independently; eliminating need central coordinator become bottleneck large-scale optimization scenarios. first create new rush network. queue system works pushing popping tasks queue. $push_task() method creates new tasks pushes queue. example, draw initial design 25 points push queue. see 25 queued tasks database. retrieve tasks queue, need implement $pop_task() method worker loop. worker loop pops tasks $pop_task() method queue. task evaluated results pushed back database $push_results() method. tasks queue, $pop_task() method returns NULL worker loop starts Bayesian optimization. First, lambda value acquisition function sampled 0.01 10. running finished tasks fetched database. Using rush$fetch_tasks_with_state() instead using $fetch_running_tasks() $fetch_finished_tasks() important prevents tasks appearing twice. case worker changes state task \"running\" \"finished\" tasks fetched. missing y values running tasks imputed mean finished tasks. surrogate random forest model fitted data acquisition function optimized find next task. Marking task running important Bayesian optimization algorithm, uses already sampled points workers decide task evaluate next. task evaluated results pushed back database. stop optimization process 100 evaluated tasks. start optimization process starting 4 local workers run Bayesian optimization worker loop. optimization quickly finished retrieve results.","code":"config = redux::redis_config()  rush = rsh(   network = \"test-bayesian-optimization\",   config = config) xss = replicate(25, list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15)), simplify = FALSE)  rush$push_tasks(xss = xss)  rush <Rush> * Running Workers: 0 * Queued Tasks: 25 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0 wl_bayesian_optimization = function(rush) {   repeat {     task = rush$pop_task()     if (is.null(task)) break     ys = list(y = branin(task$xs$x1, task$xs$x2))     rush$push_results(task$key, yss = list(ys))   }    lambda = runif(1, 0.01, 10)    while(rush$n_finished_tasks < 100) {      xydt = rush$fetch_tasks_with_state(states = c(\"running\", \"finished\"))     mean_y = mean(xydt$y, na.rm = TRUE)     xydt[\"running\", y := mean_y, on = \"state\"]      surrogate = ranger::ranger(       y ~ x1 + x2,       data = xydt,       num.trees = 100L,       keep.inbag = TRUE)     xdt = data.table::data.table(x1 = runif(1000, -5, 10), x2 = runif(1000, 0, 15))     p = predict(surrogate, xdt, type = \"se\", se.method = \"jack\")     cb = p$predictions - lambda * p$se     xs = as.list(xdt[which.min(cb)])     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } } rush$start_local_workers(   worker_loop = wl_bayesian_optimization,   n_workers = 4,   globals = \"branin\") rush$fetch_finished_tasks()[order(y)] x1         x2          y   pid     worker_id          keys          <num>      <num>      <num> <int>        <char>        <char>  1: -3.7111473 11.2387905   7.900948 10445 scattered_... af101763-1...  2: -0.4834015  5.5726139  20.007253 10445 scattered_... 522888bd-d...  3:  7.5462572  4.0886751  20.429015 10445 scattered_... c9c763ed-7...  4: -1.3411708  5.2560815  21.862811 10445 scattered_... d9fd9f57-d...  5:  6.0010941  3.8682020  26.878336 10445 scattered_... 1196afee-c...  6: -0.3719041  9.5862165  27.804909 10445 scattered_... 54a95edf-f...  7: -1.1416944  4.2166063  28.199188 10447 censorious... 3165a7a1-a...  8: -2.9117381  5.8741614  34.934594 10471 climatic_p... 6256c803-a...  9:  3.5928432  7.8009111  35.599294 10445 scattered_... ea6e2970-3... 10: -3.2952243  6.0251196  44.363763 10445 scattered_... e5587cc9-8... 11: -0.9364128 13.0435910  45.284219 10457 ready_ligh... 021f1af1-d... 12:  2.8240511  9.2185761  45.539254 10445 scattered_... 0ad2b0fb-c... 13: -2.3803591  3.8338592  47.758473 10445 scattered_... adabcd7e-4... 14:  3.9835850  8.3922060  48.257750 10445 scattered_... b91cae18-6... 15:  8.9784720  9.4829644  55.488913 10445 scattered_... 6b483fe8-2... 16:  8.8818368  9.8796806  63.002812 10445 scattered_... 4df4e76d-d... 17:  5.9630465  8.5183812  74.101388 10445 scattered_... 16b1cda7-f... 18: -2.1613842  0.7286458  91.418569 10457 ready_ligh... e931bf76-8... 19:  0.6010080 13.8594836  94.821079 10447 censorious... da879db2-1... 20: -4.5829005  6.6429048  96.449607 10471 climatic_p... 30e108c8-2... 21: -3.0312389  1.9708120 101.269034 10447 censorious... 39ced2fb-0... 22:  1.3337063 14.2980210 116.109548 10447 censorious... bc0cee0a-7... 23:  5.2778625 11.8697810 129.019857 10445 scattered_... 324a027d-1... 24:  4.4253214 13.3827716 148.796265 10447 censorious... 7aff95e3-d... 25:  7.6046642 13.8497485 168.171790 10445 scattered_... f123bfb5-0...             x1         x2          y   pid     worker_id          keys"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"queues","dir":"Articles","previous_headings":"","what":"Queues","title":"rush - Asynchronous and Distributed Computing","text":"queue system works pushing popping tasks queue. $push_task() method creates new tasks pushes queue. example, draw initial design 25 points push queue. see 25 queued tasks database. retrieve tasks queue, need implement $pop_task() method worker loop.","code":"xss = replicate(25, list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15)), simplify = FALSE)  rush$push_tasks(xss = xss)  rush <Rush> * Running Workers: 0 * Queued Tasks: 25 * Queued Priority Tasks: 0 * Running Tasks: 0 * Finished Tasks: 0 * Failed Tasks: 0"},{"path":"https://rush.mlr-org.com/dev/articles/rush.html","id":"worker-loop-2","dir":"Articles","previous_headings":"","what":"Worker Loop","title":"rush - Asynchronous and Distributed Computing","text":"worker loop pops tasks $pop_task() method queue. task evaluated results pushed back database $push_results() method. tasks queue, $pop_task() method returns NULL worker loop starts Bayesian optimization. First, lambda value acquisition function sampled 0.01 10. running finished tasks fetched database. Using rush$fetch_tasks_with_state() instead using $fetch_running_tasks() $fetch_finished_tasks() important prevents tasks appearing twice. case worker changes state task \"running\" \"finished\" tasks fetched. missing y values running tasks imputed mean finished tasks. surrogate random forest model fitted data acquisition function optimized find next task. Marking task running important Bayesian optimization algorithm, uses already sampled points workers decide task evaluate next. task evaluated results pushed back database. stop optimization process 100 evaluated tasks. start optimization process starting 4 local workers run Bayesian optimization worker loop. optimization quickly finished retrieve results.","code":"wl_bayesian_optimization = function(rush) {   repeat {     task = rush$pop_task()     if (is.null(task)) break     ys = list(y = branin(task$xs$x1, task$xs$x2))     rush$push_results(task$key, yss = list(ys))   }    lambda = runif(1, 0.01, 10)    while(rush$n_finished_tasks < 100) {      xydt = rush$fetch_tasks_with_state(states = c(\"running\", \"finished\"))     mean_y = mean(xydt$y, na.rm = TRUE)     xydt[\"running\", y := mean_y, on = \"state\"]      surrogate = ranger::ranger(       y ~ x1 + x2,       data = xydt,       num.trees = 100L,       keep.inbag = TRUE)     xdt = data.table::data.table(x1 = runif(1000, -5, 10), x2 = runif(1000, 0, 15))     p = predict(surrogate, xdt, type = \"se\", se.method = \"jack\")     cb = p$predictions - lambda * p$se     xs = as.list(xdt[which.min(cb)])     key = rush$push_running_tasks(xss = list(xs))      ys = list(y = branin(xs$x1, xs$x2))     rush$push_results(key, yss = list(ys))   } } rush$start_local_workers(   worker_loop = wl_bayesian_optimization,   n_workers = 4,   globals = \"branin\") rush$fetch_finished_tasks()[order(y)] x1         x2          y   pid     worker_id          keys          <num>      <num>      <num> <int>        <char>        <char>  1: -3.7111473 11.2387905   7.900948 10445 scattered_... af101763-1...  2: -0.4834015  5.5726139  20.007253 10445 scattered_... 522888bd-d...  3:  7.5462572  4.0886751  20.429015 10445 scattered_... c9c763ed-7...  4: -1.3411708  5.2560815  21.862811 10445 scattered_... d9fd9f57-d...  5:  6.0010941  3.8682020  26.878336 10445 scattered_... 1196afee-c...  6: -0.3719041  9.5862165  27.804909 10445 scattered_... 54a95edf-f...  7: -1.1416944  4.2166063  28.199188 10447 censorious... 3165a7a1-a...  8: -2.9117381  5.8741614  34.934594 10471 climatic_p... 6256c803-a...  9:  3.5928432  7.8009111  35.599294 10445 scattered_... ea6e2970-3... 10: -3.2952243  6.0251196  44.363763 10445 scattered_... e5587cc9-8... 11: -0.9364128 13.0435910  45.284219 10457 ready_ligh... 021f1af1-d... 12:  2.8240511  9.2185761  45.539254 10445 scattered_... 0ad2b0fb-c... 13: -2.3803591  3.8338592  47.758473 10445 scattered_... adabcd7e-4... 14:  3.9835850  8.3922060  48.257750 10445 scattered_... b91cae18-6... 15:  8.9784720  9.4829644  55.488913 10445 scattered_... 6b483fe8-2... 16:  8.8818368  9.8796806  63.002812 10445 scattered_... 4df4e76d-d... 17:  5.9630465  8.5183812  74.101388 10445 scattered_... 16b1cda7-f... 18: -2.1613842  0.7286458  91.418569 10457 ready_ligh... e931bf76-8... 19:  0.6010080 13.8594836  94.821079 10447 censorious... da879db2-1... 20: -4.5829005  6.6429048  96.449607 10471 climatic_p... 30e108c8-2... 21: -3.0312389  1.9708120 101.269034 10447 censorious... 39ced2fb-0... 22:  1.3337063 14.2980210 116.109548 10447 censorious... bc0cee0a-7... 23:  5.2778625 11.8697810 129.019857 10445 scattered_... 324a027d-1... 24:  4.4253214 13.3827716 148.796265 10447 censorious... 7aff95e3-d... 25:  7.6046642 13.8497485 168.171790 10445 scattered_... f123bfb5-0...             x1         x2          y   pid     worker_id          keys"},{"path":"https://rush.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Maintainer, author, copyright holder.","code":""},{"path":"https://rush.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M (2025). rush: Rapid Asynchronous Distributed Computing. R package version 0.2.0.9000, https://rush.mlr-org.com.","code":"@Manual{,   title = {rush: Rapid Asynchronous and Distributed Computing},   author = {Marc Becker},   year = {2025},   note = {R package version 0.2.0.9000},   url = {https://rush.mlr-org.com}, }"},{"path":"https://rush.mlr-org.com/dev/index.html","id":"rush","dir":"","previous_headings":"","what":"Rapid Asynchronous and Distributed Computing","title":"Rapid Asynchronous and Distributed Computing","text":"Package website: release | dev rush package designed solve large-scale problems asynchronously across distributed network. Employing database centric model, rush enables workers communicate tasks results shared Redis database. Key features include low task overhead, efficient caching, robust error handling. package powers asynchronous optimization algorithms bbotk mlr3tuning packages.","code":""},{"path":"https://rush.mlr-org.com/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Rapid Asynchronous and Distributed Computing","text":"Database centric model robust scalability. Efficient communication workers usingRedis. Maintains low overhead, limiting delays just millisecond per task. Reduces read/write operations lightweight efficient caching system. Offers centralized system features, task queues. Provides fast data transformation Redis data.table. Simplifies local worker setup processx. Enables scaling large remote worker networks via mirai package. Automatically detects recovers worker failures high reliability. Logs worker messages directly Redis database using lgr. Designed minimal dependencies lightweight integration.","code":""},{"path":"https://rush.mlr-org.com/dev/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Rapid Asynchronous and Distributed Computing","text":"Install latest release CRAN. Install development version GitHub. install Redis.","code":"install.packages(\"rush\") pak::pak(\"mlr-org/rush\")"},{"path":"https://rush.mlr-org.com/dev/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related Work","title":"Rapid Asynchronous and Distributed Computing","text":"rrq package task queue system R using Redis. future package provides simple uniform way evaluating R expressions asynchronously across range backends. batchtools package execution long-running tasks high-performance computing clusters. mirai package evaluates R expression asynchronously parallel process, locally distributed network.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":null,"dir":"Reference","previous_headings":"","what":"Log to Redis Database — AppenderRedis","title":"Log to Redis Database — AppenderRedis","text":"AppenderRedis writes log messages Redis data base. lgr::Appender created internally RushWorker logger thresholds passed via rush_plan().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log to Redis Database — AppenderRedis","text":"Object class R6::R6Class AppenderRedis methods writing log events Redis data bases.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to Redis Database — AppenderRedis","text":"lgr::Filterable -> lgr::Appender -> lgr::AppenderMemory -> AppenderRedis","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to Redis Database — AppenderRedis","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$set_layout() lgr::Appender$set_threshold() lgr::AppenderMemory$append() lgr::AppenderMemory$clear() lgr::AppenderMemory$format() lgr::AppenderMemory$set_buffer_size() lgr::AppenderMemory$set_flush_on_exit() lgr::AppenderMemory$set_flush_on_rotate() lgr::AppenderMemory$set_flush_threshold() lgr::AppenderMemory$set_should_flush() lgr::AppenderMemory$show()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to Redis Database — AppenderRedis","text":"AppenderRedis$new() AppenderRedis$flush()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Log to Redis Database — AppenderRedis","text":"Creates new instance R6 class.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to Redis Database — AppenderRedis","text":"","code":"AppenderRedis$new(   config,   key,   threshold = NA_integer_,   layout = lgr::LayoutJson$new(timestamp_fmt = \"%Y-%m-%d %H:%M:%OS3\"),   buffer_size = 0,   flush_threshold = \"error\",   flush_on_exit = TRUE,   flush_on_rotate = TRUE,   should_flush = NULL,   filters = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to Redis Database — AppenderRedis","text":"config (redux::redis_config) Redis configuration options. key (character(1)) Key list holding log messages Redis data store. threshold (integer(1) | character(1)) Threshold log messages. layout (lgr::Layout) Layout log messages. buffer_size (integer(1)) Size buffer. flush_threshold (character(1)) Threshold flushing buffer. flush_on_exit (logical(1)) Flush buffer exit. flush_on_rotate (logical(1)) Flush buffer rotate. should_flush (function) Function determines buffer flushed. filters (list) List filters.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"method-flush-","dir":"Reference","previous_headings":"","what":"Method flush()","title":"Log to Redis Database — AppenderRedis","text":"Sends buffer's contents Redis data store, clears buffer.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to Redis Database — AppenderRedis","text":"","code":"AppenderRedis$flush()"},{"path":"https://rush.mlr-org.com/dev/reference/AppenderRedis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log to Redis Database — AppenderRedis","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()     rush_plan(      config = config_local,      n_workers = 2,      lgr_thresholds = c(rush = \"info\"))     rush = rsh(network_id = \"test_network\")    rush #> <Rush> #> * Running Workers: 0 #> * Queued Tasks: 0 #> * Queued Priority Tasks: 0 #> * Running Tasks: 0 #> * Finished Tasks: 0 #> * Failed Tasks: 0 # }"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":null,"dir":"Reference","previous_headings":"","what":"Rush Controller — Rush","title":"Rush Controller — Rush","text":"Rush controller manages workers rush network.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rush Controller — Rush","text":"Object class R6::R6Class Rush controller methods.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"local-workers","dir":"Reference","previous_headings":"","what":"Local Workers","title":"Rush Controller — Rush","text":"local worker runs machine controller. Local workers spawned `$start_local_workers() method via processx package.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"remote-workers","dir":"Reference","previous_headings":"","what":"Remote Workers","title":"Rush Controller — Rush","text":"remote worker runs different machine controller. Remote workers spawned `$start_remote_workers() method via mirai package.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"script-workers","dir":"Reference","previous_headings":"","what":"Script Workers","title":"Rush Controller — Rush","text":"Workers can started script anywhere. requirement worker can connect Redis database. script created $worker_script() method.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Rush Controller — Rush","text":"network_id (character(1)) Identifier rush network. config (redux::redis_config) Redis configuration options. connector (redux::redis_api) Returns connection Redis. processes_processx (processx::process) List processes started $start_local_workers(). processes_mirai (mirai::mirai) List mirai processes started $start_remote_workers().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Rush Controller — Rush","text":"n_workers (integer(1)) Number workers. n_running_workers (integer(1)) Number running workers. n_terminated_workers (integer(1)) Number terminated workers. n_killed_workers (integer(1)) Number killed workers. n_lost_workers (integer(1)) Number lost workers. Run $detect_lost_workers() update number lost workers. n_pre_workers (integer(1)) Number workers yet completely started. worker_ids (character()) Ids workers. running_worker_ids (character()) Ids running workers. terminated_worker_ids (character()) Ids terminated workers. killed_worker_ids (character()) Ids killed workers. lost_worker_ids (character()) Ids lost workers. pre_worker_ids (character()) Ids workers yet completely started. tasks (character()) Keys tasks. queued_tasks (character()) Keys queued tasks. running_tasks (character()) Keys running tasks. finished_tasks (character()) Keys finished tasks. failed_tasks (character()) Keys failed tasks. n_queued_tasks (integer(1)) Number queued tasks. n_queued_priority_tasks (integer(1)) Number queued priority tasks. n_running_tasks (integer(1)) Number running tasks. n_finished_tasks (integer(1)) Number finished tasks. n_failed_tasks (integer(1)) Number failed tasks. n_tasks (integer(1)) Number tasks. worker_info (data.table::data.table()) Contains information workers. worker_states (data.table::data.table()) Contains states workers. all_workers_terminated (logical(1)) Whether workers terminated. all_workers_lost (logical(1)) Whether workers lost. Runs $detect_lost_workers() detect lost workers. priority_info (data.table::data.table) Contains number tasks priority queues. snapshot_schedule (character()) Set snapshot schedule periodically save data base disk. example, c(60, 1000) saves data base every 60 seconds least 1000 changes. Overwrites redis configuration file. Set NULL disable snapshots. details see redis.io. redis_info (list()) Information Redis server.","code":""},{"path":[]},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Rush Controller — Rush","text":"Rush$new() Rush$format() Rush$print() Rush$reconnect() Rush$start_local_workers() Rush$start_remote_workers() Rush$worker_script() Rush$restart_workers() Rush$wait_for_workers() Rush$stop_workers() Rush$detect_lost_workers() Rush$reset() Rush$read_log() Rush$print_log() Rush$push_tasks() Rush$push_priority_tasks() Rush$push_failed() Rush$fetch_queued_tasks() Rush$fetch_priority_tasks() Rush$fetch_running_tasks() Rush$fetch_finished_tasks() Rush$wait_for_finished_tasks() Rush$fetch_new_tasks() Rush$wait_for_new_tasks() Rush$fetch_failed_tasks() Rush$fetch_tasks() Rush$fetch_tasks_with_state() Rush$wait_for_tasks() Rush$write_hashes() Rush$read_hashes() Rush$read_hash() Rush$is_running_task() Rush$is_failed_task() Rush$tasks_with_state() Rush$clone()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Rush Controller — Rush","text":"Creates new instance R6 class.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$new(network_id = NULL, config = NULL, seed = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (redux::redis_config) Redis configuration options. NULL, configuration set rush_plan() used. rush_plan() called, REDIS_URL environment variable parsed. REDIS_URL set, default configuration used. See redux::redis_config details. seed (integer()) Initial seed random number generator. Either L'Ecuyer-CMRG seed (integer(7)) regular RNG seed (integer(1)). later converted L'Ecuyer-CMRG seed. NULL, seed used random number generator.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Rush Controller — Rush","text":"Helper print outputs.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$format(...)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"... (ignored).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Rush Controller — Rush","text":"Print method.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$print()"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-reconnect-","dir":"Reference","previous_headings":"","what":"Method reconnect()","title":"Rush Controller — Rush","text":"Reconnect Redis. connection breaks Rush object saved disk. Call method reconnect loading object.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$reconnect()"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-start-local-workers-","dir":"Reference","previous_headings":"","what":"Method start_local_workers()","title":"Rush Controller — Rush","text":"Start workers locally processx. processx::process stored $processes_processx. Alternatively, use $start_remote_workers() start workers remote machines mirai. Parameters set rush_plan() precedence parameters set .","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$start_local_workers(   worker_loop = NULL,   ...,   n_workers = 1,   globals = NULL,   packages = NULL,   lgr_thresholds = NULL,   lgr_buffer_size = NULL,   supervise = TRUE,   message_log = NULL,   output_log = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_loop (function) Loop run workers. ... () Arguments passed worker_loop. n_workers (integer(1)) Number workers started. Default 1. globals (character()) Global variables loaded workers global environment. packages (character()) Packages loaded workers. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. supervise (logical(1)) Whether kill workers main R process shut . message_log (character(1)) Path message log files e.g. /tmp/message_logs/ message log files named message_<worker_id>.log. NULL, messages, warnings errors stored. output_log (character(1)) Path output log files e.g. /tmp/output_logs/ output log files named output_<worker_id>.log. NULL, output stored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-start-remote-workers-","dir":"Reference","previous_headings":"","what":"Method start_remote_workers()","title":"Rush Controller — Rush","text":"Start workers remote machines mirai. mirai::mirai stored $processes_mirai. Parameters set rush_plan() precedence parameters set .","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$start_remote_workers(   worker_loop,   ...,   n_workers = 1,   globals = NULL,   packages = NULL,   lgr_thresholds = NULL,   lgr_buffer_size = NULL,   message_log = NULL,   output_log = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_loop (function) Loop run workers. ... () Arguments passed worker_loop. n_workers (integer(1)) Number workers started. Default 1. globals (character()) Global variables loaded workers global environment. packages (character()) Packages loaded workers. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. message_log (character(1)) Path message log files e.g. /tmp/message_logs/ message log files named message_<worker_id>.log. NULL, messages, warnings errors stored. output_log (character(1)) Path output log files e.g. /tmp/output_logs/ output log files named output_<worker_id>.log. NULL, output stored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-worker-script-","dir":"Reference","previous_headings":"","what":"Method worker_script()","title":"Rush Controller — Rush","text":"Generate script start workers.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$worker_script(   worker_loop,   ...,   globals = NULL,   packages = NULL,   lgr_thresholds = NULL,   lgr_buffer_size = NULL,   heartbeat_period = NULL,   heartbeat_expire = NULL,   message_log = NULL,   output_log = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_loop (function) Loop run workers. ... () Arguments passed worker_loop. globals (character()) Global variables loaded workers global environment. packages (character()) Packages loaded workers. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. heartbeat_period (integer(1)) Period heartbeat seconds. heartbeat updated every heartbeat_period seconds. heartbeat_expire (integer(1)) Time live heartbeat seconds. heartbeat key set expire heartbeat_expire seconds. message_log (character(1)) Path message log files e.g. /tmp/message_logs/ message log files named message_<worker_id>.log. NULL, messages, warnings errors stored. output_log (character(1)) Path output log files e.g. /tmp/output_logs/ output log files named output_<worker_id>.log. NULL, output stored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-restart-workers-","dir":"Reference","previous_headings":"","what":"Method restart_workers()","title":"Rush Controller — Rush","text":"Restart workers. worker still running, killed restarted.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$restart_workers(worker_ids, supervise = TRUE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_ids (character()) Worker ids restarted. supervise (logical(1)) Whether kill workers main R process shut .","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-wait-for-workers-","dir":"Reference","previous_headings":"","what":"Method wait_for_workers()","title":"Rush Controller — Rush","text":"Wait n workers available.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$wait_for_workers(n, timeout = Inf)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"n (integer(1)) Number workers wait . timeout (numeric(1)) Timeout seconds. Default Inf.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-stop-workers-","dir":"Reference","previous_headings":"","what":"Method stop_workers()","title":"Rush Controller — Rush","text":"Stop workers.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$stop_workers(type = \"kill\", worker_ids = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"type (character(1)) Type stopping. Either \"terminate\" \"kill\". \"kill\" workers stopped immediately. \"terminate\" workers evaluate currently running task terminate. \"terminate\" option must implemented worker loop. worker_ids (character()) Worker ids stopped. Remote workers must killed together. NULL workers stopped.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-detect-lost-workers-","dir":"Reference","previous_headings":"","what":"Method detect_lost_workers()","title":"Rush Controller — Rush","text":"Detect lost workers. state worker changed \"lost\".","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$detect_lost_workers(restart_local_workers = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"restart_local_workers (logical(1)) Whether restart lost workers. Ignored remote workers.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Rush Controller — Rush","text":"Stop workers delete data stored redis.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$reset(type = \"kill\")"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"type (character(1)) Type stopping. Either \"terminate\" \"kill\". \"terminate\" workers evaluate currently running task terminate. \"kill\" workers stopped immediately.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-read-log-","dir":"Reference","previous_headings":"","what":"Method read_log()","title":"Rush Controller — Rush","text":"Read log messages written lgr package worker.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$read_log(worker_ids = NULL, time_difference = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"worker_ids (character(1)) Worker ids. NULL worker ids used. time_difference (logical(1)) Whether calculate time difference log messages.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(data.table::data.table()) level, timestamp, logger, caller message, optionally time difference.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-print-log-","dir":"Reference","previous_headings":"","what":"Method print_log()","title":"Rush Controller — Rush","text":"Print log messages written lgr package worker.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$print_log()"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-push-tasks-","dir":"Reference","previous_headings":"","what":"Method push_tasks()","title":"Rush Controller — Rush","text":"Pushes task queue. Task added queued tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$push_tasks(   xss,   extra = NULL,   seeds = NULL,   timeouts = NULL,   max_retries = NULL,   terminate_workers = FALSE )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"xss (list named list()) Lists arguments function e.g. list(list(x1, x2), list(x1, x2))). extra (list()) List additional information stored along task e.g. list(list(timestamp), list(timestamp))). seeds (list()) List L'Ecuyer-CMRG seeds task e.g list(list(c(104071, 490840688, 1690070564, -495119766, 503491950, 1801530932, -1629447803))). NULL initial seed set, L'Ecuyer-CMRG seeds generated initial seed. NULL initial seed set, seeds used random number generator. timeouts (integer()) Timeouts task seconds e.g. c(10, 15). single number used timeout tasks. NULL timeout set. max_retries (integer()) Number retries task. single number used number retries tasks. NULL tasks retried. terminate_workers (logical(1)) Whether stop workers evaluating tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-push-priority-tasks-","dir":"Reference","previous_headings":"","what":"Method push_priority_tasks()","title":"Rush Controller — Rush","text":"Pushes task queue specific worker. Task added queued priority tasks. worker evaluates tasks priority queue shared queue. priority NA task added shared queue. worker lost worker id known, task added shared queue.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$push_priority_tasks(xss, extra = NULL, priority = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"xss (list named list()) Lists arguments function e.g. list(list(x1, x2), list(x1, x2))). extra (list) List additional information stored along task e.g. list(list(timestamp), list(timestamp))). priority (character()) Worker ids tasks pushed.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-push-failed-","dir":"Reference","previous_headings":"","what":"Method push_failed()","title":"Rush Controller — Rush","text":"Pushes failed tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$push_failed(keys, conditions)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character(1)) Keys associated tasks. conditions (named list()) List lists conditions.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-queued-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_queued_tasks()","title":"Rush Controller — Rush","text":"Fetch queued tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_queued_tasks(   fields = c(\"xs\", \"xs_extra\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\"). data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table queued tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-priority-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_priority_tasks()","title":"Rush Controller — Rush","text":"Fetch queued priority tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_priority_tasks(   fields = c(\"xs\", \"xs_extra\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\"). data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table queued priority tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-running-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_running_tasks()","title":"Rush Controller — Rush","text":"Fetch running tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_running_tasks(   fields = c(\"xs\", \"xs_extra\", \"worker_extra\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\"). data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table running tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-finished-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_finished_tasks()","title":"Rush Controller — Rush","text":"Fetch finished tasks data base. Finished tasks cached.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_finished_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   reset_cache = FALSE,   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"ys\", \"ys_extra\"). reset_cache (logical(1)) Whether reset cache. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table finished tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-wait-for-finished-tasks-","dir":"Reference","previous_headings":"","what":"Method wait_for_finished_tasks()","title":"Rush Controller — Rush","text":"Block process new finished task available. Returns finished tasks NULL new task available timeout seconds.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$wait_for_finished_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\"),   timeout = Inf,   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"ys\", \"ys_extra\"). timeout (numeric(1)) Time wait result seconds. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table finished tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-new-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_new_tasks()","title":"Rush Controller — Rush","text":"Fetch finished tasks data base finished last fetch. Updates cache finished tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_new_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Latest results.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-wait-for-new-tasks-","dir":"Reference","previous_headings":"","what":"Method wait_for_new_tasks()","title":"Rush Controller — Rush","text":"Block process new finished task available. Returns new tasks NULL new task available timeout seconds.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$wait_for_new_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   timeout = Inf,   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"ys\", \"ys_extra\"). timeout (numeric(1)) Time wait new result seconds. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() | list().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-failed-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_failed_tasks()","title":"Rush Controller — Rush","text":"Fetch failed tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_failed_tasks(   fields = c(\"xs\", \"worker_extra\", \"condition\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"condition\". data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table failed tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-tasks-","dir":"Reference","previous_headings":"","what":"Method fetch_tasks()","title":"Rush Controller — Rush","text":"Fetch tasks data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_tasks(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"xs_extra\", \"worker_extra\", \"ys\", \"ys_extra\", \"condition\", \"state\"). data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"data.table() Table tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-fetch-tasks-with-state-","dir":"Reference","previous_headings":"","what":"Method fetch_tasks_with_state()","title":"Rush Controller — Rush","text":"Fetch tasks different states data base. tasks different states queried time, function prevents tasks appearing twice. case worker changes state task tasks fetched. Finished tasks cached.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$fetch_tasks_with_state(   fields = c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\", \"condition\"),   states = c(\"queued\", \"running\", \"finished\", \"failed\"),   reset_cache = FALSE,   data_format = \"data.table\" )"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"fields (character()) Fields read hashes. Defaults c(\"xs\", \"ys\", \"xs_extra\", \"worker_extra\", \"ys_extra\"). states (character()) States tasks fetched. Defaults c(\"queued\", \"running\", \"finished\", \"failed\"). reset_cache (logical(1)) Whether reset cache finished tasks. data_format (character()) Returned data format. Choose \"data.table\" \"list\". default \"data.table\" \"list\" easier list columns present.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-wait-for-tasks-","dir":"Reference","previous_headings":"","what":"Method wait_for_tasks()","title":"Rush Controller — Rush","text":"Wait tasks finished. function also unblocks worker running tasks failed.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$wait_for_tasks(keys, detect_lost_workers = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character()) Keys tasks wait . detect_lost_workers (logical(1)) Whether detect failed tasks. Comes overhead.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-write-hashes-","dir":"Reference","previous_headings":"","what":"Method write_hashes()","title":"Rush Controller — Rush","text":"Writes R objects Redis hashes. function takes vectors ... input writes element field-value pair new hash. name argument defines field serialized element written. example, xs = list(list(x1 = 1, x2 = 2), list(x1 = 3, x2 = 4)) writes serialize(list(x1 = 1, x2 = 2)) field xs hash serialize(list(x1 = 3, x2 = 4)) field xs another hash. function can iterate multiple vectors simultaneously. example, xs = list(list(x1 = 1, x2 = 2), list(x1 = 3, x2 = 4)), ys = list(list(y = 3), list(y = 7)) creates two hashes fields xs ys. vectors recycled length longest vector. lists atomic vectors supported. Arguments NULL ignored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$write_hashes(..., .values = list(), keys = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"... (named list()) Lists written hashes. names arguments used fields. .values (named list()) Lists written hashes. names list used fields. keys (character()) Keys hashes. NULL new keys generated.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(character()) Keys hashes.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-read-hashes-","dir":"Reference","previous_headings":"","what":"Method read_hashes()","title":"Rush Controller — Rush","text":"Reads R Objects Redis hashes. function reads field-value pairs hashes stored keys. values hash deserialized combined list. flatten TRUE, values flattened single list e.g. list(xs = list(x1 = 1, x2 = 2), ys = list(y = 3)) becomes list(x1 = 1, x2 = 2, y = 3). reading functions combine hashes table names inner lists column names. example, xs = list(list(x1 = 1, x2 = 2), list(x1 = 3, x2 = 4)), ys = list(list(y = 3), list(y = 7)) becomes data.table(x1 = c(1, 3), x2 = c(2, 4), y = c(3, 7)).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$read_hashes(keys, fields, flatten = TRUE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character()) Keys hashes. fields (character()) Fields read hashes. flatten (logical(1)) Whether flatten list.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(list list()) outer list contains one element key. inner list combination lists stored different fields.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-read-hash-","dir":"Reference","previous_headings":"","what":"Method read_hash()","title":"Rush Controller — Rush","text":"Reads single Redis hash returns values list named fields.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$read_hash(key, fields)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"key (character(1)) Key hash. fields (character()) Fields read hash.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(list list()) outer list contains one element key. inner list combination lists stored different fields.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-is-running-task-","dir":"Reference","previous_headings":"","what":"Method is_running_task()","title":"Rush Controller — Rush","text":"Checks whether tasks status \"running\".","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$is_running_task(keys)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-is-failed-task-","dir":"Reference","previous_headings":"","what":"Method is_failed_task()","title":"Rush Controller — Rush","text":"Checks whether tasks status \"failed\".","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$is_failed_task(keys)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-29","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"keys (character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-tasks-with-state-","dir":"Reference","previous_headings":"","what":"Method tasks_with_state()","title":"Rush Controller — Rush","text":"Returns keys requested states.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$tasks_with_state(states)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-30","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"states (character()) States tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Controller — Rush","text":"(Named list character()).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Rush Controller — Rush","text":"objects class cloneable method.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Controller — Rush","text":"","code":"Rush$clone(deep = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"arguments-31","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Controller — Rush","text":"deep Whether make deep clone.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/Rush.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rush Controller — Rush","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()    rush = rsh(network_id = \"test_network\", config = config_local)    rush #> <Rush> #> * Running Workers: 0 #> * Queued Tasks: 0 #> * Queued Priority Tasks: 0 #> * Running Tasks: 0 #> * Finished Tasks: 0 #> * Failed Tasks: 0 # }"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":null,"dir":"Reference","previous_headings":"","what":"Rush Worker — RushWorker","title":"Rush Worker — RushWorker","text":"RushWorker evaluates tasks writes results data base. worker inherits Rush.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rush Worker — RushWorker","text":"Object class R6::R6Class RushWorker worker methods.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rush Worker — RushWorker","text":"worker registers data base rush network.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Rush Worker — RushWorker","text":"rush::Rush -> RushWorker","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Rush Worker — RushWorker","text":"worker_id (character(1)) Identifier worker. remote (logical(1)) Whether worker remote machine. heartbeat (callr::r_bg) Background process heartbeat.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Rush Worker — RushWorker","text":"terminated (logical(1)) Whether shutdown worker. Used worker loop determine whether continue. terminated_on_idle (logical(1)) Whether shutdown worker tasks queued. Used worker loop determine whether continue.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Rush Worker — RushWorker","text":"rush::Rush$detect_lost_workers() rush::Rush$fetch_failed_tasks() rush::Rush$fetch_finished_tasks() rush::Rush$fetch_new_tasks() rush::Rush$fetch_priority_tasks() rush::Rush$fetch_queued_tasks() rush::Rush$fetch_running_tasks() rush::Rush$fetch_tasks() rush::Rush$fetch_tasks_with_state() rush::Rush$format() rush::Rush$is_failed_task() rush::Rush$is_running_task() rush::Rush$print() rush::Rush$print_log() rush::Rush$push_failed() rush::Rush$push_priority_tasks() rush::Rush$push_tasks() rush::Rush$read_hash() rush::Rush$read_hashes() rush::Rush$read_log() rush::Rush$reconnect() rush::Rush$reset() rush::Rush$restart_workers() rush::Rush$start_local_workers() rush::Rush$start_remote_workers() rush::Rush$stop_workers() rush::Rush$tasks_with_state() rush::Rush$wait_for_finished_tasks() rush::Rush$wait_for_new_tasks() rush::Rush$wait_for_tasks() rush::Rush$wait_for_workers() rush::Rush$worker_script() rush::Rush$write_hashes()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Rush Worker — RushWorker","text":"RushWorker$new() RushWorker$push_running_tasks() RushWorker$pop_task() RushWorker$push_results() RushWorker$set_terminated() RushWorker$clone()","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Rush Worker — RushWorker","text":"Creates new instance R6 class.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$new(   network_id,   config = NULL,   remote,   worker_id = NULL,   heartbeat_period = NULL,   heartbeat_expire = NULL,   seed = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (redux::redis_config) Redis configuration options. NULL, configuration set rush_plan() used. rush_plan() called, REDIS_URL environment variable parsed. REDIS_URL set, default configuration used. See redux::redis_config details. remote (logical(1)) Whether worker started remote machine. See Rush details. worker_id (character(1)) Identifier worker. Keys redis specific worker prefixed worker id. heartbeat_period (integer(1)) Period heartbeat seconds. heartbeat updated every heartbeat_period seconds. heartbeat_expire (integer(1)) Time live heartbeat seconds. heartbeat key set expire heartbeat_expire seconds. seed (integer()) Initial seed random number generator. Either L'Ecuyer-CMRG seed (integer(7)) regular RNG seed (integer(1)). later converted L'Ecuyer-CMRG seed. NULL, seed used random number generator.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-push-running-tasks-","dir":"Reference","previous_headings":"","what":"Method push_running_tasks()","title":"Rush Worker — RushWorker","text":"Push task running tasks without queue.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$push_running_tasks(xss, extra = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"xss (list named list()) Lists arguments function e.g. list(list(x1, x2), list(x1, x2))). extra (list) List additional information stored along task e.g. list(list(timestamp), list(timestamp))).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Rush Worker — RushWorker","text":"(character()) Keys tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-pop-task-","dir":"Reference","previous_headings":"","what":"Method pop_task()","title":"Rush Worker — RushWorker","text":"Pop task queue. Task moved running tasks.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$pop_task(timeout = 1, fields = \"xs\")"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"timeout (numeric(1)) Time wait task seconds. fields (character()) Fields returned.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-push-results-","dir":"Reference","previous_headings":"","what":"Method push_results()","title":"Rush Worker — RushWorker","text":"Pushes results data base.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$push_results(keys, yss, extra = NULL)"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"keys (character(1)) Keys associated tasks. yss (named list()) List lists named results. extra (named list()) List lists additional information stored along results.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-set-terminated-","dir":"Reference","previous_headings":"","what":"Method set_terminated()","title":"Rush Worker — RushWorker","text":"Mark worker terminated. Last step worker loop worker terminates.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$set_terminated()"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Rush Worker — RushWorker","text":"objects class cloneable method.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Worker — RushWorker","text":"","code":"RushWorker$clone(deep = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/RushWorker.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rush Worker — RushWorker","text":"deep Whether make deep clone.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/filter_custom_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Custom Fields — filter_custom_fields","title":"Filter Custom Fields — filter_custom_fields","text":"Filters custom fields log events.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/filter_custom_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Custom Fields — filter_custom_fields","text":"","code":"filter_custom_fields(event)"},{"path":"https://rush.mlr-org.com/dev/reference/filter_custom_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Custom Fields — filter_custom_fields","text":"event (lgr::LogEvent) Log event.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/get_hostname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the computer name of the current host — get_hostname","title":"Get the computer name of the current host — get_hostname","text":"Returns computer name current host. First tries get computer name environment variables HOST, HOSTNAME COMPUTERNAME. fails tries get computer name function Sys.info(). Finally, fails queries computer name command uname -n. Copied R.utils package.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/get_hostname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the computer name of the current host — get_hostname","text":"","code":"get_hostname()"},{"path":"https://rush.mlr-org.com/dev/reference/get_hostname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the computer name of the current host — get_hostname","text":"character(1) hostname.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/get_hostname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the computer name of the current host — get_hostname","text":"","code":"get_hostname() #>          nodename  #> \"pkrvmjbmru5nbw0\""},{"path":"https://rush.mlr-org.com/dev/reference/heartbeat.html","id":null,"dir":"Reference","previous_headings":"","what":"Heartbeat Loop — heartbeat","title":"Heartbeat Loop — heartbeat","text":"heartbeat loop updates heartbeat key worker still alive. kill key set, worker killed. function called callr session.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/heartbeat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heartbeat Loop — heartbeat","text":"","code":"heartbeat(   network_id,   config,   worker_id,   heartbeat_key,   heartbeat_period,   heartbeat_expire,   pid )"},{"path":"https://rush.mlr-org.com/dev/reference/heartbeat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heartbeat Loop — heartbeat","text":"network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (redux::redis_config) Redis configuration options. worker_id (character(1)) Identifier worker. Keys redis specific worker prefixed worker id. heartbeat_key (character(1)) Heartbeat key. heartbeat_period (integer(1)) Period heartbeat seconds. heartbeat updated every heartbeat_period seconds. heartbeat_expire (integer(1)) Time live heartbeat seconds. heartbeat key set expire heartbeat_expire seconds. pid (integer(1)) Process ID worker.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/heartbeat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heartbeat Loop — heartbeat","text":"NULL","code":""},{"path":"https://rush.mlr-org.com/dev/reference/remove_rush_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Rush Plan — remove_rush_plan","title":"Remove Rush Plan — remove_rush_plan","text":"Removes rush plan set rush_plan().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/remove_rush_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Rush Plan — remove_rush_plan","text":"","code":"remove_rush_plan()"},{"path":"https://rush.mlr-org.com/dev/reference/remove_rush_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Rush Plan — remove_rush_plan","text":"Invisible TRUE. Function called side effects.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/remove_rush_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Rush Plan — remove_rush_plan","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{   config_local = redux::redis_config()   rush_plan(config = config_local, n_workers = 2)   remove_rush_plan() # }"},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":null,"dir":"Reference","previous_headings":"","what":"Synctatic Sugar for Rush Controller Construction — rsh","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"Function construct Rush controller.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"","code":"rsh(network_id = NULL, config = NULL, seed = NULL, ...)"},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (redux::redis_config) Redis configuration options. NULL, configuration set rush_plan() used. rush_plan() called, REDIS_URL environment variable parsed. REDIS_URL set, default configuration used. See redux::redis_config details. seed (integer()) Initial seed random number generator. Either L'Ecuyer-CMRG seed (integer(7)) regular RNG seed (integer(1)). later converted L'Ecuyer-CMRG seed. NULL, seed used random number generator. ... (ignored).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"Rush controller.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rsh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synctatic Sugar for Rush Controller Construction — rsh","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()    rush = rsh(network_id = \"test_network\", config = config_local)    rush #> <Rush> #> * Running Workers: 0 #> * Queued Tasks: 0 #> * Queued Priority Tasks: 0 #> * Running Tasks: 0 #> * Finished Tasks: 0 #> * Failed Tasks: 0 # }"},{"path":"https://rush.mlr-org.com/dev/reference/rush-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rush: Rapid Asynchronous and Distributed Computing — rush-package","title":"rush: Rapid Asynchronous and Distributed Computing — rush-package","text":"Package tackle large-scale problems asynchronously across distributed network. Employing database centric model, rush enables workers communicate tasks results shared 'Redis' database. Key features include low task overhead, efficient caching, robust error handling. package powers asynchronous optimization algorithms 'bbotk' 'mlr3tuning' packages.","code":""},{"path":[]},{"path":"https://rush.mlr-org.com/dev/reference/rush-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rush: Rapid Asynchronous and Distributed Computing — rush-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) [copyright holder]","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for Rush Objects — rush_assertions","title":"Assertion for Rush Objects — rush_assertions","text":"assertion functions ensure right class attribute, optionally additional properties. assertion fails, exception raised. Otherwise, input object returned invisibly.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for Rush Objects — rush_assertions","text":"","code":"assert_rush(rush, null_ok = FALSE)  assert_rushs(rushs, null_ok = FALSE)  assert_rush_worker(worker, null_ok = FALSE)  assert_rush_workers(workers, null_ok = FALSE)"},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion for Rush Objects — rush_assertions","text":"rush (Rush). null_ok (logical(1)). TRUE, NULL allowed. rushs (list Rush). worker (RushWorker). workers (list RushWorker).","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertion for Rush Objects — rush_assertions","text":"Exception assertion fails, otherwise input object invisibly.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_assertions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assertion for Rush Objects — rush_assertions","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()    rush = rsh(network_id = \"test_network\", config = config_local)     assert_rush(rush) # }"},{"path":"https://rush.mlr-org.com/dev/reference/rush_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Rush Available — rush_available","title":"Rush Available — rush_available","text":"Returns TRUE redis config file (redux::redis_config) set rush_plan().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rush Available — rush_available","text":"","code":"rush_available()"},{"path":"https://rush.mlr-org.com/dev/reference/rush_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rush Available — rush_available","text":"logical(1)","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rush Available — rush_available","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{   config_local = redux::redis_config()   rush_plan(config = config_local, n_workers = 2)   rush_available() #> [1] TRUE # }"},{"path":"https://rush.mlr-org.com/dev/reference/rush_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Rush Config — rush_config","title":"Get Rush Config — rush_config","text":"Returns rush config set rush_plan().","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Rush Config — rush_config","text":"","code":"rush_config()"},{"path":"https://rush.mlr-org.com/dev/reference/rush_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Rush Config — rush_config","text":"list() stored configuration.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Rush Config — rush_config","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{   config_local = redux::redis_config()   rush_plan(config = config_local, n_workers = 2)   rush_config() #> $config #> Redis configuration: #>   - url: redis://127.0.0.1:6379 #>   - scheme: redis #>   - host: 127.0.0.1 #>   - port: 6379 #>   - path:  #>   - password:  #>   - db:  #>   - timeout:  #>  #> $n_workers #> [1] 2 #>  #> $lgr_thresholds #> NULL #>  #> $lgr_buffer_size #> NULL #>  #> $large_objects_path #> NULL #>  #> $start_worker_timeout #> NULL #>  #> $worker_type #> [1] \"local\" #>  # }"},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Rush Plan — rush_plan","title":"Create Rush Plan — rush_plan","text":"Stores number workers Redis configuration options (redux::redis_config) Rush. function tests connection Redis throws error connection fails. function usually used third-party packages setup workers started.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Rush Plan — rush_plan","text":"","code":"rush_plan(   n_workers = NULL,   config = NULL,   lgr_thresholds = NULL,   lgr_buffer_size = NULL,   large_objects_path = NULL,   worker_type = \"local\" )"},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Rush Plan — rush_plan","text":"n_workers (integer(1)) Number workers started. config (redux::redis_config) Configuration options used connect Redis. NULL, REDIS_URL environment variable parsed. REDIS_URL set, default configuration used. See redux::redis_config details. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. large_objects_path (character(1)) path directory large objects stored. worker_type (character(1)) type worker use. Options \"local\" start processx, \"remote\" use mirai \"script\" get script run.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Rush Plan — rush_plan","text":"list() stored configuration.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/rush_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Rush Plan — rush_plan","text":"","code":"# This example is not executed since Redis must be installed # \\donttest{    config_local = redux::redis_config()    rush_plan(config = config_local, n_workers = 2)     rush = rsh(network_id = \"test_network\")    rush #> <Rush> #> * Running Workers: 0 #> * Queued Tasks: 0 #> * Queued Priority Tasks: 0 #> * Running Tasks: 0 #> * Finished Tasks: 0 #> * Failed Tasks: 0 # }"},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a worker — start_worker","title":"Start a worker — start_worker","text":"Starts worker. function loads globals packages, initializes RushWorker instance invokes worker loop. function called $start_local_workers() user creating worker script $create_worker_script(). Use caution. global environment changed.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a worker — start_worker","text":"","code":"start_worker(   worker_id = NULL,   network_id,   config = NULL,   remote = TRUE,   lgr_thresholds = NULL,   lgr_buffer_size = 0,   heartbeat_period = NULL,   heartbeat_expire = NULL,   message_log = NULL,   output_log = NULL )"},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a worker — start_worker","text":"worker_id (character(1)) Identifier worker. Keys redis specific worker prefixed worker id. network_id (character(1)) Identifier rush network. Controller workers must instance id. Keys Redis prefixed instance id. config (list()) Configuration Redis connection. remote (logical(1)) Whether worker remote machine. lgr_thresholds (named character() | named numeric()) Logger threshold workers e.g. c(\"mlr3/rush\" = \"debug\"). lgr_buffer_size (integer(1)) default (lgr_buffer_size = 0), log messages directly saved Redis data store. lgr_buffer_size > 0, log messages buffered saved Redis data store buffer full. improves performance logging. heartbeat_period (integer(1)) Period heartbeat seconds. heartbeat updated every heartbeat_period seconds. heartbeat_expire (integer(1)) Time live heartbeat seconds. heartbeat key set expire heartbeat_expire seconds. message_log (character(1)) Path message log files e.g. /tmp/message_logs/ message log files named message_<worker_id>.log. NULL, messages, warnings errors stored. output_log (character(1)) Path output log files e.g. /tmp/output_logs/ output log files named output_<worker_id>.log. NULL, output stored.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a worker — start_worker","text":"NULL","code":""},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Start a worker — start_worker","text":"function initializes connection Redis data base. loads packages copies globals global environment worker. function initialize RushWorker instance starts worker loop.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/start_worker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a worker — start_worker","text":"","code":"# This example is not executed since Redis must be installed if (FALSE) { # \\dontrun{   rush::start_worker(    network_id = 'test-rush',    remote = TRUE,    url = 'redis://127.0.0.1:6379',    scheme = 'redis',    host = '127.0.0.1',    port = '6379') } # }"},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Large Objects — store_large_object","title":"Store Large Objects — store_large_object","text":"Store large objects disk return reference object.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Large Objects — store_large_object","text":"","code":"store_large_object(obj, path)"},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store Large Objects — store_large_object","text":"obj () Object store. path (character(1)) Path store object.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store Large Objects — store_large_object","text":"list() class \"rush_large_object\" name path stored object.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/store_large_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Large Objects — store_large_object","text":"","code":"obj = list(a = 1, b = 2) rush_large_object = store_large_object(obj, tempdir())"},{"path":"https://rush.mlr-org.com/dev/reference/with_rng_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Set RNG Sate before Running a Function — with_rng_state","title":"Set RNG Sate before Running a Function — with_rng_state","text":"function sets rng state running function. Use caution. global environment changed.","code":""},{"path":"https://rush.mlr-org.com/dev/reference/with_rng_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set RNG Sate before Running a Function — with_rng_state","text":"","code":"with_rng_state(fun, args, seed)"},{"path":"https://rush.mlr-org.com/dev/reference/with_rng_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set RNG Sate before Running a Function — with_rng_state","text":"fun (function) Function run. args (list) Arguments pass fun. seed (integer) RNG state set running fun.","code":""},{"path":[]},{"path":"https://rush.mlr-org.com/dev/reference/with_rng_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set RNG Sate before Running a Function — with_rng_state","text":"","code":"with_rng_state(runif, list(n = 1), .Random.seed) #> [1] 0.9805397"},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-development-version","dir":"Changelog","previous_headings":"","what":"rush (development version)","title":"rush (development version)","text":"feat: Output message logs can written files now via message_log output_log arguments. compatibility: lgr 0.5.0 BREAKING CHANGE: mlr3 ecosystem base logger now named mlr3. mlr3/rush logger child mlr3 logger used logging messages rush package.","code":""},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-020","dir":"Changelog","previous_headings":"","what":"rush 0.2.0","title":"rush 0.2.0","text":"CRAN release: 2025-05-30 feat: Worker can started mirai package now.","code":""},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-012","dir":"Changelog","previous_headings":"","what":"rush 0.1.2","title":"rush 0.1.2","text":"CRAN release: 2024-11-06 feat: Add $reconnect() method.","code":""},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-011","dir":"Changelog","previous_headings":"","what":"rush 0.1.1","title":"rush 0.1.1","text":"CRAN release: 2024-07-05 fix: Rush class exported. fix: R6 package imported.","code":""},{"path":"https://rush.mlr-org.com/dev/news/index.html","id":"rush-010","dir":"Changelog","previous_headings":"","what":"rush 0.1.0","title":"rush 0.1.0","text":"CRAN release: 2024-06-20 Initial CRAN submission.","code":""}]

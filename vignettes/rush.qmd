---
title: "rush - Asynchronous and Distributed Computing"
---

```{r}
#| include: false
r = redux::hiredis()
r$FLUSHDB()
```


*rush* is a package designed to solve large-scale problems asynchronously across a distributed network.
Employing a database centric model, rush enables workers to communicate tasks and their results over a shared [`Redis`](https://redis.io/) database.
This article demonstrates how to use `rush` with 3 different examples.

# Random Search

We start with a simple example of a random search to optimize the Branin function in parallel.
A random search does not yet really benefit from a rush network, but it is well suited as a simple example.
The classic Branin function (also called the Branin-Hoo function) is a well-known benchmark problem in global optimization.
It is a two-dimensional function that is non-convex, multimodal, and has three global minima.
The function is a toy example for optimization thats fast to evaluate but not too simple to be solved.

```{r}
branin = function(x1, x2) {
  (x2 - 5.1 / (4 * pi^2) * x1^2 + 5 / pi * x1 - 6)^2 + 10 * (1 - 1 / (8 * pi)) * cos(x1) + 10
}
```

The Branin function is usually evaluated on the domain $x_1 \in [-5, 10]$ and $x_2 \in [0, 15]$.

![](branin.png)

## Worker Loop

We start by implementing the `worker_loop` function.
As the name suggests, the `worker_loop` function is a loop that runs on each worker.
Usually, the loop iteratively draws new tasks, evaluates them, and pushes the results back to the Redis database.
The only argument of the `worker_loop` function is the `RushWorker` object which provides methods to communicate with the Redis database.
In our example, the worker draws a random point, creates a task from the point, evaluates it using the Branin function, and pushes the result back to the Redis database.
The optimization stops after 100 tasks are evaluated.

```{r}
wl_random_search = function(rush) {

  while(rush$n_finished_tasks < 100) {

    xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))
    key = rush$push_running_tasks(xss = list(xs))

    ys = list(y = branin(xs$x1, xs$x2))
    rush$push_results(key, yss = list(ys))
  }
}
```

The most important methods of the `RushWorker` are the `$push_running_tasks()` and `$push_results()` methods.
The first method `$push_running_tasks()` creates a new task in the Redis database.
Since it is evaluated next, the task is marked as running.
The `$push_running_tasks()` method returns a unique key that is used to identify the task.
The second method `$push_results()` is used to push the results back to the Redis database.
It takes the key of the task and a list of results.
To mark the task as running is not important for a random search, but it is crucial for more sophisticated algorithms that use the tasks of other workers to decide which task to evaluate next.
For example, Bayesian optimization algorithms would sample the next point further away from the previous points to explore the search space.
The `$n_finished_tasks` shows how many tasks are finished and is used to stop the worker loop.

## Tasks

Tasks are the unit in which workers exchange information.
The main components of a task are the key, computational state, input (`xs`), and result (`ys`).
The key is a unique identifier for the task.
It identifies the task in the Redis database.
The four possible computational states are `"running"`, `"finished"`, `"failed"`, and `"queued"`.
The `$push_running_tasks()` method marks it as `"running"` and returns the key of the task.
The `$push_results()` method marks a task as `"finished"` and stores the result.
Failed tasks can be marked as `"failed"` with the `$push_failed()` method.
The error catching must be implemented in the worker loop (see [Error Handling](error_handling.html) for more details).
Tasks can also be pushed to a queue with the `$push_tasks()` method which sets the state to `"queued"`.
The last example gives more details on the task queue and the different methods to push and pop tasks.
The input `xs` and result `ys` are lists that can contain arbitrary data.
Usually the methods of the `RushWorker` work on multiple tasks at once, so `xxs` and `yss` are lists of inputs and results.

## Controller

The `Rush` controller starts, observes, and stops the workers in the network.
The controller is initialized with the `rsh()` function.
The `rsh()` function takes a the network id and a `config` argument.
The `config` argument is a configuration file which is used to connect to the Redis database via the `redux` package.

```{r}
library(rush)

config = redux::redis_config()

rush = rsh(
  network = "test-random-search",
  config = config)
```

We can now start workers with the `$start_local_workers()` method.
The method takes the `worker_loop` and the number of workers.
The workers are started locally with the `processx` package but it is also possible to start workers on a remote machine (see [Rush Controller](rush_controller.html)).
We need to export the `branin` function to the workers, so we set the `globals` argument to `"branin"`.
More on globals and the different worker types can be found in the [Rush Controller](rush_controller.html) vignette.

```{r}
rush$start_local_workers(
  worker_loop = wl_random_search,
  n_workers = 4,
  globals = "branin")

rush
```

The optimization is quickly finished and we retrieve the results.
The `$fetch_finished_tasks()` method fetches all finished tasks from the database.
The method returns a `data.table()` with the key, input, and result.
The `pid` and `worker_id` column are additional information that are stored when the task is created.
The `worker_id` is the id of the worker that evaluated the task and the `pid` is the process id of that worker.
Further extra information can be passed as `list`s to the `$push_running_tasks()` and `$push_results()` methods via the `extra` argument.

```{r}
#| include: false
Sys.sleep(5)
```

```{r}
rush$fetch_finished_tasks()[order(y)]
```

The rush controller shows us how many workers are running and how many tasks are in each state.
We can see that 103 tasks are finished and the workers are stopped.
The number of finished tasks is slightly higher than 100 because when multiple workers run in parallel, they independently check the stopping condition.
If several workers check the condition at nearly the same moment when there are 99 finished tasks, they might all create new tasks before any of them sees the updated count of 100.
Moreover, new tasks are created as long as the evaluation of the 100th task is not finished.

```{r}
rush
```

We can stop the workers and reset the database with the `$reset()` method.

```{r}
rush$reset()

rush
```

To learn more about starting, stopping and observing workers, see the [Rush Controller](rush_controller.html) vignette.

# Median Stopping

The random search is very simple example that does not use any information from previous tasks and hence does not need the communication between workers.
Let's write a more sophisticated algorithm that uses the results of finished tasks to decide whether to continue with the current task.
For this purpose, we introduce a fidelity parameter to the Branin function.
The fidelity parameter in the `branin_wu` function modifies the behavior of the classic Branin function.
The fidelity parameter is a value between 0 and 1 that controls the exactness of the evaluation.
When the fidelity is 1, the function evaluates the true Branin function.
For lower fidelity levels, the function becomes distorted, representing a "cheaper" but less precise evaluation.
Real optimization problems often have different fidelity levels, where the evaluation of the objective function can be costly or time-consuming.
The fidelity allows us to trade-off between the evaluation cost and the precision of the evaluation.

```{r}
branin_wu = function(x1, x2, fidelity) {
  (x2 - (5.1 / (4 * pi^2) - 0.1 * (1 - fidelity)) * x1^2 + 5 / pi * x1 - 6) ^ 2 +  10 * (1 - 1 / (8 * pi)) * cos(x1) + 10
}
```

## Worker Loop

We implement a worker loop that uses the fidelity parameter to evaluate the Branin function.
The algorithm starts by drawing a new task.
The worker loop then evaluates the task at increasing fidelity level.
In each iteration, the performance of the task is compared to the other tasks in the network at the same fidelity level.
If the performance of the task is worse than the median performance, the worker stops the evaluation of the task and samples a new task.
This is a simple median stopping rule that can be used to stop the optimization process early if the current configuration is not promising.

```{r}
wl_median_stopping = function(rush) {
  while(rush$n_finished_tasks < 100) {
    xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))

    for (fidelity in seq(0.1, 1, by = 0.1)) {
      xs$fidelity = fidelity
      key = rush$push_running_tasks(xss = list(xs))
      ys = list(y = branin_wu(xs$x1, xs$x2, xs$fidelity))
      rush$push_results(key, yss = list(ys))

      tasks = rush$fetch_finished_tasks()
      if (ys$y > median(tasks[fidelity == current_fidelity, y])) break
    }
  }
}
```

The `$fetch_finished_tasks()` method fetches all finished tasks from the database.
The median stopping rule compares the performance of the current task with the median performance of the other workers at the same fidelity level.
If the performance of the current task is worse than the median performance, the algorithm stops the evaluation of the current task and samples a new task.
The fidelity level is increased by 0.1 until the fidelity level is 1.
The algorithm stops after 100 evaluated tasks.

We start the optimization process like before by starting 4 local workers that run the median stopping worker loop.

```{r}
config = redux::redis_config()

rush = rsh(
  network = "test-median-stopping",
  config = config)

rush$start_local_workers(
  worker_loop = wl_median_stopping,
  n_workers = 4,
  globals = "branin_wu")

```

We fetch the finished tasks and sort them by the objective value.

```{r}
#| include: false
Sys.sleep(5)
```

```{r}
rush$fetch_finished_tasks()[order(y)]
```

We stop the workers and reset the database.

```{r}
rush$reset()
```

# Bayesian Optimization

We implement Asynchronous Distributed Bayesian Optimization (ADBO) [@egele_2023] next.
This example shows how workers use information about running tasks and introduces task queues.
ADBO runs sequential [Bayesian optimization](https://mlr3book.mlr-org.com/chapters/chapter5/advanced_tuning_methods_and_black_box_optimization.html#sec-bayesian-optimization) on multiple workers in parallel.
Each worker maintains its own surrogate model (a random forest) and selects the next hyperparameter configuration by maximizing the upper confidence bounds acquisition function.
To promote a varying exploration-exploitation tradeoff between the workers, the acquisition functions are initialized with different lambda values ranging from 0.1 to 10.
When a worker completes an evaluation, it asynchronously sends the result to its peers via a Redis data base; each worker then updates its local model with this shared information.
This decentralized design enables workers to proceed independently; eliminating the need for a central coordinator that could become a bottleneck in large-scale optimization scenarios.

We first create a new rush network.

```{r}
config = redux::redis_config()

rush = rsh(
  network = "test-bayesian-optimization",
  config = config)
```

## Queues

The queue system works by pushing and popping tasks from a queue.
The `$push_task()` method creates new tasks and pushes them to the queue.
In this example, we draw an initial design of 25 points and push them to the queue.

```{r}
xss = replicate(25, list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15)), simplify = FALSE)

rush$push_tasks(xss = xss)

rush
```

We see 25 queued tasks in the database.
To retrieve the tasks from the queue, we need to implement the `$pop_task()` method in the worker loop.

## Worker Loop

The worker loop pops tasks with the `$pop_task()` method from the queue.
The task is evaluated and the results are pushed back to the database with the `$push_results()` method.
If there are no more tasks in the queue, the `$pop_task()` method returns `NULL` and the worker loop starts the Bayesian optimization.
First, a lambda value for the acquisition function is sampled between 0.01 and 10.
Then all running and finished tasks are fetched from the database.
Using `rush$fetch_tasks_with_state()` instead of using `$fetch_running_tasks()` and `$fetch_finished_tasks()` is important because it prevents tasks from appearing twice.
This could be the case if a worker changes the state of a task from `"running"` to `"finished"` while the tasks are being fetched.
The missing y values of the running tasks are imputed with the mean of the finished tasks.
Then the surrogate random forest model is fitted to the data and the acquisition function is optimized to find the next task.
Marking the task as running is important for the Bayesian optimization algorithm, as it uses the already sampled points of the other workers to decide which task to evaluate next.
The task is evaluated and the results are pushed back to the database.
We stop the optimization process after 100 evaluated tasks.

```{r}
wl_bayesian_optimization = function(rush) {
  repeat {
    task = rush$pop_task()
    if (is.null(task)) break
    ys = list(y = branin(task$xs$x1, task$xs$x2))
    rush$push_results(task$key, yss = list(ys))
  }

  lambda = runif(1, 0.01, 10)

  while(rush$n_finished_tasks < 100) {

    xydt = rush$fetch_tasks_with_state(states = c("running", "finished"))
    mean_y = mean(xydt$y, na.rm = TRUE)
    xydt["running", y := mean_y, on = "state"]

    surrogate = ranger::ranger(y ~ x1 + x2, data = xydt, num.trees = 100L, keep.inbag = TRUE)
    xdt = data.table::data.table(x1 = runif(1000, -5, 10), x2 = runif(1000, 0, 15))
    p = predict(surrogate, xdt, type = "se", se.method = "jack")
    cb = p$predictions - lambda * p$se
    xs = as.list(xdt[which.min(cb)])
    key = rush$push_running_tasks(xss = list(xs))

    ys = list(y = branin(xs$x1, xs$x2))
    rush$push_results(key, yss = list(ys))
  }
}
```

We start the optimization process by starting 4 local workers that run the Bayesian optimization worker loop.

```{r}
rush$start_local_workers(
  worker_loop = wl_bayesian_optimization,
  n_workers = 4,
  globals = "branin")

```

The optimization is quickly finished and we retrieve the results.

```{r}
#| include: false
Sys.sleep(5)
```

```{r}
rush$fetch_finished_tasks()[order(y)]
```

```{r}
#| include: false
rush$reset()
```

how to debug
tags for jobs

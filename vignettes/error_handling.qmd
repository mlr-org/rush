---
title: "rush - Error Handling and Debugging"
---

```{r error_handling-001}
#| include: false
r = redux::hiredis()
r$FLUSHDB()
options(datatable.prettyprint.char = 10L)
```

*rush*  is equipped with an advanced error-handling mechanism designed to manage and mitigate errors encountered during the execution of tasks.
It adeptly handles a range of error scenarios, from standard R errors to more complex issues such as segmentation faults and network errors.t
If all of this fails, the user can manually debug the worker loop.

# Simple R Errors {#sec-error-handling-simple}

To illustrate the error-handling mechanism in rush, we employ the random search example from the main [vignette](rush.html).
This time we introduce a random error with a 50% probability.
Within the worker loop, users are responsible for catching errors and marking the corresponding task as `"failed"` using the `$push_failed()` method.

```{r error_handling-002}
library(rush)

branin = function(x1, x2) {
  (x2 - 5.1 / (4 * pi^2) * x1^2 + 5 / pi * x1 - 6)^2 + 10 * (1 - 1 / (8 * pi)) * cos(x1) + 10
}

wl_random_search = function(rush) {

  while(rush$n_finished_tasks < 100) {

    xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))
    key = rush$push_running_tasks(xss = list(xs))

    tryCatch({
      if (runif(1) < 0.5) stop("Random Error")
      ys = list(y = branin(xs$x1, xs$x2))
      rush$push_results(key, yss = list(ys))
    }, error = function(e) {
      condition = list(message = e$message)
      rush$push_failed(key, conditions = list(condition))
    })

    ys = list(y = branin(xs$x1, xs$x2))
    rush$push_results(key, yss = list(ys))
  }
}
```

We start the workers.

```{r error_handling-003}
rush = rsh(
  network = "test-simply-error",
  config = redux::redis_config())

rush$start_local_workers(
  worker_loop = wl_random_search,
  n_workers = 4,
  globals = "branin")
```

```{r error_handling-004}
#| include: false
Sys.sleep(1)
```

When an error occurs, the task is marked as `"failed"`, and the error message is stored in the `"message"` column.
This approach ensures that errors do not interrupt the overall execution process.
It allows for subsequent inspection of errors and the reevaluation of failed tasks as necessary.

```{r error_handling-005}
rush$fetch_failed_tasks()
```

# Handling Failing Workers {#sec-error-handling-workers}

The rush package provides mechanisms to address situations in which workers fail due to crashes or lost connections.
Such failures may result in tasks remaining in the "running" state indefinitely.
To illustrate this, we define a function that simulates a segmentation fault by terminating the worker process.

```{r error_handling-006}
wl_failed_worker = function(rush) {
  xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))
  key = rush$push_running_tasks(xss = list(xs))

  tools::pskill(Sys.getpid(), tools::SIGKILL)
}

rush = rsh(network = "test-failed-workers")

worker_ids =  rush$start_local_workers(
  worker_loop = wl_failed_worker,
  n_workers = 2)
```

```{r error_handling-007}
#| include: false
Sys.sleep(1)
```

The package offers the `$detect_lost_workers()` method, which is designed to identify and manage these occurrences.

```{r error_handling-008}
rush$detect_lost_workers()
```

This method works for workers started with `$start_local_workers()` and `$start_remote_workers()`.
Workers started with `$worker_script()` must be started with a heartbeat mechanism (see [vignette](controller.html#sec-script-error-handling)).

The `$detect_lost_workers()` method also supports automatic restarting of lost workers when the option `restart_workers = TRUE` is specified.
Alternatively, lost workers may be restarted manually using the `$restart_workers()` method.
Automatic restarting is only available for local workers.
When a worker fails, the status of the task that caused the failure is set to `"failed"`.

```{r error_handling-009}
rush$fetch_failed_tasks()
```

# Debugging

When the worker loop fails unexpectedly due to an uncaught error, it is necessary to debug the worker loop.
Consider the following example, in which the worker loop randomly generates an error.

```{r error_handling-010}
wl_error = function(rush) {

  repeat {
    x1 = runif(1)
    x2 = runif(1)

    xss = list(list(x1 = x1, x2 = x2))

    key = rush$push_running_tasks(xss = xss)

    if (x1 > 0.90) {
      stop("Unexpected error")
    }

    rush$push_results(key, yss = list(list(y = x1 + x2)))
  }
}
```

To begin debugging, the worker loop is executed locally.
This requires the initialization of a `RushWorker` instance.
Although the rush worker is typically created during worker initialization, it can also be instantiated manually.
The worker instance is then passed as an argument to the worker loop.

```{r error_handling-011}
#| error: true
rush_worker = RushWorker$new("test", remote = FALSE)

wl_error(rush_worker)
```

When an error is raised in the main process, the `traceback()` function can be invoked to examine the stack trace.
Breakpoints may also be set within the worker loop to inspect the program state.
This approach provides substantial control over the debugging process.
Certain errors, such as missing packages or undefined global variables, may not be encountered when running locally.
However, such issues can be readily identified using the `$detect_lost_workers()` method.

```{r error_handling-012}
rush = rsh("test-error")

rush$start_local_workers(
  worker_loop = wl_error,
  n_workers = 1
)
```

```{r error_handling-013}
#| include: false
Sys.sleep(1)
```

The `$detect_lost_workers()` method can be used to identify lost workers.

```{r error_handling-014}
rush$detect_lost_workers()
```



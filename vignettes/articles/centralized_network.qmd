---
title: "Centralized Networks"
vignette: >
  %\VignetteIndexEntry{Centralized Networks}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

*rush* can also be used as a centralized network.
In such a network, a central controller creates tasks and distributes them to the workers.
The workers evaluate the tasks and send the results back to the controller.
At the heart of a centralized network is a queue that holds the tasks to be evaluated.


The `$push_tasks()` method pushes tasks to the queue and the `$pop_task()` method pops tasks from the queue.
We know the `$push_results()` method already from the decentralized network.

The `worker_loop` is different in a centralized network.
Instead of creating new tasks, the worker pops tasks from the queue.
The task is evaluated and the results are sent to the data base.
The controller usually fetches the results from the database and and creates new tasks.

```{r}
worker_loop = function(rush) {
  while(!rush$terminated) {
    task = rush$pop_task()
    if (!is.null(task)) {
      ys = list(y = branin(task$xs$x1, task$xs$x2))
      rush$push_results(task$key, yss = list(ys))
    }
  }
}
```


```{r}
branin = function(x1, x2) {
  (x2 - 5.1 / (4 * pi^2) * x1^2 + 5 / pi * x1 - 6)^2 + 10 * (1 - 1 / (8 * pi)) * cos(x1) + 10
}
```

```{r}
# Connection to the Redis database
config = redux::redis_config()

# Initialize rush controller
rush = rsh(
  network = "centralized-random-search",
  config = config)

rush$start_local_workers(
  worker_loop = worker_loop,
  n_workers = 4,
  globals = "branin")
```

```{r}
xs = list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15))

rush$push_tasks(xss = list(xs))
```

```{r}
#| include: false
Sys.sleep(1)
```

```{r}
rush$fetch_finished_tasks()
```

```{r}
xss = replicate(100, list(x1 = runif(1, -5, 10), x2 = runif(1, 0, 15)), simplify = FALSE)

rush$push_tasks(xss = xss)
```

```{r}
#| include: false
Sys.sleep(1)
```

```{r}
rush$fetch_finished_tasks()
```

---
title: "Benchmark rush"
format:
  html:
    toc: true
    html-math-method: katex
---

```{r setup}
library(rush)
library(data.table)
library(mlr3misc)
library(microbenchmark)

options(width = 200)

lgr::get_logger("rush")$set_threshold("warn")

xdt_1 = data.table(x1 = runif(1), x2 = runif(1))
xdt_10 = data.table(x1 = runif(10), x2 = runif(10))
xdt_100 = data.table(x1 = runif(100), x2 = runif(100))
xdt_1000 = data.table(x1 = runif(1000), x2 = runif(1000))
xdt_10000 = data.table(x1 = runif(10000), x2 = runif(10000))

xss_1 = transpose_list(xdt_1)
xss_10 = transpose_list(xdt_10)
xss_100 = transpose_list(xdt_100)
xss_1000 = transpose_list(xdt_1000)
xss_10000 = transpose_list(xdt_10000)

extra_1 = list(list(extra1 = runif(1)))
extra_10 = replicate(10, list(list(extra1 = runif(1))))
extra_100 = replicate(100, list(list(extra1 = runif(1))))
extra_1000 = replicate(1000, list(list(extra1 = runif(1))))
extra_10000 = replicate(10000, list(list(extra1 = runif(1))))

start_flush_redis = function() {
  future::plan("sequential")
  config = redux::redis_config()
  r = redux::hiredis(config)
  r$FLUSHDB()
  config
}
```

# Initializing Rush Controller

```{r}
config = start_flush_redis()

Rush$new("benchmark", config)

microbenchmark(
  rush = Rush$new("benchmark", config),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
 expr      min        lq      mean    median        uq      max neval
 rush 0.523992 0.5433025 0.5723284 0.5588205 0.5872255 0.832138   100

# Initializing Rush Worker

```{r}
config = start_flush_redis()

RushWorker$new("benchmark", config, host = "local")

microbenchmark(
  rush = RushWorker$new("benchmark", config, host = "local"),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
 expr     min       lq     mean    median        uq      max neval
 rush 0.76714 0.803569 1.004088 0.8573675 0.9215805 8.033009   100

# Starting Worker Loop

Measures time until worker is ready to receive tasks.

```{r}
config = start_flush_redis()
rush = Rush$new("benchmark", config)
fun = function(x1, x2, ...) list(y = x1 + x2)
future::plan("multisession", workers = 2)


rush$start_workers(fun, n_workers = 1, host = "local")
rush$await_workers(1)

setup = function() {
  start_flush_redis()
  future::plan("multisession", workers = 2)
}

microbenchmark(
  rush = {rush$start_workers(fun, n_workers = 1, host = "local"); rush$await_workers(1)},
  times = 100,
  unit = "ms",
  setup = setup()
)
```

Unit: milliseconds
 expr      min       lq     mean   median      uq      max neval
 rush 124.3127 167.4303 168.8907 169.3986 173.227 253.2677   100

# Starting Rush Worker with Heatbeat

```{r}
config = start_flush_redis()
rush = Rush$new("benchmark", config)
fun = function(x1, x2, ...) list(y = x1 + x2)
future::plan("multisession", workers = 2)


rush$start_workers(fun, n_workers = 1, host = "local", heartbeat_period = 3)
rush$await_workers(1)

setup = function() {
  start_flush_redis()
  future::plan("multisession", workers = 2)
}

microbenchmark(
  rush = {rush$start_workers(fun, n_workers = 1, host = "local", heartbeat_period = 3); rush$await_workers(1)},
  times = 100,
  unit = "ms",
  setup = setup()
)
```

Unit: milliseconds
 expr     min       lq     mean   median       uq     max neval
 rush 157.179 211.6831 214.0352 212.8772 215.9109 290.647   100

# Push Task

Push different number of tasks to the queue.

```{r}
config = start_flush_redis()
rush = Rush$new("benchmark", config)

rush$push_tasks(list(xss_1))
rush$reset()

microbenchmark(
  push_1 = rush$push_tasks(list(xss_1)),
  push_10 = rush$push_tasks(xss_10),
  push_100 = rush$push_tasks(xss_100),
  push_1000 = rush$push_tasks(xss_1000),
  push_10000 = rush$push_tasks(xss_10000),
  times = 100,
  unit = "ms",
  setup = rush$reset()
)
```

Unit: milliseconds
       expr        min         lq        mean      median          uq        max neval
     push_1   0.145765   0.173194   0.2394388   0.2058305   0.3041580   0.600139   100
    push_10   0.244638   0.315805   0.3709723   0.3495255   0.4175765   0.605313   100
   push_100   1.205379   1.378823   1.7266241   1.4685175   1.5520765  18.895950   100
  push_1000  10.323225  10.964326  13.9723187  12.4105955  16.6341870  38.083744   100
 push_10000 106.844504 117.593395 137.3286617 131.2773305 147.4078935 264.354706   100

Pushing a task to the worker takes around 0.2 ms.
The time grows slower than linearly with the number of tasks.
Probably because of pipelining in redis.

# Push Task with Extra

Push different number of tasks with one extra field to the queue.

```{r}
config = start_flush_redis()
rush = Rush$new("benchmark", config)

microbenchmark(
  push_1 = rush$push_tasks(list(xss_1), extra = extra_1),
  push_10 = rush$push_tasks(xss_10, extra = extra_10),
  push_100 = rush$push_tasks(xss_100, extra = extra_100),
  push_1000 = rush$push_tasks(xss_1000, extra = extra_1000),
  push_10000 = rush$push_tasks(xss_10000, extra = extra_10000),
  times = 100,
  setup = rush$reset(),
  unit = "ms"
)
```

Unit: milliseconds
       expr        min          lq        mean      median          uq        max neval
     push_1   0.161759   0.2061935   0.2872769   0.2618715   0.3502380   0.560863   100
    push_10   0.292578   0.3535015   0.4450438   0.4028660   0.5117845   0.748419   100
   push_100   1.530264   1.7044510   2.2125521   1.8272685   1.9836055   8.858661   100
  push_1000  13.710881  18.1556420  23.1593420  20.8535925  23.0771890 136.444610   100
 push_10000 145.497340 168.8669480 196.2951526 189.6440755 216.3100830 379.041179   100

# Pop Task

Pop task from queue.

```{r}
config = start_flush_redis()
rush_1 = RushWorker$new("benchmark_1", config, host = "local")

setup = function(rush, xss) {
  rush$reset()
  rush$push_tasks(xss)
}

microbenchmark(
  pop_1 = rush_1$pop_task(),
  times = 100,
  unit = "ms",
  setup = setup(rush_1, list(xss_1))
)
```

Unit: milliseconds
  expr      min        lq      mean   median        uq      max neval
 pop_1 0.127897 0.1327875 0.1701292 0.137395 0.2292725 0.432014   100

```{r}
config = start_flush_redis()
rush_10 = RushWorker$new("benchmark_10", config, host = "local")

setup = function(rush, xss) {
  rush$reset()
  rush$push_tasks(xss)
}

microbenchmark(
  pop_10 = rush_10$pop_task(),
  times = 10,
  unit = "ms",
  setup = setup(rush_10, xss_10)
)
```

Unit: milliseconds
   expr      min       lq      mean    median       uq      max neval
 pop_10 0.136053 0.136866 0.1540547 0.1480095 0.159898 0.215176    10

```{r}
config = start_flush_redis()
rush_100 = RushWorker$new("benchmark_100", config, host = "local")

setup = function(rush, xss) {
  rush$reset()
  rush$push_tasks(xss)
}

microbenchmark(
  pop_100 = rush_100$pop_task(),
  times = 100,
  unit = "ms",
  setup = setup(rush_100, xss_100)
)
```

Unit: milliseconds
    expr      min        lq      mean    median       uq      max neval
 pop_100 0.140014 0.1472155 0.1756195 0.1543855 0.181516 0.468548   100

  ```{r}
config = start_flush_redis()
rush_1000 = RushWorker$new("benchmark_1000", config, host = "local")

setup = function(rush, xss) {
  rush$reset()
  rush$push_tasks(xss)
}

microbenchmark(
  pop_1000 = rush_1000$pop_task(),
  times = 100,
  unit = "ms",
  setup = setup(rush_1000, xss_1000)
)
```

Unit: milliseconds
     expr      min        lq      mean   median        uq      max neval
 pop_1000 0.191033 0.2061725 0.2536218 0.233486 0.2693795 0.629608   100

```{r}
config = start_flush_redis()
rush_10000 = RushWorker$new("benchmark_10000", config, host = "local")

setup = function(rush, xss) {
  rush$reset()
  rush$push_tasks(xss)
}

microbenchmark(
  pop_10000 = rush_10000$pop_task(),
  times = 100,
  unit = "ms",
  setup = setup(rush_10000, xss_10000)
)
```

Unit: milliseconds
      expr      min        lq      mean   median       uq      max neval
 pop_10000 0.344639 0.5991955 0.6640434 0.651927 0.716808 1.231137   100

 FIXME: Why do we see an increasing run time?

 # Fetch Queued Tasks

```{r}
config = start_flush_redis()
rush_1 = RushWorker$new("benchmark_1", config, host = "local")
rush_10 = RushWorker$new("benchmark_10", config, host = "local")
rush_100 = RushWorker$new("benchmark_100", config, host = "local")
rush_1000 = RushWorker$new("benchmark_1000", config, host = "local")
rush_10000 = RushWorker$new("benchmark_10000", config, host = "local")

setup = function(rush, xss) {
  rush$push_tasks(xss)
}

setup(rush_1, list(xss_1))
setup(rush_10, xss_10)
setup(rush_100, xss_100)
setup(rush_1000, xss_1000)
setup(rush_10000, xss_10000)

microbenchmark(
  rush_1 = rush_1$fetch_queued_tasks(),
  rush_10 = rush_10$fetch_queued_tasks(),
  rush_100 = rush_100$fetch_queued_tasks(),
  rush_1000 = rush_1000$fetch_queued_tasks(),
  rush_10000 = rush_10000$fetch_queued_tasks(),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
       expr        min          lq        mean     median          uq        max neval
     rush_1   0.366892   0.6114630   0.7607303   0.746146   0.8652680   1.817590   100
    rush_10   0.484673   0.7362395   0.8660882   0.832425   0.9758925   1.617485   100
   rush_100   1.700577   2.0470220   2.9646661   2.238771   2.4783195  17.440093   100
  rush_1000  12.831918  13.8625735  17.2203795  15.434030  18.7685765  31.728287   100
 rush_10000 140.367657 155.5522745 180.8202289 176.642772 200.4583050 293.014944   100

 # Fetch Running Tasks

```{r}
config = start_flush_redis()
rush_1 = RushWorker$new("benchmark_1", config, host = "local")
rush_10 = RushWorker$new("benchmark_10", config, host = "local")
rush_100 = RushWorker$new("benchmark_100", config, host = "local")
rush_1000 = RushWorker$new("benchmark_1000", config, host = "local")
rush_10000 = RushWorker$new("benchmark_10000", config, host = "local")

setup = function(rush, xss) {
  keys = rush$push_tasks(xss)
  rush$connector$command(c("SADD", sprintf("%s:running_tasks", rush$instance_id), keys))
}

setup(rush_1, list(xss_1))
setup(rush_10, xss_10)
setup(rush_100, xss_100)
setup(rush_1000, xss_1000)
setup(rush_10000, xss_10000)

microbenchmark(
  rush_1 = rush_1$fetch_running_tasks(),
  rush_10 = rush_10$fetch_running_tasks(),
  rush_100 = rush_100$fetch_running_tasks(),
  rush_1000 = rush_1000$fetch_running_tasks(),
  rush_10000 = rush_10000$fetch_running_tasks(),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
       expr        min          lq        mean     median          uq        max neval
     rush_1   0.355943   0.6259605   0.7589962   0.767171   0.8635895   1.712062   100
    rush_10   0.470172   0.7366485   0.9482969   0.901166   0.9909690   5.848721   100
   rush_100   1.700112   2.0993655   2.9308482   2.254460   2.5348065  11.920167   100
  rush_1000  13.637335  14.6639060  18.6676953  18.376235  21.1421260  31.144179   100
 rush_10000 145.114528 160.2684810 191.2677952 189.569095 209.4350670 296.491796   100

# Fetch Results

```{r}
setup = function(rush, xss) {
  rush$reset()
  keys = rush$push_tasks(xss)
  rush$connector$command(c("SADD", get_private(rush)$.get_key("running_tasks"), keys))
  walk(keys, function(key) rush$push_results(key, list(list(y = 10))))
}
```

```{r}
config = start_flush_redis()
rush_1 = RushWorker$new("benchmark_1", config, host = "local")

microbenchmark(
  latest_results_1 = rush_1$fetch_latest_results(),
  fetch_results_1 = rush_1$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_1, list(xss_1))
)
```

Unit: milliseconds
             expr      min        lq      mean   median        uq      max neval
 latest_results_1 0.134046 0.1416235 0.1581226 0.147388 0.1546185 0.376052   100
  fetch_results_1 0.319994 0.3648140 0.3883027 0.374643 0.3912485 0.678249   100

```{r}
config = start_flush_redis()
rush_10 = RushWorker$new("benchmark_10", config, host = "local")

microbenchmark(
  latest_results_10 = rush_10$fetch_latest_results(),
  fetch_results_10 = rush_10$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_10, xss_10)
)
```

Unit: milliseconds
              expr      min       lq      mean    median        uq      max neval
 latest_results_10 0.232626 0.250776 0.3058813 0.2563705 0.2668325 4.316816   100
  fetch_results_10 0.445023 0.489549 0.5144270 0.5030565 0.5178220 0.837707   100

```{r}
config = start_flush_redis()
rush_100 = RushWorker$new("benchmark_100", config, host = "local")

microbenchmark(
  latest_results_100 = rush_100$fetch_latest_results(),
  fetch_results_100 = rush_100$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_100, xss_100)
)
```

Unit: milliseconds
               expr      min       lq     mean   median       uq      max neval
 latest_results_100 1.211541 1.297664 1.502883 1.338703 1.398546 5.581843   100
  fetch_results_100 1.478593 1.589951 1.783328 1.651066 1.727738 6.040967   100

```{r}
config = start_flush_redis()
rush_1000 = RushWorker$new("benchmark_1000", config, host = "local")

microbenchmark(
  latest_results_1000 = rush_1000$fetch_latest_results(),
  fetch_results_1000 = rush_1000$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_1000, xss_1000)
)
```

Unit: milliseconds
                expr      min       lq     mean   median       uq      max neval
 latest_results_1000 10.05305 10.92510 13.29896 11.50096 15.54614 28.97190   100
  fetch_results_1000 10.66936 11.30885 14.28652 11.85500 15.93101 91.06246   100

```{r}
config = start_flush_redis()
rush_10000 = RushWorker$new("benchmark_10000", config, host = "local")

microbenchmark(
  latest_results_10000 = rush_10000$fetch_latest_results(),
  fetch_results_10000 = rush_10000$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_10000, xss_10000)
)
```

# Fetch Result with Cache

```{r}
setup = function(rush, xss) {
  rush$reset()
  keys = rush$push_tasks(xss)
  rush$connector$command(c("SADD", get_private(rush)$.get_key("running_tasks"), keys))
  walk(keys, function(key) rush$push_results(key, list(list(y = 10))))
  rush$fetch_results()
  keys = rush$push_tasks(xss_100)
  rush$connector$command(c("SADD", get_private(rush)$.get_key("running_tasks"), keys))
  walk(keys, function(key) rush$push_results(key, list(y = 10)))
}
```

```{r}
config = start_flush_redis()
rush_1 = RushWorker$new("benchmark_1", config, host = "local")

microbenchmark(
  latest_results_1 = rush_1$fetch_latest_results(),
  fetch_results_1 = rush_1$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_1, list(xss_1))
)
```



```{r}
config = start_flush_redis()
rush_10 = RushWorker$new("benchmark_10", config, host = "local")

microbenchmark(
  latest_results_10 = rush_10$fetch_latest_results(),
  fetch_results_10 = rush_10$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_10, xss_10)
)
```



```{r}
config = start_flush_redis()
rush_100 = RushWorker$new("benchmark_100", config, host = "local")

microbenchmark(
  latest_results_100 = rush_100$fetch_latest_results(),
  fetch_results_100 = rush_100$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_100, xss_100)
)
```



```{r}
config = start_flush_redis()
rush_1000 = RushWorker$new("benchmark_1000", config, host = "local")

microbenchmark(
  latest_results_1000 = rush_1000$fetch_latest_results(),
  fetch_results_1000 = rush_1000$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_1000, xss_1000)
)
```



```{r}
config = start_flush_redis()
rush_10000 = RushWorker$new("benchmark_10000", config, host = "local")

microbenchmark(
  latest_results_10000 = rush_10000$fetch_latest_results(),
  fetch_results_10000 = rush_10000$fetch_results(),
  times = 100,
  unit = "ms",
  setup = setup(rush_10000, xss_10000)
)
```

## Fetch Data

```{r}
setup = function(rush, xss) {
  rush$reset()
  keys = rush$push_tasks(xss)
  rush$connector$command(c("SADD", get_private(rush)$.get_key("running_tasks"), keys))
  walk(keys, function(key) rush$push_results(key, list(list(y = 10))))
}
```

```{r}
config = start_flush_redis()
rush_1 = RushWorker$new("benchmark_1", config, host = "local")

microbenchmark(
  fetch_finished_tasks_1 = rush_1$fetch_finished_tasks(),
  times = 100,
  unit = "ms",
  setup = setup(rush_1, list(xss_1))
)
```

Unit: milliseconds
                   expr      min       lq      mean   median        uq     max neval
 fetch_finished_tasks_1 0.599782 0.694292 0.8706606 0.725062 0.7619705 9.40529   100

```{r}
config = start_flush_redis()
rush_10 = RushWorker$new("benchmark_10", config, host = "local")

microbenchmark(
  fetch_finished_tasks_10 = rush_10$fetch_finished_tasks(),
  times = 100,
  unit = "ms",
  setup = setup(rush_10, xss_10)
)
```

Unit: milliseconds
                    expr      min      lq      mean  median       uq      max neval
 fetch_finished_tasks_10 0.505893 0.53931 0.5965121 0.56734 0.594007 1.033522   100

```{r}
config = start_flush_redis()
rush_100 = RushWorker$new("benchmark_100", config, host = "local")

microbenchmark(
  fetch_finished_tasks_100 = rush_100$fetch_finished_tasks(),
  times = 100,
  unit = "ms",
  setup = setup(rush_100, xss_100)
)
```

Unit: milliseconds
                     expr      min       lq     mean   median       uq      max neval
 fetch_finished_tasks_100 1.969603 2.112923 2.209827 2.187118 2.244154 3.672662   100

```{r}
config = start_flush_redis()
rush_1000 = RushWorker$new("benchmark_1000", config, host = "local")

microbenchmark(
  fetch_finished_tasks_1000 = rush_1000$fetch_finished_tasks(),
  times = 100,
  unit = "ms",
  setup = setup(rush_1000, xss_1000)
)
```

Unit: milliseconds
                      expr      min       lq    mean  median       uq      max neval
 fetch_finished_tasks_1000 15.78889 17.39021 20.7287 18.8238 22.06267 102.5916   100

```{r}
config = start_flush_redis()
rush_10000 = RushWorker$new("benchmark_10000", config, host = "local")

microbenchmark(
  fetch_finished_tasks_10000 = rush_10000$fetch_finished_tasks(),
  times = 100,
  unit = "ms",
  setup = setup(rush_10000, xss_10000)
)
```

# Write Hashes

One hash with one field.

```{r}
config = redux::redis_config()
rush= Rush$new("benchmark", config)
rush$reset()

xdt_1 = data.table(x1 = runif(1), x2 = runif(1))
xss_1 = transpose_list(xdt_1)

microbenchmark(
  write_hash = rush$write_hashes(xs = xss_1),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
       expr      min       lq      mean   median       uq     max neval
 write_hash 0.530609 0.620622 0.9946271 0.648462 0.964719 140.569  1000

One hash with two fields.

```{r}
config = redux::redis_config()
rush= Rush$new("benchmark", config)
rush$reset()

xdt_1 = data.table(x1 = runif(1), x2 = runif(1))
xss_1 = transpose_list(xdt_1)
extra_1 = replicate(1, list(list(extra1 = runif(1))))

microbenchmark(
  write_hash = rush$write_hashes(xs = xss_1, xs_extra = extra_1),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
       expr      min       lq    mean    median        uq      max neval
 write_hash 0.580248 0.607519 0.65182 0.6196865 0.6521155 1.159964   100


Multiple hashes with one field.

```{r}
config = redux::redis_config()
rush= Rush$new("benchmark", config)
rush$reset()

xdt_10 = data.table(x1 = runif(10), x2 = runif(10))
xdt_100 = data.table(x1 = runif(100), x2 = runif(100))
xdt_1000 = data.table(x1 = runif(1000), x2 = runif(1000))
xdt_10000 = data.table(x1 = runif(10000), x2 = runif(10000))

xss_10 = transpose_list(xdt_10)
xss_100 = transpose_list(xdt_100)
xss_1000 = transpose_list(xdt_1000)
xss_10000 = transpose_list(xdt_10000)


microbenchmark(
  write_hashes_10 = rush$write_hashes(xs = xss_10),
  write_hashes_100 = rush$write_hashes(xs = xss_100),
  write_hashes_1000 = rush$write_hashes(xs = xss_1000),
  write_hashes_10000 = rush$write_hashes(xs = xss_10000),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
               expr        min         lq       mean     median         uq        max neval
    write_hashes_10   0.773612   1.027355   1.278735   1.301781   1.537268   1.684296   100
   write_hashes_100   1.821931   2.190416   2.977044   2.862988   3.168775  14.746965   100
  write_hashes_1000  10.971556  13.553282  18.063778  15.097364  19.352713 102.880572   100
 write_hashes_10000 111.956769 132.023770 147.744713 143.365596 154.191339 306.108971   100

Multiple hashes with two fields.

```{r}
config = redux::redis_config()
rush= Rush$new("benchmark", config)
rush$reset()

xdt_10 = data.table(x1 = runif(10), x2 = runif(10))
xdt_100 = data.table(x1 = runif(100), x2 = runif(100))
xdt_1000 = data.table(x1 = runif(1000), x2 = runif(1000))
xdt_10000 = data.table(x1 = runif(10000), x2 = runif(10000))

xss_10 = transpose_list(xdt_10)
xss_100 = transpose_list(xdt_100)
xss_1000 = transpose_list(xdt_1000)
xss_10000 = transpose_list(xdt_10000)

extra_10 = replicate(10, list(list(extra1 = runif(1))))
extra_100 = replicate(100, list(list(extra1 = runif(1))))
extra_1000 = replicate(1000, list(list(extra1 = runif(1))))
extra_10000 = replicate(10000, list(list(extra1 = runif(1))))


microbenchmark(
  write_hashes_10 = rush$write_hashes(xs = xss_10, xs_extra = extra_10),
  write_hashes_100 = rush$write_hashes(xs = xss_100, xs_extra = extra_100),
  write_hashes_1000 = rush$write_hashes(xs = xss_1000, xs_extra = extra_1000),
  write_hashes_10000 = rush$write_hashes(xs = xss_10000, xs_extra = extra_10000),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
               expr        min          lq       mean     median         uq       max neval
    write_hashes_10   0.756041   0.9748905   1.359851   1.122755   1.373602  10.91992   100
   write_hashes_100   1.942930   2.2426215   2.831560   2.456692   3.543381  12.07348   100
  write_hashes_1000  13.352710  15.1968510  18.918174  17.919134  21.298211  31.34914   100
 write_hashes_10000 137.644531 156.7866165 181.286768 174.260601 188.582098 360.85884   100

# Read Hashes

One field.

```{r}
config = redux::redis_config()
rush= Rush$new("benchmark", config)
rush$reset()

xdt_10000 = data.table(x1 = runif(10000), x2 = runif(10000))
xss_10000 = transpose_list(xdt_10000)

keys = rush$write_hashes(xs = xss_10000)

microbenchmark(
  read_hashes_1 = rush$read_hashes(keys[[1]], "xs"),
  read_hashes_10 = rush$read_hashes(keys[seq(10)], "xs"),
  read_hashes_100 = rush$read_hashes(keys[seq(100)], "xs"),
  read_hashes_1000 = rush$read_hashes(keys[seq(1000)], "xs"),
  read_hashes_10000 = rush$read_hashes(keys, "xs"),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
              expr        min          lq       mean     median         uq        max neval
     read_hashes_1   0.600210   0.7896420   1.006246   0.885132   1.036484   4.032889   100
    read_hashes_10   0.756010   0.8989385   1.177358   1.046673   1.190430   5.871955   100
   read_hashes_100   1.602496   1.9365210   2.703555   2.086880   2.556201   8.985804   100
  read_hashes_1000   9.744491  11.2126610  15.337870  13.128587  17.877468  44.668043   100
 read_hashes_10000 103.455112 120.8318360 146.028175 140.802626 160.718842 295.989210   100

Two fields.

```{r}
config = redux::redis_config()
rush= Rush$new("benchmark", config)
rush$reset()

xdt_10000 = data.table(x1 = runif(10000), x2 = runif(10000))
xss_10000 = transpose_list(xdt_10000)
extra_10000 = replicate(10000, list(list(extra1 = runif(1))))

keys = rush$write_hashes(xs = xss_10000, xs_extra = extra_10000)

microbenchmark(
  read_hashes_1 = rush$read_hashes(keys[[1]], c("xs", "xs_extra")),
  read_hashes_10 = rush$read_hashes(keys[seq(10)], c("xs", "xs_extra")),
  read_hashes_100 = rush$read_hashes(keys[seq(100)], c("xs", "xs_extra")),
  read_hashes_1000 = rush$read_hashes(keys[seq(1000)], c("xs", "xs_extra")),
  read_hashes_10000 = rush$read_hashes(keys, c("xs", "xs_extra")),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
              expr        min          lq       mean      median          uq        max neval
     read_hashes_1   0.613858   0.7555275   1.005441   0.8545745   0.9844215   5.571285   100
    read_hashes_10   0.737404   0.8668575   1.101237   1.0230825   1.1997545   2.228207   100
   read_hashes_100   1.784320   2.0785685   2.594113   2.2532730   2.4657635   8.656693   100
  read_hashes_1000  11.199241  12.9659085  17.469444  15.0559710  19.7809245  57.997557   100
 read_hashes_10000 121.931667 140.8399040 172.223226 166.0748975 188.6839580 324.805854   100

# Basic Redis Operations

Add keys to set.

```{r}
keys_1 = uuid::UUIDgenerate(n = 1)
keys_10 = uuid::UUIDgenerate(n = 10)
keys_100 = uuid::UUIDgenerate(n = 100)
keys_1000 = uuid::UUIDgenerate(n = 1000)
keys_10000 = uuid::UUIDgenerate(n = 10000)

config = redux::redis_config()
rush = Rush$new("benchmark", config)
rush$reset()
r = rush$connector

microbenchmark(
  add_1 = r$command(c("SADD", "running_tasks", keys_1)),
  add_10 = r$command(c("SADD", "running_tasks", keys_10)),
  add_100 = r$command(c("SADD", "running_tasks", keys_100)),
  add_1000 = r$command(c("SADD", "running_tasks", keys_1000)),
  add_10000 = r$command(c("SADD", "running_tasks", keys_10000)),
  times = 100,
  unit = "ms",
  setup = r$FLUSHDB()
)
```

Add keys to list.

```{r}
keys_1 = uuid::UUIDgenerate(n = 1)
keys_10 = uuid::UUIDgenerate(n = 10)
keys_100 = uuid::UUIDgenerate(n = 100)
keys_1000 = uuid::UUIDgenerate(n = 1000)
keys_10000 = uuid::UUIDgenerate(n = 10000)

config = redux::redis_config()
rush = Rush$new("benchmark", config)
rush$reset()
r = rush$connector

microbenchmark(
  add_1 = r$command(c("RPUSH", "running_tasks", keys_1)),
  add_10 = r$command(c("RPUSH", "running_tasks", keys_10)),
  add_100 = r$command(c("RPUSH", "running_tasks", keys_100)),
  add_1000 = r$command(c("RPUSH", "running_tasks", keys_1000)),
  add_10000 = r$command(c("RPUSH", "running_tasks", keys_10000)),
  times = 100,
  unit = "ms",
  setup = r$FLUSHDB()
)
```

Writting to lists and sets is cheap.

# Active Bindings

```{r}
config = start_flush_redis()
rush = Rush$new("benchmark", config)

future::plan("multisession", workers = 10)
fun = function(x1, x2, ...) list(y = x1 + x2)
rush$start_workers(fun, n_workers = 10, host = "local")
rush$await_workers(10)

setup = function(rush) {
  rush$.__enclos_env__$private$.worker_info = data.table()
}

microbenchmark(
  connector = rush$connector,
  n_workers = rush$n_workers,
  woker_ids = rush$worker_ids,
  worker_info = rush$worker_info,
  times = 100,
  unit = "ms",
  setup = setup(rush)
)
```

Unit: milliseconds
        expr      min        lq       mean    median        uq      max neval
   connector 0.000501 0.0005575 0.00087156 0.0006820 0.0010820 0.002121   100
   n_workers 0.014753 0.0170225 0.03729758 0.0280780 0.0615005 0.117058   100
   woker_ids 0.017904 0.0197060 0.03825931 0.0231230 0.0604215 0.409700   100
 worker_info 0.574304 0.6100135 0.72859173 0.6431655 0.6825245 2.583322   100

# Worker Info with Cache

```{r}
config = start_flush_redis()
rush = Rush$new("benchmark", config)

future::plan("multisession", workers = 10)
fun = function(x1, x2, ...) list(y = x1 + x2)
rush$start_workers(fun, n_workers = 10, host = "local")
rush$await_workers(10)
worker_info = rush$worker_info

setup = function(rush) {
  rush$worker_info
}

microbenchmark(
  worker_info = rush$worker_info,
  times = 100,
  unit = "ms",
  setup = setup(rush)
)
```

Unit: milliseconds
        expr      min        lq       mean   median        uq      max neval
 worker_info 0.021828 0.0222865 0.02338452 0.022748 0.0233085 0.055441   100

# Detect Lost Workers with ps_exists Function

```{r}
config = start_flush_redis()
rush = Rush$new("benchmark", config)

future::plan("multisession", workers = 10)
fun = function(x1, x2, ...) list(y = x1 + x2)
rush$start_workers(fun, n_workers = 10, host = "local")
rush$await_workers(10)

rush$detect_lost_workers()

setup = function(rush) rush$detect_lost_workers()

microbenchmark(
  detect_lost_workers = rush$detect_lost_workers(),
  times = 100,
  unit = "ms",
  setup = setup(rush)
)
```

Unit: milliseconds
                expr      min        lq      mean    median        uq      max neval
 detect_lost_workers 0.767131 0.8432155 0.9824685 0.8989845 0.9990935 4.020794   100

# Detect Lost Workers with Heartbeat

Detect lost workers with heartbeat.

```{r}
config = start_flush_redis()
rush = Rush$new("benchmark", config)

future::plan("multisession", workers = 10)
fun = function(x1, x2, ...) list(y = x1 + x2)
rush$start_workers(fun, n_workers = 10, host = "remote", heartbeat_period = 3)
rush$await_workers(10)
rush$promises = NULL

microbenchmark(
  detect_lost_workers = rush$detect_lost_workers(),
  times = 100,
  unit = "ms"
)
```

Unit: milliseconds
                expr      min        lq      mean    median       uq      max neval
 detect_lost_workers 0.718074 0.7580115 0.9484395 0.7927805 0.809943 13.76021   100

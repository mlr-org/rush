---
title: "Benchmark Rush Runtime Performance"
format:
  html:
    toc: true
    html-math-method: katex
params:
  result: NULL
knitr:
  opts_chunk:
    R.options:
      width: 120
---

```{r}
#| include: false
library(microbenchmark)
library(ggplot2)
library(data.table)

res = readRDS(params$result)

c.microbenchmark = function(...) {
  x = Map(c, ...)
  attributes(x) = attributes(list(...)[[1]])
  attr(x, "row.names") = seq(length(x[[1]]))
  class(x) = c("microbenchmark", "data.frame")
  x
}
```

## Scope

Evaluating functions in a parallel and distributed environment


## Start Rush

### Initializing Rush Controller

Measure the time it takes to initialize a rush controller.

```{r}
#| eval: false
Rush$new("benchmark", config)
```

```{r}
#| echo: false
res$bm_init_rush
```

### Initializing Rush Worker

Measure the time it takes to initialize a rush worker.

```{r}
#| eval: false
RushWorker$new("benchmark", config, host = "local")
```

```{r}
#| echo: false
res$bm_init_worker
```

### Spawn Rush Worker with Future

Measure the time until a worker is started with future and is able to receive tasks.
This is usually done only once and thus does not have a significant impact on the overall performance.


```{r}
#| eval: false
future::plan("cluster", workers = 1)
rush$start_workers(
  fun = fun,
  n_workers = 1,
  host = "local",
  await_workers = TRUE)
```

```{r}
#| echo: false
res$bm_init_future
```

### Spawn Rush Worker with Heartbeat

Measure the time until a worker is started with a heartbeat and is able to receive tasks.

```{r}
#| eval: false
future::plan("cluster", workers = 1)
rush$start_workers(
  fun = fun,
  n_workers = 1,
  host = "local",
  heartbeat_period = 3,
  await_workers = TRUE)
```

```{r}
#| echo: false
res$bm_init_heartbeat
```

## Push
### Task

Measure the time it takes to push tasks to the queue.
The time grows slower than linearly with the number of tasks.
Probably because of pipelining in redis.

```{r}
#| eval: false
rush$push_tasks(xss)
```

```{r}
#| echo: false
res$bm_push_task
```

### Task with Extra

Measure the time it takes to push tasks with one extra value to the queue.

```{r}
#| eval: false
rush$push_tasks(xss, extra)
```

```{r}
#| echo: false
res$bm_push_extra
```

### Priority Task

Measure the time it takes to push tasks to a specfic worker.

```{r}
#| eval: false
rush$push_priority_tasks(xss)
```

```{r}
#| echo: false
res$bm_push_priority
```

```{r}
#| echo: false
#| fig-cap: "Time in milliseconds to push tasks to the queue. Both axes are on the logarithmic scale."
data = data.table(
  exp = c(1, 10, 100, 1000, 10000),
  mean = c(summary(res$bm_push_task)$mean, summary(res$bm_push_extra)$mean, summary(res$bm_push_priority)$mean),
  experiment = rep(c("Task", "Task with Extra", "Priority Task"), each = 5)
)

ggplot(data, aes(x = exp, y = mean, group = experiment, color = experiment)) +
  geom_line() +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "Number of Tasks", y = "Time [ms]", color = "Function") +
  theme_minimal()
```

## Write
### Hashes

Measure the time it takes to write hashes.

```{r}
#| eval: false
rush$write_hashes()
```

```{r}
#| echo: false
res$bm_write
```

### Hashes with Extra

Measure the time it takes to write hashes with one extra value.

```{r}
#| eval: false
rush$write_hashes(xss, extra)
```

```{r}
#| echo: false
res$bm_write_extra
```

## Pop

Measure the time it takes to pop a task from the queue.

```{r}
#| eval: false
rush$pop_task()
```

```{r}
#| echo: false
c(res$bm_pop_1, res$bm_pop_10, res$bm_pop_100, res$bm_pop_1000, res$bm_pop_10000)
```

## Read
### Hashes

Measure the time it takes to read hashes.

```{r}
#| eval: false
rush$read_hashes()
```

```{r}
#| echo: false
res$bm_read
```

### Hashes with Extra

Measure the time it takes to read hashes with one extra value.

```{r}
#| eval: false
rush$read_hashes()
```

```{r}
#| echo: false
res$bm_read_extra
```

## Fetch
### Queued Tasks

Measure the time it takes to fetch queued tasks.

```{r}
#| eval: false
rush$fetch_queued_tasks()
```

```{r}
#| echo: false
res$bm_fetch_queued
```

### Running Tasks

Measure the time it takes to fetch running tasks.

```{r}
#| eval: false
rush$fetch_running_tasks()
```

```{r}
#| echo: false
res$bm_fetch_running
```

### Results

Measure the time it takes to fetch results.

```{r}
#| eval: false
rush$fetch_latest_results()
rush$fetch_results()
```

```{r}
#| echo: false
c(res$bm_results_1, res$bm_results_10, res$bm_results_100, res$bm_results_1000, res$bm_results_10000)
```

```{r}
#| echo: false
#| fig-cap: "Time in milliseconds to fetch results. The `$fetch_results()` method additionally caches the results."

bm_results = c(res$bm_results_1, res$bm_results_10, res$bm_results_100, res$bm_results_1000, res$bm_results_10000)

data = data.table(
  exp = rep(c(1, 10, 100, 1000, 10000), each = 2),
  mean = summary(bm_results)$mean,
  experiment = c("Latest Results", "Results")
)

ggplot(data, aes(x = exp, y = mean, group = experiment, color = experiment)) +
  geom_line() +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "Number of Tasks", y = "Time [ms]", color = "Function") +
  theme_minimal()
```

### Result with Cache

Measure the time it takes to fetch 100 new results and $n$ cached results.

```{r}
#| eval: false
rush$fetch_results()
```

```{r}
#| echo: false
c(res$bm_cache_result_1, res$bm_cache_result_10, res$bm_cache_result_100, res$bm_cache_result_1000, res$bm_cache_result_10000)
```

### Finished Tasks

Measure the time it takes to fetch finished tasks.

```{r}
#| eval: false
rush$fetch_finished_tasks()
```

```{r}
#| echo: false
c(res$bm_finished_1, res$bm_finished_10, res$bm_finished_100, res$bm_finished_1000, res$bm_finished_10000)
```

## Misc
### Worker Info with Cache

Measure the time is takes to read the cached worker info.

```{r}
#| eval: false
rush$worker_info
```

```{r}
#| echo: false
res$bm_worker_info
```

### Detect Lost Workers Locally

Measure the time it takes to detect lost workers locally

```{r}
#| eval: false
rush$detect_lost_workers()
```

```{r}
#| echo: false
res$bm_lost_local
```


### Detect Lost Workers with Heartbeat

Measure the time it takes to detect lost workers with heartbeat

```{r}
#| eval: false
rush$detect_lost_workers()
```

```{r}
#| echo: false
res$bm_lost_heartbeat
```
